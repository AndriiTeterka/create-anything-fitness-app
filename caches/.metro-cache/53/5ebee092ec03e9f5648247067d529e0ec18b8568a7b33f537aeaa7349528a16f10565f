{"dependencies":[{"name":"./DiscreteGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":62,"index":62}}],"key":"dpOMqAtzFjjUQychI3TYNsYmXQE=","exportNames":["*"],"imports":1}},{"name":"./NodeManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":114},"end":{"line":3,"column":45,"index":159}}],"key":"krMbHBNX+RO/bw1gHRLBNgemf/A=","exportNames":["*"],"imports":1}},{"name":"./PressGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":160},"end":{"line":4,"column":56,"index":216}}],"key":"K7JCCzt/0tQ/4D2w8oVjath5+4I=","exportNames":["*"],"imports":1}},{"name":"./utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":217},"end":{"line":5,"column":58,"index":275}}],"key":"fIqjJ6Rx8c7Khc/wm9kX7hQXC5I=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      n[k] = e[k];\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _DiscreteGestureHandler = require(_dependencyMap[0], \"./DiscreteGestureHandler\");\n  var DiscreteGestureHandler = _interopDefault(_DiscreteGestureHandler);\n  var _NodeManager = require(_dependencyMap[1], \"./NodeManager\");\n  var NodeManager = _interopNamespace(_NodeManager);\n  var _PressGestureHandler = require(_dependencyMap[2], \"./PressGestureHandler\");\n  var PressGestureHandler = _interopDefault(_PressGestureHandler);\n  var _utils = require(_dependencyMap[3], \"./utils\");\n  class NativeViewGestureHandler extends PressGestureHandler.default {\n    get isNative() {\n      return true;\n    }\n    onRawEvent(ev) {\n      super.onRawEvent(ev);\n      if (!ev.isFinal) {\n        // if (this.ref instanceof ScrollView) {\n        if ((0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)({\n          x: ev.deltaX,\n          y: ev.deltaY\n        }), 10)) {\n          // @ts-ignore FIXME(TS) config type\n          if (this.config.disallowInterruption) {\n            const gestures = Object.values(NodeManager.getNodes()).filter(gesture => {\n              const {\n                handlerTag,\n                view,\n                isGestureRunning\n              } = gesture;\n              return (\n                // Check if this gesture isn't self\n                handlerTag !== this.handlerTag &&\n                // Ensure the gesture needs to be cancelled\n                isGestureRunning &&\n                // ScrollView can cancel discrete gestures like taps and presses\n                gesture instanceof DiscreteGestureHandler.default &&\n                // Ensure a view exists and is a child of the current view\n                view &&\n                // @ts-ignore FIXME(TS) view type\n                this.view.contains(view)\n              );\n            });\n            // Cancel all of the gestures that passed the filter\n            for (const gesture of gestures) {\n              // TODO: Bacon: Send some cached event.\n              gesture.forceInvalidate(ev);\n            }\n          }\n        }\n      }\n    }\n  }\n  var _default = NativeViewGestureHandler;\n});","lineCount":78,"map":[[21,2,47,0,"Object"],[21,8,47,0],[21,9,47,0,"defineProperty"],[21,23,47,0],[21,24,47,0,"exports"],[21,31,47,0],[22,4,47,0,"enumerable"],[22,14,47,0],[23,4,47,0,"get"],[23,7,47,0],[23,18,47,0,"get"],[23,19,47,0],[24,6,47,0],[24,13,47,0,"_default"],[24,21,47,0],[25,4,47,0],[26,2,47,0],[27,2,1,0],[27,6,1,0,"_DiscreteGestureHandler"],[27,29,1,0],[27,32,1,0,"require"],[27,39,1,0],[27,40,1,0,"_dependencyMap"],[27,54,1,0],[28,2,1,0],[28,6,1,0,"DiscreteGestureHandler"],[28,28,1,0],[28,31,1,0,"_interopDefault"],[28,46,1,0],[28,47,1,0,"_DiscreteGestureHandler"],[28,70,1,0],[29,2,3,0],[29,6,3,0,"_NodeManager"],[29,18,3,0],[29,21,3,0,"require"],[29,28,3,0],[29,29,3,0,"_dependencyMap"],[29,43,3,0],[30,2,3,0],[30,6,3,0,"NodeManager"],[30,17,3,0],[30,20,3,0,"_interopNamespace"],[30,37,3,0],[30,38,3,0,"_NodeManager"],[30,50,3,0],[31,2,4,0],[31,6,4,0,"_PressGestureHandler"],[31,26,4,0],[31,29,4,0,"require"],[31,36,4,0],[31,37,4,0,"_dependencyMap"],[31,51,4,0],[32,2,4,0],[32,6,4,0,"PressGestureHandler"],[32,25,4,0],[32,28,4,0,"_interopDefault"],[32,43,4,0],[32,44,4,0,"_PressGestureHandler"],[32,64,4,0],[33,2,5,0],[33,6,5,0,"_utils"],[33,12,5,0],[33,15,5,0,"require"],[33,22,5,0],[33,23,5,0,"_dependencyMap"],[33,37,5,0],[34,2,7,0],[34,8,7,6,"NativeViewGestureHandler"],[34,32,7,30],[34,41,7,39,"PressGestureHandler"],[34,60,7,58],[34,61,7,58,"default"],[34,68,7,58],[34,69,7,59],[35,4,8,2],[35,8,8,6,"isNative"],[35,16,8,14,"isNative"],[35,17,8,14],[35,19,8,17],[36,6,9,4],[36,13,9,11],[36,17,9,15],[37,4,10,2],[38,4,12,2,"onRawEvent"],[38,14,12,12,"onRawEvent"],[38,15,12,13,"ev"],[38,17,12,31],[38,19,12,33],[39,6,13,4],[39,11,13,9],[39,12,13,10,"onRawEvent"],[39,22,13,20],[39,23,13,21,"ev"],[39,25,13,23],[39,26,13,24],[40,6,14,4],[40,10,14,8],[40,11,14,9,"ev"],[40,13,14,11],[40,14,14,12,"isFinal"],[40,21,14,19],[40,23,14,21],[41,8,15,6],[42,8,16,6],[42,12,16,10],[42,16,16,10,"TEST_MIN_IF_NOT_NAN"],[42,22,16,29],[42,23,16,29,"TEST_MIN_IF_NOT_NAN"],[42,42,16,29],[42,44,16,30],[42,48,16,30,"VEC_LEN_SQ"],[42,54,16,40],[42,55,16,40,"VEC_LEN_SQ"],[42,65,16,40],[42,67,16,41],[43,10,16,43,"x"],[43,11,16,44],[43,13,16,46,"ev"],[43,15,16,48],[43,16,16,49,"deltaX"],[43,22,16,55],[44,10,16,57,"y"],[44,11,16,58],[44,13,16,60,"ev"],[44,15,16,62],[44,16,16,63,"deltaY"],[45,8,16,70],[45,9,16,71],[45,10,16,72],[45,12,16,74],[45,14,16,76],[45,15,16,77],[45,17,16,79],[46,10,17,8],[47,10,18,8],[47,14,18,12],[47,18,18,16],[47,19,18,17,"config"],[47,25,18,23],[47,26,18,24,"disallowInterruption"],[47,46,18,44],[47,48,18,46],[48,12,19,10],[48,18,19,16,"gestures"],[48,26,19,24],[48,29,19,27,"Object"],[48,35,19,33],[48,36,19,34,"values"],[48,42,19,40],[48,43,19,41,"NodeManager"],[48,54,19,52],[48,55,19,53,"getNodes"],[48,63,19,61],[48,64,19,62],[48,65,19,63],[48,66,19,64],[48,67,19,65,"filter"],[48,73,19,71],[48,74,20,13,"gesture"],[48,81,20,20],[48,85,20,25],[49,14,21,14],[49,20,21,20],[50,16,21,22,"handlerTag"],[50,26,21,32],[51,16,21,34,"view"],[51,20,21,38],[52,16,21,40,"isGestureRunning"],[53,14,21,57],[53,15,21,58],[53,18,21,61,"gesture"],[53,25,21,68],[54,14,22,14],[55,16,23,16],[56,16,24,16,"handlerTag"],[56,26,24,26],[56,31,24,31],[56,35,24,35],[56,36,24,36,"handlerTag"],[56,46,24,46],[57,16,25,16],[58,16,26,16,"isGestureRunning"],[58,32,26,32],[59,16,27,16],[60,16,28,16,"gesture"],[60,23,28,23],[60,35,28,35,"DiscreteGestureHandler"],[60,57,28,57],[60,58,28,57,"default"],[60,65,28,57],[61,16,29,16],[62,16,30,16,"view"],[62,20,30,20],[63,16,31,16],[64,16,32,16],[64,20,32,20],[64,21,32,21,"view"],[64,25,32,25],[64,26,32,26,"contains"],[64,34,32,34],[64,35,32,35,"view"],[64,39,32,39],[65,14,32,40],[66,12,34,12],[66,13,35,10],[66,14,35,11],[67,12,36,10],[68,12,37,10],[68,17,37,15],[68,23,37,21,"gesture"],[68,30,37,28],[68,34,37,32,"gestures"],[68,42,37,40],[68,44,37,42],[69,14,38,12],[70,14,39,12,"gesture"],[70,21,39,19],[70,22,39,20,"forceInvalidate"],[70,37,39,35],[70,38,39,36,"ev"],[70,40,39,38],[70,41,39,39],[71,12,40,10],[72,10,41,8],[73,8,42,6],[74,6,43,4],[75,4,44,2],[76,2,45,0],[77,2,47,0],[77,6,47,0,"_default"],[77,14,47,0],[77,17,47,15,"NativeViewGestureHandler"],[77,41,47,39],[78,0,47,40],[78,3]],"functionMap":{"names":["<global>","NativeViewGestureHandler","get__isNative","onRawEvent","Object.values.filter$argument_0"],"mappings":"AAA;ACM;ECC;GDE;EEE;YCQ;aDc;GFU;CDC"},"hasCjsExports":false},"type":"js/module"}]}