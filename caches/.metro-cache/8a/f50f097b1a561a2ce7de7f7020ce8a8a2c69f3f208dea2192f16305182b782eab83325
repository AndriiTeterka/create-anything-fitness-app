{"dependencies":[{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":42,"index":57}}],"key":"Opxn8Ttfh7QNGeF0y+BQ6rRbDGo=","exportNames":["*"],"imports":1}},{"name":"query-string","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":58},"end":{"line":4,"column":44,"index":102}}],"key":"Tk6zkk+/XfK89igjx1MNWAcG1Q8=","exportNames":["*"],"imports":1}},{"name":"./arrayStartsWith.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":103},"end":{"line":5,"column":55,"index":158}}],"key":"mJQeK2ZRLq8v0j9J6l50oLtYU2c=","exportNames":["*"],"imports":1}},{"name":"./findFocusedRoute.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":159},"end":{"line":6,"column":57,"index":216}}],"key":"/OEwo8APHIJtscmrfuh7WccCayM=","exportNames":["*"],"imports":1}},{"name":"./getPatternParts.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":217},"end":{"line":7,"column":55,"index":272}}],"key":"ZBgxhB8YmJlp1KxhfM5ocx9xUB0=","exportNames":["*"],"imports":1}},{"name":"./isArrayEqual.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":273},"end":{"line":8,"column":49,"index":322}}],"key":"0Xv+Jf6vWjo3/vKyf7CxgrGRylo=","exportNames":["*"],"imports":1}},{"name":"./validatePathConfig.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":323},"end":{"line":9,"column":61,"index":384}}],"key":"zoUaUuxQP5qPvRrno+lraXgTGfI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      n[k] = e[k];\n    });\n    n.default = e;\n    return n;\n  }\n  exports.getStateFromPath = getStateFromPath;\n  var _escapeStringRegexp = require(_dependencyMap[0], \"escape-string-regexp\");\n  var escape = _interopDefault(_escapeStringRegexp);\n  var _queryString = require(_dependencyMap[1], \"query-string\");\n  var queryString = _interopNamespace(_queryString);\n  var _arrayStartsWithJs = require(_dependencyMap[2], \"./arrayStartsWith.js\");\n  var _findFocusedRouteJs = require(_dependencyMap[3], \"./findFocusedRoute.js\");\n  var _getPatternPartsJs = require(_dependencyMap[4], \"./getPatternParts.js\");\n  var _isArrayEqualJs = require(_dependencyMap[5], \"./isArrayEqual.js\");\n  var _validatePathConfigJs = require(_dependencyMap[6], \"./validatePathConfig.js\");\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    const {\n      initialRoutes,\n      configs\n    } = getConfigResources(options);\n    const screens = options?.screens;\n    let remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    const prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n\n    if (prefix) {\n      // Make sure there is a trailing slash\n      const normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      const routes = remaining.split('/').filter(Boolean).map(segment => {\n        const name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (routes.length) {\n        return createNestedStateObject(path, routes, initialRoutes);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      const match = configs.find(config => config.segments.join('/') === '');\n      if (match) {\n        return createNestedStateObject(path, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs);\n      }\n      return undefined;\n    }\n    let result;\n    let current;\n\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const {\n      routes,\n      remainingPath\n    } = matchAgainstConfigs(remaining, configs);\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(path, routes, initialRoutes, configs);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  const cachedConfigResources = new WeakMap();\n  function getConfigResources(options) {\n    if (!options) return prepareConfigResources();\n    const cached = cachedConfigResources.get(options);\n    if (cached) return cached;\n    const resources = prepareConfigResources(options);\n    cachedConfigResources.set(options, resources);\n    return resources;\n  }\n  function prepareConfigResources(options) {\n    if (options) {\n      (0, _validatePathConfigJs.validatePathConfig)(options);\n    }\n    const initialRoutes = getInitialRoutes(options);\n    const configs = getSortedNormalizedConfigs(initialRoutes, options?.screens);\n    checkForDuplicatedConfigs(configs);\n    const configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    const initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getSortedNormalizedConfigs(initialRoutes, screens = {}) {\n    // Create a normalized configs array which will be easier to use\n    return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, initialRoutes, [], [], []))).sort((a, b) => {\n      // Sort config from most specific to least specific:\n      // - more segments\n      // - static segments\n      // - params with regex\n      // - regular params\n      // - wildcard\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if ((0, _isArrayEqualJs.isArrayEqual)(a.segments, b.segments)) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if ((0, _arrayStartsWithJs.arrayStartsWith)(a.segments, b.segments)) {\n        return -1;\n      }\n      if ((0, _arrayStartsWithJs.arrayStartsWith)(b.segments, a.segments)) {\n        return 1;\n      }\n      for (let i = 0; i < Math.max(a.segments.length, b.segments.length); i++) {\n        // if b is longer, b gets higher priority\n        if (a.segments[i] == null) {\n          return 1;\n        }\n\n        // if a is longer, a gets higher priority\n        if (b.segments[i] == null) {\n          return -1;\n        }\n        const aWildCard = a.segments[i] === '*';\n        const bWildCard = b.segments[i] === '*';\n        const aParam = a.segments[i].startsWith(':');\n        const bParam = b.segments[i].startsWith(':');\n        const aRegex = aParam && a.segments[i].includes('(');\n        const bRegex = bParam && b.segments[i].includes('(');\n\n        // if both are wildcard or regex, we compare next component\n        if (aWildCard && bWildCard || aRegex && bRegex) {\n          continue;\n        }\n\n        // if only a is wildcard, b gets higher priority\n        if (aWildCard && !bWildCard) {\n          return 1;\n        }\n\n        // if only b is wildcard, a gets higher priority\n        if (bWildCard && !aWildCard) {\n          return -1;\n        }\n\n        // If only a has a param, b gets higher priority\n        if (aParam && !bParam) {\n          return 1;\n        }\n\n        // If only b has a param, a gets higher priority\n        if (bParam && !aParam) {\n          return -1;\n        }\n\n        // if only a has regex, a gets higher priority\n        if (aRegex && !bRegex) {\n          return -1;\n        }\n\n        // if only b has regex, b gets higher priority\n        if (bRegex && !aRegex) {\n          return 1;\n        }\n      }\n      return a.segments.length - b.segments.length;\n    });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      const pattern = config.segments.join('/');\n      if (acc[pattern]) {\n        const a = acc[pattern].routeNames;\n        const b = config.routeNames;\n\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [pattern]: config\n      });\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(c => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n    }));\n  }\n  const matchAgainstConfigs = (remaining, configs) => {\n    let routes;\n    let remainingPath = remaining;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    for (const config of configs) {\n      if (!config.regex) {\n        continue;\n      }\n      const match = remainingPath.match(config.regex);\n\n      // If our regex matches, we need to extract params from the path\n      if (match) {\n        routes = config.routeNames.map(routeName => {\n          const routeConfig = configs.find(c => {\n            // Check matching name AND pattern in case same screen is used at different levels in config\n            return c.screen === routeName && (0, _arrayStartsWithJs.arrayStartsWith)(config.segments, c.segments);\n          });\n          const params = routeConfig && match.groups ? Object.fromEntries(Object.entries(match.groups).map(([key, value]) => {\n            const index = Number(key.replace('param_', ''));\n            const param = routeConfig.params.find(it => it.index === index);\n            if (param?.screen === routeName && param?.name) {\n              return [param.name, value];\n            }\n            return null;\n          }).filter(it => it != null).map(([key, value]) => {\n            if (value == null) {\n              return [key, undefined];\n            }\n            const decoded = decodeURIComponent(value);\n            const parsed = routeConfig.parse?.[key] ? routeConfig.parse[key](decoded) : decoded;\n            return [key, parsed];\n          })) : undefined;\n          if (params && Object.keys(params).length) {\n            return {\n              name: routeName,\n              params\n            };\n          }\n          return {\n            name: routeName\n          };\n        });\n        remainingPath = remainingPath.replace(match[0], '');\n        break;\n      }\n    }\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  const createNormalizedConfigs = (screen, routeConfig, initials, paths, parentScreens, routeNames) => {\n    const configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    const config = routeConfig[screen];\n    if (typeof config === 'string') {\n      paths.push({\n        screen,\n        path: config\n      });\n      configs.push(createConfigItem(screen, [...routeNames], [...paths]));\n    } else if (typeof config === 'object') {\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path == null) {\n          throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. \\`path: ''\\`.`);\n        }\n\n        // We should add alias configs after the main config\n        // So unless they are more specific, main config will be matched first\n        const aliasConfigs = [];\n        if (config.alias) {\n          for (const alias of config.alias) {\n            if (typeof alias === 'string') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], [...paths, {\n                screen,\n                path: alias\n              }], config.parse));\n            } else if (typeof alias === 'object') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], alias.exact ? [{\n                screen,\n                path: alias.path\n              }] : [...paths, {\n                screen,\n                path: alias.path\n              }], alias.parse));\n            }\n          }\n        }\n        if (config.exact) {\n          // If it's an exact path, we don't need to keep track of the parent screens\n          // So we can clear it\n          paths.length = 0;\n        }\n        paths.push({\n          screen,\n          path: config.path\n        });\n        configs.push(createConfigItem(screen, [...routeNames], [...paths], config.parse));\n        configs.push(...aliasConfigs);\n      }\n      if (typeof config !== 'string' && typeof config.path !== 'string' && config.alias?.length) {\n        throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified in order to use 'alias'.`);\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          const result = createNormalizedConfigs(nestedConfig, config.screens, initials, [...paths], [...parentScreens], routeNames);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  const createConfigItem = (screen, routeNames, paths, parse) => {\n    const parts = [];\n\n    // Parse the path string into parts for easier matching\n    for (const {\n      screen,\n      path\n    } of paths) {\n      parts.push(...(0, _getPatternPartsJs.getPatternParts)(path).map(part => ({\n        ...part,\n        screen\n      })));\n    }\n    const regex = parts.length ? new RegExp(`^(${parts.map((it, i) => {\n      if (it.param) {\n        const reg = it.regex || '[^/]+';\n        return `(((?<param_${i}>${reg})\\\\/)${it.optional ? '?' : ''})`;\n      }\n      return `${it.segment === '*' ? '.*' : (0, escape.default)(it.segment)}\\\\/`;\n    }).join('')})$`) : undefined;\n    const segments = parts.map(it => it.segment);\n    const params = parts.map((it, i) => it.param ? {\n      index: i,\n      screen: it.screen,\n      name: it.param\n    } : null).filter(it => it != null);\n    return {\n      screen,\n      regex,\n      segments,\n      params,\n      routeNames,\n      parse\n    };\n  };\n  const findParseConfigForRoute = (routeName, flatConfig) => {\n    for (const config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n\n  // Try to find an initial route connected with the one passed\n  const findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (const config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        let sameParents = true;\n        for (let i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  const createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, {\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  };\n  const createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n    let route = routes.shift();\n    const parentScreens = [];\n    let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    const state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      let nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, _findFocusedRouteJs.findFocusedRoute)(state);\n    route.path = path.replace(/\\/$/, '');\n    const params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n    if (params) {\n      route.params = {\n        ...route.params,\n        ...params\n      };\n    }\n    return state;\n  };\n  const parseQueryParams = (path, parseConfig) => {\n    const query = path.split('?')[1];\n    const params = queryString.parse(query);\n    if (parseConfig) {\n      Object.keys(params).forEach(name => {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":535,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13],[7,11,1,13,"_interopDefault"],[7,27,1,13,"e"],[7,28,1,13],[8,4,1,13],[8,11,1,13,"e"],[8,12,1,13],[8,16,1,13,"e"],[8,17,1,13],[8,18,1,13,"__esModule"],[8,28,1,13],[8,31,1,13,"e"],[8,32,1,13],[9,6,1,13,"default"],[9,13,1,13],[9,15,1,13,"e"],[10,4,1,13],[11,2,1,13],[12,2,1,13],[12,11,1,13,"_interopNamespace"],[12,29,1,13,"e"],[12,30,1,13],[13,4,1,13],[13,8,1,13,"e"],[13,9,1,13],[13,13,1,13,"e"],[13,14,1,13],[13,15,1,13,"__esModule"],[13,25,1,13],[13,34,1,13,"e"],[13,35,1,13],[14,4,1,13],[14,8,1,13,"n"],[14,9,1,13],[15,4,1,13],[15,8,1,13,"e"],[15,9,1,13],[15,11,1,13,"Object"],[15,17,1,13],[15,18,1,13,"keys"],[15,22,1,13],[15,23,1,13,"e"],[15,24,1,13],[15,26,1,13,"forEach"],[15,33,1,13],[15,44,1,13,"k"],[15,45,1,13],[16,6,1,13,"n"],[16,7,1,13],[16,8,1,13,"k"],[16,9,1,13],[16,13,1,13,"e"],[16,14,1,13],[16,15,1,13,"k"],[16,16,1,13],[17,4,1,13],[18,4,1,13,"n"],[18,5,1,13],[18,6,1,13,"default"],[18,13,1,13],[18,16,1,13,"e"],[18,17,1,13],[19,4,1,13],[19,11,1,13,"n"],[19,12,1,13],[20,2,1,13],[21,2,31,0,"exports"],[21,9,31,0],[21,10,31,0,"getStateFromPath"],[21,26,31,0],[21,29,31,0,"getStateFromPath"],[21,45,31,0],[22,2,3,0],[22,6,3,0,"_escapeStringRegexp"],[22,25,3,0],[22,28,3,0,"require"],[22,35,3,0],[22,36,3,0,"_dependencyMap"],[22,50,3,0],[23,2,3,0],[23,6,3,0,"escape"],[23,12,3,0],[23,15,3,0,"_interopDefault"],[23,30,3,0],[23,31,3,0,"_escapeStringRegexp"],[23,50,3,0],[24,2,4,0],[24,6,4,0,"_queryString"],[24,18,4,0],[24,21,4,0,"require"],[24,28,4,0],[24,29,4,0,"_dependencyMap"],[24,43,4,0],[25,2,4,0],[25,6,4,0,"queryString"],[25,17,4,0],[25,20,4,0,"_interopNamespace"],[25,37,4,0],[25,38,4,0,"_queryString"],[25,50,4,0],[26,2,5,0],[26,6,5,0,"_arrayStartsWithJs"],[26,24,5,0],[26,27,5,0,"require"],[26,34,5,0],[26,35,5,0,"_dependencyMap"],[26,49,5,0],[27,2,6,0],[27,6,6,0,"_findFocusedRouteJs"],[27,25,6,0],[27,28,6,0,"require"],[27,35,6,0],[27,36,6,0,"_dependencyMap"],[27,50,6,0],[28,2,7,0],[28,6,7,0,"_getPatternPartsJs"],[28,24,7,0],[28,27,7,0,"require"],[28,34,7,0],[28,35,7,0,"_dependencyMap"],[28,49,7,0],[29,2,8,0],[29,6,8,0,"_isArrayEqualJs"],[29,21,8,0],[29,24,8,0,"require"],[29,31,8,0],[29,32,8,0,"_dependencyMap"],[29,46,8,0],[30,2,9,0],[30,6,9,0,"_validatePathConfigJs"],[30,27,9,0],[30,30,9,0,"require"],[30,37,9,0],[30,38,9,0,"_dependencyMap"],[30,52,9,0],[31,2,10,0],[32,0,11,0],[33,0,12,0],[34,0,13,0],[35,0,14,0],[36,0,15,0],[37,0,16,0],[38,0,17,0],[39,0,18,0],[40,0,19,0],[41,0,20,0],[42,0,21,0],[43,0,22,0],[44,0,23,0],[45,0,24,0],[46,0,25,0],[47,0,26,0],[48,0,27,0],[49,0,28,0],[50,0,29,0],[51,0,30,0],[52,2,31,7],[52,11,31,16,"getStateFromPath"],[52,27,31,32,"getStateFromPath"],[52,28,31,33,"path"],[52,32,31,37],[52,34,31,39,"options"],[52,41,31,46],[52,43,31,48],[53,4,32,2],[53,10,32,8],[54,6,33,4,"initialRoutes"],[54,19,33,17],[55,6,34,4,"configs"],[56,4,35,2],[56,5,35,3],[56,8,35,6,"getConfigResources"],[56,26,35,24],[56,27,35,25,"options"],[56,34,35,32],[56,35,35,33],[57,4,36,2],[57,10,36,8,"screens"],[57,17,36,15],[57,20,36,18,"options"],[57,27,36,25],[57,29,36,27,"screens"],[57,36,36,34],[58,4,37,2],[58,8,37,6,"remaining"],[58,17,37,15],[58,20,37,18,"path"],[58,24,37,22],[58,25,37,23,"replace"],[58,32,37,30],[58,33,37,31],[58,39,37,37],[58,41,37,39],[58,44,37,42],[58,45,37,43],[58,46,37,44],[59,4,37,44],[59,5,38,3,"replace"],[59,12,38,10],[59,13,38,11],[59,18,38,16],[59,20,38,18],[59,22,38,20],[59,23,38,21],[59,24,38,22],[60,4,38,22],[60,5,39,3,"replace"],[60,12,39,10],[60,13,39,11],[60,20,39,18],[60,22,39,20],[60,24,39,22],[60,25,39,23],[60,26,39,24],[60,27,39,25],[62,4,41,2],[63,4,42,2,"remaining"],[63,13,42,11],[63,16,42,14,"remaining"],[63,25,42,23],[63,26,42,24,"endsWith"],[63,34,42,32],[63,35,42,33],[63,38,42,36],[63,39,42,37],[63,42,42,40,"remaining"],[63,51,42,49],[63,54,42,52],[63,57,42,55,"remaining"],[63,66,42,64],[63,69,42,67],[64,4,43,2],[64,10,43,8,"prefix"],[64,16,43,14],[64,19,43,17,"options"],[64,26,43,24],[64,28,43,26,"path"],[64,32,43,30],[64,34,43,32,"replace"],[64,41,43,39],[64,42,43,40],[64,47,43,45],[64,49,43,47],[64,51,43,49],[64,52,43,50],[64,53,43,51],[64,54,43,52],[66,4,45,2],[66,8,45,6,"prefix"],[66,14,45,12],[66,16,45,14],[67,6,46,4],[68,6,47,4],[68,12,47,10,"normalizedPrefix"],[68,28,47,26],[68,31,47,29,"prefix"],[68,37,47,35],[68,38,47,36,"endsWith"],[68,46,47,44],[68,47,47,45],[68,50,47,48],[68,51,47,49],[68,54,47,52,"prefix"],[68,60,47,58],[68,63,47,61],[68,66,47,64,"prefix"],[68,72,47,70],[68,75,47,73],[70,6,49,4],[71,6,50,4],[71,10,50,8],[71,11,50,9,"remaining"],[71,20,50,18],[71,21,50,19,"startsWith"],[71,31,50,29],[71,32,50,30,"normalizedPrefix"],[71,48,50,46],[71,49,50,47],[71,51,50,49],[72,8,51,6],[72,15,51,13,"undefined"],[72,24,51,22],[73,6,52,4],[75,6,54,4],[76,6,55,4,"remaining"],[76,15,55,13],[76,18,55,16,"remaining"],[76,27,55,25],[76,28,55,26,"replace"],[76,35,55,33],[76,36,55,34,"normalizedPrefix"],[76,52,55,50],[76,54,55,52],[76,56,55,54],[76,57,55,55],[77,4,56,2],[78,4,57,2],[78,8,57,6,"screens"],[78,15,57,13],[78,20,57,18,"undefined"],[78,29,57,27],[78,31,57,29],[79,6,58,4],[80,6,59,4],[80,12,59,10,"routes"],[80,18,59,16],[80,21,59,19,"remaining"],[80,30,59,28],[80,31,59,29,"split"],[80,36,59,34],[80,37,59,35],[80,40,59,38],[80,41,59,39],[80,42,59,40,"filter"],[80,48,59,46],[80,49,59,47,"Boolean"],[80,56,59,54],[80,57,59,55],[80,58,59,56,"map"],[80,61,59,59],[80,62,59,60,"segment"],[80,69,59,67],[80,73,59,71],[81,8,60,6],[81,14,60,12,"name"],[81,18,60,16],[81,21,60,19,"decodeURIComponent"],[81,39,60,37],[81,40,60,38,"segment"],[81,47,60,45],[81,48,60,46],[82,8,61,6],[82,15,61,13],[83,10,62,8,"name"],[84,8,63,6],[84,9,63,7],[85,6,64,4],[85,7,64,5],[85,8,64,6],[86,6,65,4],[86,10,65,8,"routes"],[86,16,65,14],[86,17,65,15,"length"],[86,23,65,21],[86,25,65,23],[87,8,66,6],[87,15,66,13,"createNestedStateObject"],[87,38,66,36],[87,39,66,37,"path"],[87,43,66,41],[87,45,66,43,"routes"],[87,51,66,49],[87,53,66,51,"initialRoutes"],[87,66,66,64],[87,67,66,65],[88,6,67,4],[89,6,68,4],[89,13,68,11,"undefined"],[89,22,68,20],[90,4,69,2],[91,4,70,2],[91,8,70,6,"remaining"],[91,17,70,15],[91,22,70,20],[91,25,70,23],[91,27,70,25],[92,6,71,4],[93,6,72,4],[94,6,73,4],[94,12,73,10,"match"],[94,17,73,15],[94,20,73,18,"configs"],[94,27,73,25],[94,28,73,26,"find"],[94,32,73,30],[94,33,73,31,"config"],[94,39,73,37],[94,43,73,41,"config"],[94,49,73,47],[94,50,73,48,"segments"],[94,58,73,56],[94,59,73,57,"join"],[94,63,73,61],[94,64,73,62],[94,67,73,65],[94,68,73,66],[94,73,73,71],[94,75,73,73],[94,76,73,74],[95,6,74,4],[95,10,74,8,"match"],[95,15,74,13],[95,17,74,15],[96,8,75,6],[96,15,75,13,"createNestedStateObject"],[96,38,75,36],[96,39,75,37,"path"],[96,43,75,41],[96,45,75,43,"match"],[96,50,75,48],[96,51,75,49,"routeNames"],[96,61,75,59],[96,62,75,60,"map"],[96,65,75,63],[96,66,75,64,"name"],[96,70,75,68],[96,75,75,73],[97,10,76,8,"name"],[98,8,77,6],[98,9,77,7],[98,10,77,8],[98,11,77,9],[98,13,77,11,"initialRoutes"],[98,26,77,24],[98,28,77,26,"configs"],[98,35,77,33],[98,36,77,34],[99,6,78,4],[100,6,79,4],[100,13,79,11,"undefined"],[100,22,79,20],[101,4,80,2],[102,4,81,2],[102,8,81,6,"result"],[102,14,81,12],[103,4,82,2],[103,8,82,6,"current"],[103,15,82,13],[105,4,84,2],[106,4,85,2],[107,4,86,2],[107,10,86,8],[108,6,87,4,"routes"],[108,12,87,10],[109,6,88,4,"remainingPath"],[110,4,89,2],[110,5,89,3],[110,8,89,6,"matchAgainstConfigs"],[110,27,89,25],[110,28,89,26,"remaining"],[110,37,89,35],[110,39,89,37,"configs"],[110,46,89,44],[110,47,89,45],[111,4,90,2],[111,8,90,6,"routes"],[111,14,90,12],[111,19,90,17,"undefined"],[111,28,90,26],[111,30,90,28],[112,6,91,4],[113,6,92,4,"current"],[113,13,92,11],[113,16,92,14,"createNestedStateObject"],[113,39,92,37],[113,40,92,38,"path"],[113,44,92,42],[113,46,92,44,"routes"],[113,52,92,50],[113,54,92,52,"initialRoutes"],[113,67,92,65],[113,69,92,67,"configs"],[113,76,92,74],[113,77,92,75],[114,6,93,4,"remaining"],[114,15,93,13],[114,18,93,16,"remainingPath"],[114,31,93,29],[115,6,94,4,"result"],[115,12,94,10],[115,15,94,13,"current"],[115,22,94,20],[116,4,95,2],[117,4,96,2],[117,8,96,6,"current"],[117,15,96,13],[117,19,96,17],[117,23,96,21],[117,27,96,25,"result"],[117,33,96,31],[117,37,96,35],[117,41,96,39],[117,43,96,41],[118,6,97,4],[118,13,97,11,"undefined"],[118,22,97,20],[119,4,98,2],[120,4,99,2],[120,11,99,9,"result"],[120,17,99,15],[121,2,100,0],[123,2,102,0],[124,0,103,0],[125,0,104,0],[126,2,105,0],[126,8,105,6,"cachedConfigResources"],[126,29,105,27],[126,32,105,30],[126,36,105,34,"WeakMap"],[126,43,105,41],[126,44,105,42],[126,45,105,43],[127,2,106,0],[127,11,106,9,"getConfigResources"],[127,29,106,27,"getConfigResources"],[127,30,106,28,"options"],[127,37,106,35],[127,39,106,37],[128,4,107,2],[128,8,107,6],[128,9,107,7,"options"],[128,16,107,14],[128,18,107,16],[128,25,107,23,"prepareConfigResources"],[128,47,107,45],[128,48,107,46],[128,49,107,47],[129,4,108,2],[129,10,108,8,"cached"],[129,16,108,14],[129,19,108,17,"cachedConfigResources"],[129,40,108,38],[129,41,108,39,"get"],[129,44,108,42],[129,45,108,43,"options"],[129,52,108,50],[129,53,108,51],[130,4,109,2],[130,8,109,6,"cached"],[130,14,109,12],[130,16,109,14],[130,23,109,21,"cached"],[130,29,109,27],[131,4,110,2],[131,10,110,8,"resources"],[131,19,110,17],[131,22,110,20,"prepareConfigResources"],[131,44,110,42],[131,45,110,43,"options"],[131,52,110,50],[131,53,110,51],[132,4,111,2,"cachedConfigResources"],[132,25,111,23],[132,26,111,24,"set"],[132,29,111,27],[132,30,111,28,"options"],[132,37,111,35],[132,39,111,37,"resources"],[132,48,111,46],[132,49,111,47],[133,4,112,2],[133,11,112,9,"resources"],[133,20,112,18],[134,2,113,0],[135,2,114,0],[135,11,114,9,"prepareConfigResources"],[135,33,114,31,"prepareConfigResources"],[135,34,114,32,"options"],[135,41,114,39],[135,43,114,41],[136,4,115,2],[136,8,115,6,"options"],[136,15,115,13],[136,17,115,15],[137,6,116,4],[137,10,116,4,"validatePathConfig"],[137,31,116,22],[137,32,116,22,"validatePathConfig"],[137,50,116,22],[137,52,116,23,"options"],[137,59,116,30],[137,60,116,31],[138,4,117,2],[139,4,118,2],[139,10,118,8,"initialRoutes"],[139,23,118,21],[139,26,118,24,"getInitialRoutes"],[139,42,118,40],[139,43,118,41,"options"],[139,50,118,48],[139,51,118,49],[140,4,119,2],[140,10,119,8,"configs"],[140,17,119,15],[140,20,119,18,"getSortedNormalizedConfigs"],[140,46,119,44],[140,47,119,45,"initialRoutes"],[140,60,119,58],[140,62,119,60,"options"],[140,69,119,67],[140,71,119,69,"screens"],[140,78,119,76],[140,79,119,77],[141,4,120,2,"checkForDuplicatedConfigs"],[141,29,120,27],[141,30,120,28,"configs"],[141,37,120,35],[141,38,120,36],[142,4,121,2],[142,10,121,8,"configWithRegexes"],[142,27,121,25],[142,30,121,28,"getConfigsWithRegexes"],[142,51,121,49],[142,52,121,50,"configs"],[142,59,121,57],[142,60,121,58],[143,4,122,2],[143,11,122,9],[144,6,123,4,"initialRoutes"],[144,19,123,17],[145,6,124,4,"configs"],[145,13,124,11],[146,6,125,4,"configWithRegexes"],[147,4,126,2],[147,5,126,3],[148,2,127,0],[149,2,128,0],[149,11,128,9,"getInitialRoutes"],[149,27,128,25,"getInitialRoutes"],[149,28,128,26,"options"],[149,35,128,33],[149,37,128,35],[150,4,129,2],[150,10,129,8,"initialRoutes"],[150,23,129,21],[150,26,129,24],[150,28,129,26],[151,4,130,2],[151,8,130,6,"options"],[151,15,130,13],[151,17,130,15,"initialRouteName"],[151,33,130,31],[151,35,130,33],[152,6,131,4,"initialRoutes"],[152,19,131,17],[152,20,131,18,"push"],[152,24,131,22],[152,25,131,23],[153,8,132,6,"initialRouteName"],[153,24,132,22],[153,26,132,24,"options"],[153,33,132,31],[153,34,132,32,"initialRouteName"],[153,50,132,48],[154,8,133,6,"parentScreens"],[154,21,133,19],[154,23,133,21],[155,6,134,4],[155,7,134,5],[155,8,134,6],[156,4,135,2],[157,4,136,2],[157,11,136,9,"initialRoutes"],[157,24,136,22],[158,2,137,0],[159,2,138,0],[159,11,138,9,"getSortedNormalizedConfigs"],[159,37,138,35,"getSortedNormalizedConfigs"],[159,38,138,36,"initialRoutes"],[159,51,138,49],[159,53,138,51,"screens"],[159,60,138,58],[159,63,138,61],[159,64,138,62],[159,65,138,63],[159,67,138,65],[160,4,139,2],[161,4,140,2],[161,11,140,9],[161,13,140,11],[161,14,140,12,"concat"],[161,20,140,18],[161,21,140,19],[161,24,140,22,"Object"],[161,30,140,28],[161,31,140,29,"keys"],[161,35,140,33],[161,36,140,34,"screens"],[161,43,140,41],[161,44,140,42],[161,45,140,43,"map"],[161,48,140,46],[161,49,140,47,"key"],[161,52,140,50],[161,56,140,54,"createNormalizedConfigs"],[161,79,140,77],[161,80,140,78,"key"],[161,83,140,81],[161,85,140,83,"screens"],[161,92,140,90],[161,94,140,92,"initialRoutes"],[161,107,140,105],[161,109,140,107],[161,111,140,109],[161,113,140,111],[161,115,140,113],[161,117,140,115],[161,119,140,117],[161,120,140,118],[161,121,140,119],[161,122,140,120],[161,123,140,121,"sort"],[161,127,140,125],[161,128,140,126],[161,129,140,127,"a"],[161,130,140,128],[161,132,140,130,"b"],[161,133,140,131],[161,138,140,136],[162,6,141,4],[163,6,142,4],[164,6,143,4],[165,6,144,4],[166,6,145,4],[167,6,146,4],[169,6,148,4],[170,6,149,4],[171,6,150,4],[171,10,150,8],[171,14,150,8,"isArrayEqual"],[171,29,150,20],[171,30,150,20,"isArrayEqual"],[171,42,150,20],[171,44,150,21,"a"],[171,45,150,22],[171,46,150,23,"segments"],[171,54,150,31],[171,56,150,33,"b"],[171,57,150,34],[171,58,150,35,"segments"],[171,66,150,43],[171,67,150,44],[171,69,150,46],[172,8,151,6],[172,15,151,13,"b"],[172,16,151,14],[172,17,151,15,"routeNames"],[172,27,151,25],[172,28,151,26,"join"],[172,32,151,30],[172,33,151,31],[172,36,151,34],[172,37,151,35],[172,38,151,36,"localeCompare"],[172,51,151,49],[172,52,151,50,"a"],[172,53,151,51],[172,54,151,52,"routeNames"],[172,64,151,62],[172,65,151,63,"join"],[172,69,151,67],[172,70,151,68],[172,73,151,71],[172,74,151,72],[172,75,151,73],[173,6,152,4],[175,6,154,4],[176,6,155,4],[177,6,156,4],[177,10,156,8],[177,14,156,8,"arrayStartsWith"],[177,32,156,23],[177,33,156,23,"arrayStartsWith"],[177,48,156,23],[177,50,156,24,"a"],[177,51,156,25],[177,52,156,26,"segments"],[177,60,156,34],[177,62,156,36,"b"],[177,63,156,37],[177,64,156,38,"segments"],[177,72,156,46],[177,73,156,47],[177,75,156,49],[178,8,157,6],[178,15,157,13],[178,16,157,14],[178,17,157,15],[179,6,158,4],[180,6,159,4],[180,10,159,8],[180,14,159,8,"arrayStartsWith"],[180,32,159,23],[180,33,159,23,"arrayStartsWith"],[180,48,159,23],[180,50,159,24,"b"],[180,51,159,25],[180,52,159,26,"segments"],[180,60,159,34],[180,62,159,36,"a"],[180,63,159,37],[180,64,159,38,"segments"],[180,72,159,46],[180,73,159,47],[180,75,159,49],[181,8,160,6],[181,15,160,13],[181,16,160,14],[182,6,161,4],[183,6,162,4],[183,11,162,9],[183,15,162,13,"i"],[183,16,162,14],[183,19,162,17],[183,20,162,18],[183,22,162,20,"i"],[183,23,162,21],[183,26,162,24,"Math"],[183,30,162,28],[183,31,162,29,"max"],[183,34,162,32],[183,35,162,33,"a"],[183,36,162,34],[183,37,162,35,"segments"],[183,45,162,43],[183,46,162,44,"length"],[183,52,162,50],[183,54,162,52,"b"],[183,55,162,53],[183,56,162,54,"segments"],[183,64,162,62],[183,65,162,63,"length"],[183,71,162,69],[183,72,162,70],[183,74,162,72,"i"],[183,75,162,73],[183,77,162,75],[183,79,162,77],[184,8,163,6],[185,8,164,6],[185,12,164,10,"a"],[185,13,164,11],[185,14,164,12,"segments"],[185,22,164,20],[185,23,164,21,"i"],[185,24,164,22],[185,25,164,23],[185,29,164,27],[185,33,164,31],[185,35,164,33],[186,10,165,8],[186,17,165,15],[186,18,165,16],[187,8,166,6],[189,8,168,6],[190,8,169,6],[190,12,169,10,"b"],[190,13,169,11],[190,14,169,12,"segments"],[190,22,169,20],[190,23,169,21,"i"],[190,24,169,22],[190,25,169,23],[190,29,169,27],[190,33,169,31],[190,35,169,33],[191,10,170,8],[191,17,170,15],[191,18,170,16],[191,19,170,17],[192,8,171,6],[193,8,172,6],[193,14,172,12,"aWildCard"],[193,23,172,21],[193,26,172,24,"a"],[193,27,172,25],[193,28,172,26,"segments"],[193,36,172,34],[193,37,172,35,"i"],[193,38,172,36],[193,39,172,37],[193,44,172,42],[193,47,172,45],[194,8,173,6],[194,14,173,12,"bWildCard"],[194,23,173,21],[194,26,173,24,"b"],[194,27,173,25],[194,28,173,26,"segments"],[194,36,173,34],[194,37,173,35,"i"],[194,38,173,36],[194,39,173,37],[194,44,173,42],[194,47,173,45],[195,8,174,6],[195,14,174,12,"aParam"],[195,20,174,18],[195,23,174,21,"a"],[195,24,174,22],[195,25,174,23,"segments"],[195,33,174,31],[195,34,174,32,"i"],[195,35,174,33],[195,36,174,34],[195,37,174,35,"startsWith"],[195,47,174,45],[195,48,174,46],[195,51,174,49],[195,52,174,50],[196,8,175,6],[196,14,175,12,"bParam"],[196,20,175,18],[196,23,175,21,"b"],[196,24,175,22],[196,25,175,23,"segments"],[196,33,175,31],[196,34,175,32,"i"],[196,35,175,33],[196,36,175,34],[196,37,175,35,"startsWith"],[196,47,175,45],[196,48,175,46],[196,51,175,49],[196,52,175,50],[197,8,176,6],[197,14,176,12,"aRegex"],[197,20,176,18],[197,23,176,21,"aParam"],[197,29,176,27],[197,33,176,31,"a"],[197,34,176,32],[197,35,176,33,"segments"],[197,43,176,41],[197,44,176,42,"i"],[197,45,176,43],[197,46,176,44],[197,47,176,45,"includes"],[197,55,176,53],[197,56,176,54],[197,59,176,57],[197,60,176,58],[198,8,177,6],[198,14,177,12,"bRegex"],[198,20,177,18],[198,23,177,21,"bParam"],[198,29,177,27],[198,33,177,31,"b"],[198,34,177,32],[198,35,177,33,"segments"],[198,43,177,41],[198,44,177,42,"i"],[198,45,177,43],[198,46,177,44],[198,47,177,45,"includes"],[198,55,177,53],[198,56,177,54],[198,59,177,57],[198,60,177,58],[200,8,179,6],[201,8,180,6],[201,12,180,10,"aWildCard"],[201,21,180,19],[201,25,180,23,"bWildCard"],[201,34,180,32],[201,38,180,36,"aRegex"],[201,44,180,42],[201,48,180,46,"bRegex"],[201,54,180,52],[201,56,180,54],[202,10,181,8],[203,8,182,6],[205,8,184,6],[206,8,185,6],[206,12,185,10,"aWildCard"],[206,21,185,19],[206,25,185,23],[206,26,185,24,"bWildCard"],[206,35,185,33],[206,37,185,35],[207,10,186,8],[207,17,186,15],[207,18,186,16],[208,8,187,6],[210,8,189,6],[211,8,190,6],[211,12,190,10,"bWildCard"],[211,21,190,19],[211,25,190,23],[211,26,190,24,"aWildCard"],[211,35,190,33],[211,37,190,35],[212,10,191,8],[212,17,191,15],[212,18,191,16],[212,19,191,17],[213,8,192,6],[215,8,194,6],[216,8,195,6],[216,12,195,10,"aParam"],[216,18,195,16],[216,22,195,20],[216,23,195,21,"bParam"],[216,29,195,27],[216,31,195,29],[217,10,196,8],[217,17,196,15],[217,18,196,16],[218,8,197,6],[220,8,199,6],[221,8,200,6],[221,12,200,10,"bParam"],[221,18,200,16],[221,22,200,20],[221,23,200,21,"aParam"],[221,29,200,27],[221,31,200,29],[222,10,201,8],[222,17,201,15],[222,18,201,16],[222,19,201,17],[223,8,202,6],[225,8,204,6],[226,8,205,6],[226,12,205,10,"aRegex"],[226,18,205,16],[226,22,205,20],[226,23,205,21,"bRegex"],[226,29,205,27],[226,31,205,29],[227,10,206,8],[227,17,206,15],[227,18,206,16],[227,19,206,17],[228,8,207,6],[230,8,209,6],[231,8,210,6],[231,12,210,10,"bRegex"],[231,18,210,16],[231,22,210,20],[231,23,210,21,"aRegex"],[231,29,210,27],[231,31,210,29],[232,10,211,8],[232,17,211,15],[232,18,211,16],[233,8,212,6],[234,6,213,4],[235,6,214,4],[235,13,214,11,"a"],[235,14,214,12],[235,15,214,13,"segments"],[235,23,214,21],[235,24,214,22,"length"],[235,30,214,28],[235,33,214,31,"b"],[235,34,214,32],[235,35,214,33,"segments"],[235,43,214,41],[235,44,214,42,"length"],[235,50,214,48],[236,4,215,2],[236,5,215,3],[236,6,215,4],[237,2,216,0],[238,2,217,0],[238,11,217,9,"checkForDuplicatedConfigs"],[238,36,217,34,"checkForDuplicatedConfigs"],[238,37,217,35,"configs"],[238,44,217,42],[238,46,217,44],[239,4,218,2],[240,4,219,2,"configs"],[240,11,219,9],[240,12,219,10,"reduce"],[240,18,219,16],[240,19,219,17],[240,20,219,18,"acc"],[240,23,219,21],[240,25,219,23,"config"],[240,31,219,29],[240,36,219,34],[241,6,220,4],[241,12,220,10,"pattern"],[241,19,220,17],[241,22,220,20,"config"],[241,28,220,26],[241,29,220,27,"segments"],[241,37,220,35],[241,38,220,36,"join"],[241,42,220,40],[241,43,220,41],[241,46,220,44],[241,47,220,45],[242,6,221,4],[242,10,221,8,"acc"],[242,13,221,11],[242,14,221,12,"pattern"],[242,21,221,19],[242,22,221,20],[242,24,221,22],[243,8,222,6],[243,14,222,12,"a"],[243,15,222,13],[243,18,222,16,"acc"],[243,21,222,19],[243,22,222,20,"pattern"],[243,29,222,27],[243,30,222,28],[243,31,222,29,"routeNames"],[243,41,222,39],[244,8,223,6],[244,14,223,12,"b"],[244,15,223,13],[244,18,223,16,"config"],[244,24,223,22],[244,25,223,23,"routeNames"],[244,35,223,33],[246,8,225,6],[247,8,226,6],[248,8,227,6],[248,14,227,12,"intersects"],[248,24,227,22],[248,27,227,25,"a"],[248,28,227,26],[248,29,227,27,"length"],[248,35,227,33],[248,38,227,36,"b"],[248,39,227,37],[248,40,227,38,"length"],[248,46,227,44],[248,49,227,47,"b"],[248,50,227,48],[248,51,227,49,"every"],[248,56,227,54],[248,57,227,55],[248,58,227,56,"it"],[248,60,227,58],[248,62,227,60,"i"],[248,63,227,61],[248,68,227,66,"a"],[248,69,227,67],[248,70,227,68,"i"],[248,71,227,69],[248,72,227,70],[248,77,227,75,"it"],[248,79,227,77],[248,80,227,78],[248,83,227,81,"a"],[248,84,227,82],[248,85,227,83,"every"],[248,90,227,88],[248,91,227,89],[248,92,227,90,"it"],[248,94,227,92],[248,96,227,94,"i"],[248,97,227,95],[248,102,227,100,"b"],[248,103,227,101],[248,104,227,102,"i"],[248,105,227,103],[248,106,227,104],[248,111,227,109,"it"],[248,113,227,111],[248,114,227,112],[249,8,228,6],[249,12,228,10],[249,13,228,11,"intersects"],[249,23,228,21],[249,25,228,23],[250,10,229,8],[250,16,229,14],[250,20,229,18,"Error"],[250,25,229,23],[250,26,229,24],[250,91,229,89,"pattern"],[250,98,229,96],[250,121,229,119,"a"],[250,122,229,120],[250,123,229,121,"join"],[250,127,229,125],[250,128,229,126],[250,133,229,131],[250,134,229,132],[250,144,229,142,"b"],[250,145,229,143],[250,146,229,144,"join"],[250,150,229,148],[250,151,229,149],[250,156,229,154],[250,157,229,155],[250,229,229,227],[250,230,229,228],[251,8,230,6],[252,6,231,4],[253,6,232,4],[253,13,232,11,"Object"],[253,19,232,17],[253,20,232,18,"assign"],[253,26,232,24],[253,27,232,25,"acc"],[253,30,232,28],[253,32,232,30],[254,8,233,6],[254,9,233,7,"pattern"],[254,16,233,14],[254,19,233,17,"config"],[255,6,234,4],[255,7,234,5],[255,8,234,6],[256,4,235,2],[256,5,235,3],[256,7,235,5],[256,8,235,6],[256,9,235,7],[256,10,235,8],[257,2,236,0],[258,2,237,0],[258,11,237,9,"getConfigsWithRegexes"],[258,32,237,30,"getConfigsWithRegexes"],[258,33,237,31,"configs"],[258,40,237,38],[258,42,237,40],[259,4,238,2],[259,11,238,9,"configs"],[259,18,238,16],[259,19,238,17,"map"],[259,22,238,20],[259,23,238,21,"c"],[259,24,238,22],[259,29,238,27],[260,6,239,4],[260,9,239,7,"c"],[260,10,239,8],[261,6,240,4],[262,6,241,4,"regex"],[262,11,241,9],[262,13,241,11,"c"],[262,14,241,12],[262,15,241,13,"regex"],[262,20,241,18],[262,23,241,21],[262,27,241,25,"RegExp"],[262,33,241,31],[262,34,241,32,"c"],[262,35,241,33],[262,36,241,34,"regex"],[262,41,241,39],[262,42,241,40,"source"],[262,48,241,46],[262,51,241,49],[262,54,241,52],[262,55,241,53],[262,58,241,56,"undefined"],[263,4,242,2],[263,5,242,3],[263,6,242,4],[263,7,242,5],[264,2,243,0],[265,2,244,0],[265,8,244,6,"matchAgainstConfigs"],[265,27,244,25],[265,30,244,28,"matchAgainstConfigs"],[265,31,244,29,"remaining"],[265,40,244,38],[265,42,244,40,"configs"],[265,49,244,47],[265,54,244,52],[266,4,245,2],[266,8,245,6,"routes"],[266,14,245,12],[267,4,246,2],[267,8,246,6,"remainingPath"],[267,21,246,19],[267,24,246,22,"remaining"],[267,33,246,31],[269,4,248,2],[270,4,249,2],[270,9,249,7],[270,15,249,13,"config"],[270,21,249,19],[270,25,249,23,"configs"],[270,32,249,30],[270,34,249,32],[271,6,250,4],[271,10,250,8],[271,11,250,9,"config"],[271,17,250,15],[271,18,250,16,"regex"],[271,23,250,21],[271,25,250,23],[272,8,251,6],[273,6,252,4],[274,6,253,4],[274,12,253,10,"match"],[274,17,253,15],[274,20,253,18,"remainingPath"],[274,33,253,31],[274,34,253,32,"match"],[274,39,253,37],[274,40,253,38,"config"],[274,46,253,44],[274,47,253,45,"regex"],[274,52,253,50],[274,53,253,51],[276,6,255,4],[277,6,256,4],[277,10,256,8,"match"],[277,15,256,13],[277,17,256,15],[278,8,257,6,"routes"],[278,14,257,12],[278,17,257,15,"config"],[278,23,257,21],[278,24,257,22,"routeNames"],[278,34,257,32],[278,35,257,33,"map"],[278,38,257,36],[278,39,257,37,"routeName"],[278,48,257,46],[278,52,257,50],[279,10,258,8],[279,16,258,14,"routeConfig"],[279,27,258,25],[279,30,258,28,"configs"],[279,37,258,35],[279,38,258,36,"find"],[279,42,258,40],[279,43,258,41,"c"],[279,44,258,42],[279,48,258,46],[280,12,259,10],[281,12,260,10],[281,19,260,17,"c"],[281,20,260,18],[281,21,260,19,"screen"],[281,27,260,25],[281,32,260,30,"routeName"],[281,41,260,39],[281,45,260,43],[281,49,260,43,"arrayStartsWith"],[281,67,260,58],[281,68,260,58,"arrayStartsWith"],[281,83,260,58],[281,85,260,59,"config"],[281,91,260,65],[281,92,260,66,"segments"],[281,100,260,74],[281,102,260,76,"c"],[281,103,260,77],[281,104,260,78,"segments"],[281,112,260,86],[281,113,260,87],[282,10,261,8],[282,11,261,9],[282,12,261,10],[283,10,262,8],[283,16,262,14,"params"],[283,22,262,20],[283,25,262,23,"routeConfig"],[283,36,262,34],[283,40,262,38,"match"],[283,45,262,43],[283,46,262,44,"groups"],[283,52,262,50],[283,55,262,53,"Object"],[283,61,262,59],[283,62,262,60,"fromEntries"],[283,73,262,71],[283,74,262,72,"Object"],[283,80,262,78],[283,81,262,79,"entries"],[283,88,262,86],[283,89,262,87,"match"],[283,94,262,92],[283,95,262,93,"groups"],[283,101,262,99],[283,102,262,100],[283,103,262,101,"map"],[283,106,262,104],[283,107,262,105],[283,108,262,106],[283,109,262,107,"key"],[283,112,262,110],[283,114,262,112,"value"],[283,119,262,117],[283,120,262,118],[283,125,262,123],[284,12,263,10],[284,18,263,16,"index"],[284,23,263,21],[284,26,263,24,"Number"],[284,32,263,30],[284,33,263,31,"key"],[284,36,263,34],[284,37,263,35,"replace"],[284,44,263,42],[284,45,263,43],[284,53,263,51],[284,55,263,53],[284,57,263,55],[284,58,263,56],[284,59,263,57],[285,12,264,10],[285,18,264,16,"param"],[285,23,264,21],[285,26,264,24,"routeConfig"],[285,37,264,35],[285,38,264,36,"params"],[285,44,264,42],[285,45,264,43,"find"],[285,49,264,47],[285,50,264,48,"it"],[285,52,264,50],[285,56,264,54,"it"],[285,58,264,56],[285,59,264,57,"index"],[285,64,264,62],[285,69,264,67,"index"],[285,74,264,72],[285,75,264,73],[286,12,265,10],[286,16,265,14,"param"],[286,21,265,19],[286,23,265,21,"screen"],[286,29,265,27],[286,34,265,32,"routeName"],[286,43,265,41],[286,47,265,45,"param"],[286,52,265,50],[286,54,265,52,"name"],[286,58,265,56],[286,60,265,58],[287,14,266,12],[287,21,266,19],[287,22,266,20,"param"],[287,27,266,25],[287,28,266,26,"name"],[287,32,266,30],[287,34,266,32,"value"],[287,39,266,37],[287,40,266,38],[288,12,267,10],[289,12,268,10],[289,19,268,17],[289,23,268,21],[290,10,269,8],[290,11,269,9],[290,12,269,10],[290,13,269,11,"filter"],[290,19,269,17],[290,20,269,18,"it"],[290,22,269,20],[290,26,269,24,"it"],[290,28,269,26],[290,32,269,30],[290,36,269,34],[290,37,269,35],[290,38,269,36,"map"],[290,41,269,39],[290,42,269,40],[290,43,269,41],[290,44,269,42,"key"],[290,47,269,45],[290,49,269,47,"value"],[290,54,269,52],[290,55,269,53],[290,60,269,58],[291,12,270,10],[291,16,270,14,"value"],[291,21,270,19],[291,25,270,23],[291,29,270,27],[291,31,270,29],[292,14,271,12],[292,21,271,19],[292,22,271,20,"key"],[292,25,271,23],[292,27,271,25,"undefined"],[292,36,271,34],[292,37,271,35],[293,12,272,10],[294,12,273,10],[294,18,273,16,"decoded"],[294,25,273,23],[294,28,273,26,"decodeURIComponent"],[294,46,273,44],[294,47,273,45,"value"],[294,52,273,50],[294,53,273,51],[295,12,274,10],[295,18,274,16,"parsed"],[295,24,274,22],[295,27,274,25,"routeConfig"],[295,38,274,36],[295,39,274,37,"parse"],[295,44,274,42],[295,47,274,45,"key"],[295,50,274,48],[295,51,274,49],[295,54,274,52,"routeConfig"],[295,65,274,63],[295,66,274,64,"parse"],[295,71,274,69],[295,72,274,70,"key"],[295,75,274,73],[295,76,274,74],[295,77,274,75,"decoded"],[295,84,274,82],[295,85,274,83],[295,88,274,86,"decoded"],[295,95,274,93],[296,12,275,10],[296,19,275,17],[296,20,275,18,"key"],[296,23,275,21],[296,25,275,23,"parsed"],[296,31,275,29],[296,32,275,30],[297,10,276,8],[297,11,276,9],[297,12,276,10],[297,13,276,11],[297,16,276,14,"undefined"],[297,25,276,23],[298,10,277,8],[298,14,277,12,"params"],[298,20,277,18],[298,24,277,22,"Object"],[298,30,277,28],[298,31,277,29,"keys"],[298,35,277,33],[298,36,277,34,"params"],[298,42,277,40],[298,43,277,41],[298,44,277,42,"length"],[298,50,277,48],[298,52,277,50],[299,12,278,10],[299,19,278,17],[300,14,279,12,"name"],[300,18,279,16],[300,20,279,18,"routeName"],[300,29,279,27],[301,14,280,12,"params"],[302,12,281,10],[302,13,281,11],[303,10,282,8],[304,10,283,8],[304,17,283,15],[305,12,284,10,"name"],[305,16,284,14],[305,18,284,16,"routeName"],[306,10,285,8],[306,11,285,9],[307,8,286,6],[307,9,286,7],[307,10,286,8],[308,8,287,6,"remainingPath"],[308,21,287,19],[308,24,287,22,"remainingPath"],[308,37,287,35],[308,38,287,36,"replace"],[308,45,287,43],[308,46,287,44,"match"],[308,51,287,49],[308,52,287,50],[308,53,287,51],[308,54,287,52],[308,56,287,54],[308,58,287,56],[308,59,287,57],[309,8,288,6],[310,6,289,4],[311,4,290,2],[312,4,291,2],[312,11,291,9],[313,6,292,4,"routes"],[313,12,292,10],[314,6,293,4,"remainingPath"],[315,4,294,2],[315,5,294,3],[316,2,295,0],[316,3,295,1],[317,2,296,0],[317,8,296,6,"createNormalizedConfigs"],[317,31,296,29],[317,34,296,32,"createNormalizedConfigs"],[317,35,296,33,"screen"],[317,41,296,39],[317,43,296,41,"routeConfig"],[317,54,296,52],[317,56,296,54,"initials"],[317,64,296,62],[317,66,296,64,"paths"],[317,71,296,69],[317,73,296,71,"parentScreens"],[317,86,296,84],[317,88,296,86,"routeNames"],[317,98,296,96],[317,103,296,101],[318,4,297,2],[318,10,297,8,"configs"],[318,17,297,15],[318,20,297,18],[318,22,297,20],[319,4,298,2,"routeNames"],[319,14,298,12],[319,15,298,13,"push"],[319,19,298,17],[319,20,298,18,"screen"],[319,26,298,24],[319,27,298,25],[320,4,299,2,"parentScreens"],[320,17,299,15],[320,18,299,16,"push"],[320,22,299,20],[320,23,299,21,"screen"],[320,29,299,27],[320,30,299,28],[321,4,300,2],[321,10,300,8,"config"],[321,16,300,14],[321,19,300,17,"routeConfig"],[321,30,300,28],[321,31,300,29,"screen"],[321,37,300,35],[321,38,300,36],[322,4,301,2],[322,8,301,6],[322,15,301,13,"config"],[322,21,301,19],[322,26,301,24],[322,34,301,32],[322,36,301,34],[323,6,302,4,"paths"],[323,11,302,9],[323,12,302,10,"push"],[323,16,302,14],[323,17,302,15],[324,8,303,6,"screen"],[324,14,303,12],[325,8,304,6,"path"],[325,12,304,10],[325,14,304,12,"config"],[326,6,305,4],[326,7,305,5],[326,8,305,6],[327,6,306,4,"configs"],[327,13,306,11],[327,14,306,12,"push"],[327,18,306,16],[327,19,306,17,"createConfigItem"],[327,35,306,33],[327,36,306,34,"screen"],[327,42,306,40],[327,44,306,42],[327,45,306,43],[327,48,306,46,"routeNames"],[327,58,306,56],[327,59,306,57],[327,61,306,59],[327,62,306,60],[327,65,306,63,"paths"],[327,70,306,68],[327,71,306,69],[327,72,306,70],[327,73,306,71],[328,4,307,2],[328,5,307,3],[328,11,307,9],[328,15,307,13],[328,22,307,20,"config"],[328,28,307,26],[328,33,307,31],[328,41,307,39],[328,43,307,41],[329,6,308,4],[330,6,309,4],[331,6,310,4],[332,6,311,4],[332,10,311,8],[332,17,311,15,"config"],[332,23,311,21],[332,24,311,22,"path"],[332,28,311,26],[332,33,311,31],[332,41,311,39],[332,43,311,41],[333,8,312,6],[333,12,312,10,"config"],[333,18,312,16],[333,19,312,17,"exact"],[333,24,312,22],[333,28,312,26,"config"],[333,34,312,32],[333,35,312,33,"path"],[333,39,312,37],[333,43,312,41],[333,47,312,45],[333,49,312,47],[334,10,313,8],[334,16,313,14],[334,20,313,18,"Error"],[334,25,313,23],[334,26,313,24],[334,37,313,35,"screen"],[334,43,313,41],[334,223,313,221],[334,224,313,222],[335,8,314,6],[337,8,316,6],[338,8,317,6],[339,8,318,6],[339,14,318,12,"aliasConfigs"],[339,26,318,24],[339,29,318,27],[339,31,318,29],[340,8,319,6],[340,12,319,10,"config"],[340,18,319,16],[340,19,319,17,"alias"],[340,24,319,22],[340,26,319,24],[341,10,320,8],[341,15,320,13],[341,21,320,19,"alias"],[341,26,320,24],[341,30,320,28,"config"],[341,36,320,34],[341,37,320,35,"alias"],[341,42,320,40],[341,44,320,42],[342,12,321,10],[342,16,321,14],[342,23,321,21,"alias"],[342,28,321,26],[342,33,321,31],[342,41,321,39],[342,43,321,41],[343,14,322,12,"aliasConfigs"],[343,26,322,24],[343,27,322,25,"push"],[343,31,322,29],[343,32,322,30,"createConfigItem"],[343,48,322,46],[343,49,322,47,"screen"],[343,55,322,53],[343,57,322,55],[343,58,322,56],[343,61,322,59,"routeNames"],[343,71,322,69],[343,72,322,70],[343,74,322,72],[343,75,322,73],[343,78,322,76,"paths"],[343,83,322,81],[343,85,322,83],[344,16,323,14,"screen"],[344,22,323,20],[345,16,324,14,"path"],[345,20,324,18],[345,22,324,20,"alias"],[346,14,325,12],[346,15,325,13],[346,16,325,14],[346,18,325,16,"config"],[346,24,325,22],[346,25,325,23,"parse"],[346,30,325,28],[346,31,325,29],[346,32,325,30],[347,12,326,10],[347,13,326,11],[347,19,326,17],[347,23,326,21],[347,30,326,28,"alias"],[347,35,326,33],[347,40,326,38],[347,48,326,46],[347,50,326,48],[348,14,327,12,"aliasConfigs"],[348,26,327,24],[348,27,327,25,"push"],[348,31,327,29],[348,32,327,30,"createConfigItem"],[348,48,327,46],[348,49,327,47,"screen"],[348,55,327,53],[348,57,327,55],[348,58,327,56],[348,61,327,59,"routeNames"],[348,71,327,69],[348,72,327,70],[348,74,327,72,"alias"],[348,79,327,77],[348,80,327,78,"exact"],[348,85,327,83],[348,88,327,86],[348,89,327,87],[349,16,328,14,"screen"],[349,22,328,20],[350,16,329,14,"path"],[350,20,329,18],[350,22,329,20,"alias"],[350,27,329,25],[350,28,329,26,"path"],[351,14,330,12],[351,15,330,13],[351,16,330,14],[351,19,330,17],[351,20,330,18],[351,23,330,21,"paths"],[351,28,330,26],[351,30,330,28],[352,16,331,14,"screen"],[352,22,331,20],[353,16,332,14,"path"],[353,20,332,18],[353,22,332,20,"alias"],[353,27,332,25],[353,28,332,26,"path"],[354,14,333,12],[354,15,333,13],[354,16,333,14],[354,18,333,16,"alias"],[354,23,333,21],[354,24,333,22,"parse"],[354,29,333,27],[354,30,333,28],[354,31,333,29],[355,12,334,10],[356,10,335,8],[357,8,336,6],[358,8,337,6],[358,12,337,10,"config"],[358,18,337,16],[358,19,337,17,"exact"],[358,24,337,22],[358,26,337,24],[359,10,338,8],[360,10,339,8],[361,10,340,8,"paths"],[361,15,340,13],[361,16,340,14,"length"],[361,22,340,20],[361,25,340,23],[361,26,340,24],[362,8,341,6],[363,8,342,6,"paths"],[363,13,342,11],[363,14,342,12,"push"],[363,18,342,16],[363,19,342,17],[364,10,343,8,"screen"],[364,16,343,14],[365,10,344,8,"path"],[365,14,344,12],[365,16,344,14,"config"],[365,22,344,20],[365,23,344,21,"path"],[366,8,345,6],[366,9,345,7],[366,10,345,8],[367,8,346,6,"configs"],[367,15,346,13],[367,16,346,14,"push"],[367,20,346,18],[367,21,346,19,"createConfigItem"],[367,37,346,35],[367,38,346,36,"screen"],[367,44,346,42],[367,46,346,44],[367,47,346,45],[367,50,346,48,"routeNames"],[367,60,346,58],[367,61,346,59],[367,63,346,61],[367,64,346,62],[367,67,346,65,"paths"],[367,72,346,70],[367,73,346,71],[367,75,346,73,"config"],[367,81,346,79],[367,82,346,80,"parse"],[367,87,346,85],[367,88,346,86],[367,89,346,87],[368,8,347,6,"configs"],[368,15,347,13],[368,16,347,14,"push"],[368,20,347,18],[368,21,347,19],[368,24,347,22,"aliasConfigs"],[368,36,347,34],[368,37,347,35],[369,6,348,4],[370,6,349,4],[370,10,349,8],[370,17,349,15,"config"],[370,23,349,21],[370,28,349,26],[370,36,349,34],[370,40,349,38],[370,47,349,45,"config"],[370,53,349,51],[370,54,349,52,"path"],[370,58,349,56],[370,63,349,61],[370,71,349,69],[370,75,349,73,"config"],[370,81,349,79],[370,82,349,80,"alias"],[370,87,349,85],[370,89,349,87,"length"],[370,95,349,93],[370,97,349,95],[371,8,350,6],[371,14,350,12],[371,18,350,16,"Error"],[371,23,350,21],[371,24,350,22],[371,35,350,33,"screen"],[371,41,350,39],[371,126,350,124],[371,127,350,125],[372,6,351,4],[373,6,352,4],[373,10,352,8,"config"],[373,16,352,14],[373,17,352,15,"screens"],[373,24,352,22],[373,26,352,24],[374,8,353,6],[375,8,354,6],[375,12,354,10,"config"],[375,18,354,16],[375,19,354,17,"initialRouteName"],[375,35,354,33],[375,37,354,35],[376,10,355,8,"initials"],[376,18,355,16],[376,19,355,17,"push"],[376,23,355,21],[376,24,355,22],[377,12,356,10,"initialRouteName"],[377,28,356,26],[377,30,356,28,"config"],[377,36,356,34],[377,37,356,35,"initialRouteName"],[377,53,356,51],[378,12,357,10,"parentScreens"],[379,10,358,8],[379,11,358,9],[379,12,358,10],[380,8,359,6],[381,8,360,6,"Object"],[381,14,360,12],[381,15,360,13,"keys"],[381,19,360,17],[381,20,360,18,"config"],[381,26,360,24],[381,27,360,25,"screens"],[381,34,360,32],[381,35,360,33],[381,36,360,34,"forEach"],[381,43,360,41],[381,44,360,42,"nestedConfig"],[381,56,360,54],[381,60,360,58],[382,10,361,8],[382,16,361,14,"result"],[382,22,361,20],[382,25,361,23,"createNormalizedConfigs"],[382,48,361,46],[382,49,361,47,"nestedConfig"],[382,61,361,59],[382,63,361,61,"config"],[382,69,361,67],[382,70,361,68,"screens"],[382,77,361,75],[382,79,361,77,"initials"],[382,87,361,85],[382,89,361,87],[382,90,361,88],[382,93,361,91,"paths"],[382,98,361,96],[382,99,361,97],[382,101,361,99],[382,102,361,100],[382,105,361,103,"parentScreens"],[382,118,361,116],[382,119,361,117],[382,121,361,119,"routeNames"],[382,131,361,129],[382,132,361,130],[383,10,362,8,"configs"],[383,17,362,15],[383,18,362,16,"push"],[383,22,362,20],[383,23,362,21],[383,26,362,24,"result"],[383,32,362,30],[383,33,362,31],[384,8,363,6],[384,9,363,7],[384,10,363,8],[385,6,364,4],[386,4,365,2],[387,4,366,2,"routeNames"],[387,14,366,12],[387,15,366,13,"pop"],[387,18,366,16],[387,19,366,17],[387,20,366,18],[388,4,367,2],[388,11,367,9,"configs"],[388,18,367,16],[389,2,368,0],[389,3,368,1],[390,2,369,0],[390,8,369,6,"createConfigItem"],[390,24,369,22],[390,27,369,25,"createConfigItem"],[390,28,369,26,"screen"],[390,34,369,32],[390,36,369,34,"routeNames"],[390,46,369,44],[390,48,369,46,"paths"],[390,53,369,51],[390,55,369,53,"parse"],[390,60,369,58],[390,65,369,63],[391,4,370,2],[391,10,370,8,"parts"],[391,15,370,13],[391,18,370,16],[391,20,370,18],[393,4,372,2],[394,4,373,2],[394,9,373,7],[394,15,373,13],[395,6,374,4,"screen"],[395,12,374,10],[396,6,375,4,"path"],[397,4,376,2],[397,5,376,3],[397,9,376,7,"paths"],[397,14,376,12],[397,16,376,14],[398,6,377,4,"parts"],[398,11,377,9],[398,12,377,10,"push"],[398,16,377,14],[398,17,377,15],[398,20,377,18],[398,24,377,18,"getPatternParts"],[398,42,377,33],[398,43,377,33,"getPatternParts"],[398,58,377,33],[398,60,377,34,"path"],[398,64,377,38],[398,65,377,39],[398,66,377,40,"map"],[398,69,377,43],[398,70,377,44,"part"],[398,74,377,48],[398,79,377,53],[399,8,378,6],[399,11,378,9,"part"],[399,15,378,13],[400,8,379,6,"screen"],[401,6,380,4],[401,7,380,5],[401,8,380,6],[401,9,380,7],[401,10,380,8],[402,4,381,2],[403,4,382,2],[403,10,382,8,"regex"],[403,15,382,13],[403,18,382,16,"parts"],[403,23,382,21],[403,24,382,22,"length"],[403,30,382,28],[403,33,382,31],[403,37,382,35,"RegExp"],[403,43,382,41],[403,44,382,42],[403,49,382,47,"parts"],[403,54,382,52],[403,55,382,53,"map"],[403,58,382,56],[403,59,382,57],[403,60,382,58,"it"],[403,62,382,60],[403,64,382,62,"i"],[403,65,382,63],[403,70,382,68],[404,6,383,4],[404,10,383,8,"it"],[404,12,383,10],[404,13,383,11,"param"],[404,18,383,16],[404,20,383,18],[405,8,384,6],[405,14,384,12,"reg"],[405,17,384,15],[405,20,384,18,"it"],[405,22,384,20],[405,23,384,21,"regex"],[405,28,384,26],[405,32,384,30],[405,39,384,37],[406,8,385,6],[406,15,385,13],[406,29,385,27,"i"],[406,30,385,28],[406,34,385,32,"reg"],[406,37,385,35],[406,45,385,43,"it"],[406,47,385,45],[406,48,385,46,"optional"],[406,56,385,54],[406,59,385,57],[406,62,385,60],[406,65,385,63],[406,67,385,65],[406,70,385,68],[407,6,386,4],[408,6,387,4],[408,13,387,11],[408,16,387,14,"it"],[408,18,387,16],[408,19,387,17,"segment"],[408,26,387,24],[408,31,387,29],[408,34,387,32],[408,37,387,35],[408,41,387,39],[408,44,387,42],[408,48,387,42,"escape"],[408,54,387,48],[408,55,387,48,"default"],[408,62,387,48],[408,64,387,49,"it"],[408,66,387,51],[408,67,387,52,"segment"],[408,74,387,59],[408,75,387,60],[408,80,387,65],[409,4,388,2],[409,5,388,3],[409,6,388,4],[409,7,388,5,"join"],[409,11,388,9],[409,12,388,10],[409,14,388,12],[409,15,388,13],[409,19,388,17],[409,20,388,18],[409,23,388,21,"undefined"],[409,32,388,30],[410,4,389,2],[410,10,389,8,"segments"],[410,18,389,16],[410,21,389,19,"parts"],[410,26,389,24],[410,27,389,25,"map"],[410,30,389,28],[410,31,389,29,"it"],[410,33,389,31],[410,37,389,35,"it"],[410,39,389,37],[410,40,389,38,"segment"],[410,47,389,45],[410,48,389,46],[411,4,390,2],[411,10,390,8,"params"],[411,16,390,14],[411,19,390,17,"parts"],[411,24,390,22],[411,25,390,23,"map"],[411,28,390,26],[411,29,390,27],[411,30,390,28,"it"],[411,32,390,30],[411,34,390,32,"i"],[411,35,390,33],[411,40,390,38,"it"],[411,42,390,40],[411,43,390,41,"param"],[411,48,390,46],[411,51,390,49],[412,6,391,4,"index"],[412,11,391,9],[412,13,391,11,"i"],[412,14,391,12],[413,6,392,4,"screen"],[413,12,392,10],[413,14,392,12,"it"],[413,16,392,14],[413,17,392,15,"screen"],[413,23,392,21],[414,6,393,4,"name"],[414,10,393,8],[414,12,393,10,"it"],[414,14,393,12],[414,15,393,13,"param"],[415,4,394,2],[415,5,394,3],[415,8,394,6],[415,12,394,10],[415,13,394,11],[415,14,394,12,"filter"],[415,20,394,18],[415,21,394,19,"it"],[415,23,394,21],[415,27,394,25,"it"],[415,29,394,27],[415,33,394,31],[415,37,394,35],[415,38,394,36],[416,4,395,2],[416,11,395,9],[417,6,396,4,"screen"],[417,12,396,10],[418,6,397,4,"regex"],[418,11,397,9],[419,6,398,4,"segments"],[419,14,398,12],[420,6,399,4,"params"],[420,12,399,10],[421,6,400,4,"routeNames"],[421,16,400,14],[422,6,401,4,"parse"],[423,4,402,2],[423,5,402,3],[424,2,403,0],[424,3,403,1],[425,2,404,0],[425,8,404,6,"findParseConfigForRoute"],[425,31,404,29],[425,34,404,32,"findParseConfigForRoute"],[425,35,404,33,"routeName"],[425,44,404,42],[425,46,404,44,"flatConfig"],[425,56,404,54],[425,61,404,59],[426,4,405,2],[426,9,405,7],[426,15,405,13,"config"],[426,21,405,19],[426,25,405,23,"flatConfig"],[426,35,405,33],[426,37,405,35],[427,6,406,4],[427,10,406,8,"routeName"],[427,19,406,17],[427,24,406,22,"config"],[427,30,406,28],[427,31,406,29,"routeNames"],[427,41,406,39],[427,42,406,40,"config"],[427,48,406,46],[427,49,406,47,"routeNames"],[427,59,406,57],[427,60,406,58,"length"],[427,66,406,64],[427,69,406,67],[427,70,406,68],[427,71,406,69],[427,73,406,71],[428,8,407,6],[428,15,407,13,"config"],[428,21,407,19],[428,22,407,20,"parse"],[428,27,407,25],[429,6,408,4],[430,4,409,2],[431,4,410,2],[431,11,410,9,"undefined"],[431,20,410,18],[432,2,411,0],[432,3,411,1],[434,2,413,0],[435,2,414,0],[435,8,414,6,"findInitialRoute"],[435,24,414,22],[435,27,414,25,"findInitialRoute"],[435,28,414,26,"routeName"],[435,37,414,35],[435,39,414,37,"parentScreens"],[435,52,414,50],[435,54,414,52,"initialRoutes"],[435,67,414,65],[435,72,414,70],[436,4,415,2],[436,9,415,7],[436,15,415,13,"config"],[436,21,415,19],[436,25,415,23,"initialRoutes"],[436,38,415,36],[436,40,415,38],[437,6,416,4],[437,10,416,8,"parentScreens"],[437,23,416,21],[437,24,416,22,"length"],[437,30,416,28],[437,35,416,33,"config"],[437,41,416,39],[437,42,416,40,"parentScreens"],[437,55,416,53],[437,56,416,54,"length"],[437,62,416,60],[437,64,416,62],[438,8,417,6],[438,12,417,10,"sameParents"],[438,23,417,21],[438,26,417,24],[438,30,417,28],[439,8,418,6],[439,13,418,11],[439,17,418,15,"i"],[439,18,418,16],[439,21,418,19],[439,22,418,20],[439,24,418,22,"i"],[439,25,418,23],[439,28,418,26,"parentScreens"],[439,41,418,39],[439,42,418,40,"length"],[439,48,418,46],[439,50,418,48,"i"],[439,51,418,49],[439,53,418,51],[439,55,418,53],[440,10,419,8],[440,14,419,12,"parentScreens"],[440,27,419,25],[440,28,419,26,"i"],[440,29,419,27],[440,30,419,28],[440,31,419,29,"localeCompare"],[440,44,419,42],[440,45,419,43,"config"],[440,51,419,49],[440,52,419,50,"parentScreens"],[440,65,419,63],[440,66,419,64,"i"],[440,67,419,65],[440,68,419,66],[440,69,419,67],[440,74,419,72],[440,75,419,73],[440,77,419,75],[441,12,420,10,"sameParents"],[441,23,420,21],[441,26,420,24],[441,31,420,29],[442,12,421,10],[443,10,422,8],[444,8,423,6],[445,8,424,6],[445,12,424,10,"sameParents"],[445,23,424,21],[445,25,424,23],[446,10,425,8],[446,17,425,15,"routeName"],[446,26,425,24],[446,31,425,29,"config"],[446,37,425,35],[446,38,425,36,"initialRouteName"],[446,54,425,52],[446,57,425,55,"config"],[446,63,425,61],[446,64,425,62,"initialRouteName"],[446,80,425,78],[446,83,425,81,"undefined"],[446,92,425,90],[447,8,426,6],[448,6,427,4],[449,4,428,2],[450,4,429,2],[450,11,429,9,"undefined"],[450,20,429,18],[451,2,430,0],[451,3,430,1],[453,2,432,0],[454,2,433,0],[455,2,434,0],[455,8,434,6,"createStateObject"],[455,25,434,23],[455,28,434,26,"createStateObject"],[455,29,434,27,"initialRoute"],[455,41,434,39],[455,43,434,41,"route"],[455,48,434,46],[455,50,434,48,"isEmpty"],[455,57,434,55],[455,62,434,60],[456,4,435,2],[456,8,435,6,"isEmpty"],[456,15,435,13],[456,17,435,15],[457,6,436,4],[457,10,436,8,"initialRoute"],[457,22,436,20],[457,24,436,22],[458,8,437,6],[458,15,437,13],[459,10,438,8,"index"],[459,15,438,13],[459,17,438,15],[459,18,438,16],[460,10,439,8,"routes"],[460,16,439,14],[460,18,439,16],[460,19,439,17],[461,12,440,10,"name"],[461,16,440,14],[461,18,440,16,"initialRoute"],[462,10,441,8],[462,11,441,9],[462,13,441,11,"route"],[462,18,441,16],[463,8,442,6],[463,9,442,7],[464,6,443,4],[464,7,443,5],[464,13,443,11],[465,8,444,6],[465,15,444,13],[466,10,445,8,"routes"],[466,16,445,14],[466,18,445,16],[466,19,445,17,"route"],[466,24,445,22],[467,8,446,6],[467,9,446,7],[468,6,447,4],[469,4,448,2],[469,5,448,3],[469,11,448,9],[470,6,449,4],[470,10,449,8,"initialRoute"],[470,22,449,20],[470,24,449,22],[471,8,450,6],[471,15,450,13],[472,10,451,8,"index"],[472,15,451,13],[472,17,451,15],[472,18,451,16],[473,10,452,8,"routes"],[473,16,452,14],[473,18,452,16],[473,19,452,17],[474,12,453,10,"name"],[474,16,453,14],[474,18,453,16,"initialRoute"],[475,10,454,8],[475,11,454,9],[475,13,454,11],[476,12,455,10],[476,15,455,13,"route"],[476,20,455,18],[477,12,456,10,"state"],[477,17,456,15],[477,19,456,17],[478,14,457,12,"routes"],[478,20,457,18],[478,22,457,20],[479,12,458,10],[480,10,459,8],[480,11,459,9],[481,8,460,6],[481,9,460,7],[482,6,461,4],[482,7,461,5],[482,13,461,11],[483,8,462,6],[483,15,462,13],[484,10,463,8,"routes"],[484,16,463,14],[484,18,463,16],[484,19,463,17],[485,12,464,10],[485,15,464,13,"route"],[485,20,464,18],[486,12,465,10,"state"],[486,17,465,15],[486,19,465,17],[487,14,466,12,"routes"],[487,20,466,18],[487,22,466,20],[488,12,467,10],[489,10,468,8],[489,11,468,9],[490,8,469,6],[490,9,469,7],[491,6,470,4],[492,4,471,2],[493,2,472,0],[493,3,472,1],[494,2,473,0],[494,8,473,6,"createNestedStateObject"],[494,31,473,29],[494,34,473,32,"createNestedStateObject"],[494,35,473,33,"path"],[494,39,473,37],[494,41,473,39,"routes"],[494,47,473,45],[494,49,473,47,"initialRoutes"],[494,62,473,60],[494,64,473,62,"flatConfig"],[494,74,473,72],[494,79,473,77],[495,4,474,2],[495,8,474,6,"route"],[495,13,474,11],[495,16,474,14,"routes"],[495,22,474,20],[495,23,474,21,"shift"],[495,28,474,26],[495,29,474,27],[495,30,474,28],[496,4,475,2],[496,10,475,8,"parentScreens"],[496,23,475,21],[496,26,475,24],[496,28,475,26],[497,4,476,2],[497,8,476,6,"initialRoute"],[497,20,476,18],[497,23,476,21,"findInitialRoute"],[497,39,476,37],[497,40,476,38,"route"],[497,45,476,43],[497,46,476,44,"name"],[497,50,476,48],[497,52,476,50,"parentScreens"],[497,65,476,63],[497,67,476,65,"initialRoutes"],[497,80,476,78],[497,81,476,79],[498,4,477,2,"parentScreens"],[498,17,477,15],[498,18,477,16,"push"],[498,22,477,20],[498,23,477,21,"route"],[498,28,477,26],[498,29,477,27,"name"],[498,33,477,31],[498,34,477,32],[499,4,478,2],[499,10,478,8,"state"],[499,15,478,13],[499,18,478,16,"createStateObject"],[499,35,478,33],[499,36,478,34,"initialRoute"],[499,48,478,46],[499,50,478,48,"route"],[499,55,478,53],[499,57,478,55,"routes"],[499,63,478,61],[499,64,478,62,"length"],[499,70,478,68],[499,75,478,73],[499,76,478,74],[499,77,478,75],[500,4,479,2],[500,8,479,6,"routes"],[500,14,479,12],[500,15,479,13,"length"],[500,21,479,19],[500,24,479,22],[500,25,479,23],[500,27,479,25],[501,6,480,4],[501,10,480,8,"nestedState"],[501,21,480,19],[501,24,480,22,"state"],[501,29,480,27],[502,6,481,4],[502,13,481,11,"route"],[502,18,481,16],[502,21,481,19,"routes"],[502,27,481,25],[502,28,481,26,"shift"],[502,33,481,31],[502,34,481,32],[502,35,481,33],[502,37,481,35],[503,8,482,6,"initialRoute"],[503,20,482,18],[503,23,482,21,"findInitialRoute"],[503,39,482,37],[503,40,482,38,"route"],[503,45,482,43],[503,46,482,44,"name"],[503,50,482,48],[503,52,482,50,"parentScreens"],[503,65,482,63],[503,67,482,65,"initialRoutes"],[503,80,482,78],[503,81,482,79],[504,8,483,6],[504,14,483,12,"nestedStateIndex"],[504,30,483,28],[504,33,483,31,"nestedState"],[504,44,483,42],[504,45,483,43,"index"],[504,50,483,48],[504,54,483,52,"nestedState"],[504,65,483,63],[504,66,483,64,"routes"],[504,72,483,70],[504,73,483,71,"length"],[504,79,483,77],[504,82,483,80],[504,83,483,81],[505,8,484,6,"nestedState"],[505,19,484,17],[505,20,484,18,"routes"],[505,26,484,24],[505,27,484,25,"nestedStateIndex"],[505,43,484,41],[505,44,484,42],[505,45,484,43,"state"],[505,50,484,48],[505,53,484,51,"createStateObject"],[505,70,484,68],[505,71,484,69,"initialRoute"],[505,83,484,81],[505,85,484,83,"route"],[505,90,484,88],[505,92,484,90,"routes"],[505,98,484,96],[505,99,484,97,"length"],[505,105,484,103],[505,110,484,108],[505,111,484,109],[505,112,484,110],[506,8,485,6],[506,12,485,10,"routes"],[506,18,485,16],[506,19,485,17,"length"],[506,25,485,23],[506,28,485,26],[506,29,485,27],[506,31,485,29],[507,10,486,8,"nestedState"],[507,21,486,19],[507,24,486,22,"nestedState"],[507,35,486,33],[507,36,486,34,"routes"],[507,42,486,40],[507,43,486,41,"nestedStateIndex"],[507,59,486,57],[507,60,486,58],[507,61,486,59,"state"],[507,66,486,64],[508,8,487,6],[509,8,488,6,"parentScreens"],[509,21,488,19],[509,22,488,20,"push"],[509,26,488,24],[509,27,488,25,"route"],[509,32,488,30],[509,33,488,31,"name"],[509,37,488,35],[509,38,488,36],[510,6,489,4],[511,4,490,2],[512,4,491,2,"route"],[512,9,491,7],[512,12,491,10],[512,16,491,10,"findFocusedRoute"],[512,35,491,26],[512,36,491,26,"findFocusedRoute"],[512,52,491,26],[512,54,491,27,"state"],[512,59,491,32],[512,60,491,33],[513,4,492,2,"route"],[513,9,492,7],[513,10,492,8,"path"],[513,14,492,12],[513,17,492,15,"path"],[513,21,492,19],[513,22,492,20,"replace"],[513,29,492,27],[513,30,492,28],[513,35,492,33],[513,37,492,35],[513,39,492,37],[513,40,492,38],[514,4,493,2],[514,10,493,8,"params"],[514,16,493,14],[514,19,493,17,"parseQueryParams"],[514,35,493,33],[514,36,493,34,"path"],[514,40,493,38],[514,42,493,40,"flatConfig"],[514,52,493,50],[514,55,493,53,"findParseConfigForRoute"],[514,78,493,76],[514,79,493,77,"route"],[514,84,493,82],[514,85,493,83,"name"],[514,89,493,87],[514,91,493,89,"flatConfig"],[514,101,493,99],[514,102,493,100],[514,105,493,103,"undefined"],[514,114,493,112],[514,115,493,113],[515,4,494,2],[515,8,494,6,"params"],[515,14,494,12],[515,16,494,14],[516,6,495,4,"route"],[516,11,495,9],[516,12,495,10,"params"],[516,18,495,16],[516,21,495,19],[517,8,496,6],[517,11,496,9,"route"],[517,16,496,14],[517,17,496,15,"params"],[517,23,496,21],[518,8,497,6],[518,11,497,9,"params"],[519,6,498,4],[519,7,498,5],[520,4,499,2],[521,4,500,2],[521,11,500,9,"state"],[521,16,500,14],[522,2,501,0],[522,3,501,1],[523,2,502,0],[523,8,502,6,"parseQueryParams"],[523,24,502,22],[523,27,502,25,"parseQueryParams"],[523,28,502,26,"path"],[523,32,502,30],[523,34,502,32,"parseConfig"],[523,45,502,43],[523,50,502,48],[524,4,503,2],[524,10,503,8,"query"],[524,15,503,13],[524,18,503,16,"path"],[524,22,503,20],[524,23,503,21,"split"],[524,28,503,26],[524,29,503,27],[524,32,503,30],[524,33,503,31],[524,34,503,32],[524,35,503,33],[524,36,503,34],[525,4,504,2],[525,10,504,8,"params"],[525,16,504,14],[525,19,504,17,"queryString"],[525,30,504,28],[525,31,504,29,"parse"],[525,36,504,34],[525,37,504,35,"query"],[525,42,504,40],[525,43,504,41],[526,4,505,2],[526,8,505,6,"parseConfig"],[526,19,505,17],[526,21,505,19],[527,6,506,4,"Object"],[527,12,506,10],[527,13,506,11,"keys"],[527,17,506,15],[527,18,506,16,"params"],[527,24,506,22],[527,25,506,23],[527,26,506,24,"forEach"],[527,33,506,31],[527,34,506,32,"name"],[527,38,506,36],[527,42,506,40],[528,8,507,6],[528,12,507,10,"Object"],[528,18,507,16],[528,19,507,17,"hasOwnProperty"],[528,33,507,31],[528,34,507,32,"call"],[528,38,507,36],[528,39,507,37,"parseConfig"],[528,50,507,48],[528,52,507,50,"name"],[528,56,507,54],[528,57,507,55],[528,61,507,59],[528,68,507,66,"params"],[528,74,507,72],[528,75,507,73,"name"],[528,79,507,77],[528,80,507,78],[528,85,507,83],[528,93,507,91],[528,95,507,93],[529,10,508,8,"params"],[529,16,508,14],[529,17,508,15,"name"],[529,21,508,19],[529,22,508,20],[529,25,508,23,"parseConfig"],[529,36,508,34],[529,37,508,35,"name"],[529,41,508,39],[529,42,508,40],[529,43,508,41,"params"],[529,49,508,47],[529,50,508,48,"name"],[529,54,508,52],[529,55,508,53],[529,56,508,54],[530,8,509,6],[531,6,510,4],[531,7,510,5],[531,8,510,6],[532,4,511,2],[533,4,512,2],[533,11,512,9,"Object"],[533,17,512,15],[533,18,512,16,"keys"],[533,22,512,20],[533,23,512,21,"params"],[533,29,512,27],[533,30,512,28],[533,31,512,29,"length"],[533,37,512,35],[533,40,512,38,"params"],[533,46,512,44],[533,49,512,47,"undefined"],[533,58,512,56],[534,2,513,0],[534,3,513,1],[535,0,513,2],[535,3]],"functionMap":{"names":["<global>","getStateFromPath","remaining.split.filter.map$argument_0","configs.find$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getSortedNormalizedConfigs","Object.keys.map$argument_0","concat.sort$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","matchAgainstConfigs","config.routeNames.map$argument_0","Object.entries.map$argument_0","routeConfig.params.find$argument_0","Object.entries.map.filter$argument_0","Object.entries.map.filter.map$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","getPatternParts.map$argument_0","parts.map$argument_0","parts.map.filter$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams"],"mappings":"AAA;OC8B;4DC4B;KDK;+BES,0CF;gEGE;QHE;CDuB;AKM;CLO;AMC;CNa;AOC;CPS;AQC;+CCE,uED,QE;GF2E;CRC;AWC;iBCE;uDCQ,sBD,YE,sBF;GDQ;CXC;AeC;qBCC;IDI;CfC;4BiBC;qCCa;yCfC;SeG;yGCC;gDCE,wBD;SDK,SG,gBH,MI;SJO;ODU;CjBS;gCuBC;0CCgE;ODG;CvBK;yByBC;4CCQ;MDG;yDEE;GFM;6BEC,gBF;2BEC;UFI,SG,gBH;CzBS;gC6BC;C7BO;yB8BG;C9BgB;0B+BI;C/BsC;gCgCC;ChC4B;yBiCC;gCTI;KSI;CjCG"},"hasCjsExports":false},"type":"js/module"}]}