{"dependencies":[{"name":"query-string","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":44,"index":59}}],"key":"Tk6zkk+/XfK89igjx1MNWAcG1Q8=","exportNames":["*"],"imports":1}},{"name":"./getPatternParts.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":60},"end":{"line":4,"column":55,"index":115}}],"key":"ZBgxhB8YmJlp1KxhfM5ocx9xUB0=","exportNames":["*"],"imports":1}},{"name":"./validatePathConfig.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":116},"end":{"line":5,"column":61,"index":177}}],"key":"zoUaUuxQP5qPvRrno+lraXgTGfI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      n[k] = e[k];\n    });\n    n.default = e;\n    return n;\n  }\n  exports.getPathFromState = getPathFromState;\n  var _queryString = require(_dependencyMap[0], \"query-string\");\n  var queryString = _interopNamespace(_queryString);\n  var _getPatternPartsJs = require(_dependencyMap[1], \"./getPatternParts.js\");\n  var _validatePathConfigJs = require(_dependencyMap[2], \"./validatePathConfig.js\");\n  const getActiveRoute = state => {\n    const route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n    if (route.state) {\n      return getActiveRoute(route.state);\n    }\n    return route;\n  };\n  const cachedNormalizedConfigs = new WeakMap();\n  const getNormalizedConfigs = options => {\n    if (!options?.screens) return {};\n    const cached = cachedNormalizedConfigs.get(options?.screens);\n    if (cached) return cached;\n    const normalizedConfigs = createNormalizedConfigs(options.screens);\n    cachedNormalizedConfigs.set(options.screens, normalizedConfigs);\n    return normalizedConfigs;\n  };\n\n  /**\n   * Utility to serialize a navigation state object to a path string.\n   *\n   * @example\n   * ```js\n   * getPathFromState(\n   *   {\n   *     routes: [\n   *       {\n   *         name: 'Chat',\n   *         params: { author: 'Jane', id: 42 },\n   *       },\n   *     ],\n   *   },\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         stringify: { author: author => author.toLowerCase() }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @param state Navigation state to serialize.\n   * @param options Extra options to fine-tune how to serialize the path.\n   * @returns Path representing the state, e.g. /foo/bar?count=42.\n   */\n  function getPathFromState(state, options) {\n    if (state == null) {\n      throw Error(`Got '${String(state)}' for the navigation state. You must pass a valid state object.`);\n    }\n    if (options) {\n      (0, _validatePathConfigJs.validatePathConfig)(options);\n    }\n    const configs = getNormalizedConfigs(options);\n    let path = '/';\n    let current = state;\n    const allParams = {};\n    while (current) {\n      let index = typeof current.index === 'number' ? current.index : 0;\n      let route = current.routes[index];\n      let parts;\n      let focusedParams;\n      let currentOptions = configs;\n      const focusedRoute = getActiveRoute(state);\n\n      // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n      const nestedRouteNames = [];\n      let hasNext = true;\n      while (route.name in currentOptions && hasNext) {\n        parts = currentOptions[route.name].parts;\n        nestedRouteNames.push(route.name);\n        if (route.params) {\n          const options = currentOptions[route.name];\n          const currentParams = Object.fromEntries(Object.entries(route.params).map(([key, value]) => {\n            if (value === undefined) {\n              if (options) {\n                const optional = options.parts?.find(part => part.param === key)?.optional;\n                if (optional) {\n                  return null;\n                }\n              } else {\n                return null;\n              }\n            }\n            const stringify = options?.stringify?.[key] ?? String;\n            return [key, stringify(value)];\n          }).filter(entry => entry != null));\n          if (parts?.length) {\n            Object.assign(allParams, currentParams);\n          }\n          if (focusedRoute === route) {\n            // If this is the focused route, keep the params for later use\n            // We save it here since it's been stringified already\n            focusedParams = {\n              ...currentParams\n            };\n            parts\n            // eslint-disable-next-line no-loop-func\n            ?.forEach(({\n              param\n            }) => {\n              if (param) {\n                // Remove the params present in the pattern since we'll only use the rest for query string\n                if (focusedParams) {\n                  // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                  delete focusedParams[param];\n                }\n              }\n            });\n          }\n        }\n\n        // If there is no `screens` property or no nested state, we return pattern\n        if (!currentOptions[route.name].screens || route.state === undefined) {\n          hasNext = false;\n        } else {\n          index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n          const nextRoute = route.state.routes[index];\n          const nestedConfig = currentOptions[route.name].screens;\n\n          // if there is config for next route name, we go deeper\n          if (nestedConfig && nextRoute.name in nestedConfig) {\n            route = nextRoute;\n            currentOptions = nestedConfig;\n          } else {\n            // If not, there is no sense in going deeper in config\n            hasNext = false;\n          }\n        }\n      }\n      if (currentOptions[route.name] !== undefined) {\n        path += parts?.map(({\n          segment,\n          param,\n          optional\n        }) => {\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (segment === '*') {\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (param) {\n            const value = allParams[param];\n            if (value === undefined && optional) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            // Valid characters according to\n            // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n            return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g, char => encodeURIComponent(char));\n          }\n          return encodeURIComponent(segment);\n        }).join('/');\n      } else {\n        path += encodeURIComponent(route.name);\n      }\n      if (!focusedParams && focusedRoute.params) {\n        focusedParams = Object.fromEntries(Object.entries(focusedRoute.params).map(([key, value]) => [key, String(value)]));\n      }\n      if (route.state) {\n        path += '/';\n      } else if (focusedParams) {\n        for (const param in focusedParams) {\n          if (focusedParams[param] === 'undefined') {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete focusedParams[param];\n          }\n        }\n        const query = queryString.stringify(focusedParams, {\n          sort: false\n        });\n        if (query) {\n          path += `?${query}`;\n        }\n      }\n      current = route.state;\n    }\n\n    // Include the root path if specified\n    if (options?.path) {\n      path = `${options.path}/${path}`;\n    }\n\n    // Remove multiple as well as trailing slashes\n    path = path.replace(/\\/+/g, '/');\n    path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n    // If path doesn't start with a slash, add it\n    // This makes sure that history.pushState will update the path correctly instead of appending\n    if (!path.startsWith('/')) {\n      path = `/${path}`;\n    }\n    return path;\n  }\n  const createConfigItem = (config, parentParts) => {\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      const parts = (0, _getPatternPartsJs.getPatternParts)(config);\n      if (parentParts) {\n        return {\n          parts: [...parentParts, ...parts]\n        };\n      }\n      return {\n        parts\n      };\n    }\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n\n    // If an object is specified as the value (e.g. Foo: { ... }),\n    // It can have `path` property and `screens` prop which has nested configs\n    const parts = config.exact !== true ? [...(parentParts || []), ...(config.path ? (0, _getPatternPartsJs.getPatternParts)(config.path) : [])] : config.path ? (0, _getPatternPartsJs.getPatternParts)(config.path) : undefined;\n    const screens = config.screens ? createNormalizedConfigs(config.screens, parts) : undefined;\n    return {\n      parts,\n      stringify: config.stringify,\n      screens\n    };\n  };\n  const createNormalizedConfigs = (options, parts) => Object.fromEntries(Object.entries(options).map(([name, c]) => {\n    const result = createConfigItem(c, parts);\n    return [name, result];\n  }));\n});","lineCount":250,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13],[7,11,1,13,"_interopNamespace"],[7,29,1,13,"e"],[7,30,1,13],[8,4,1,13],[8,8,1,13,"e"],[8,9,1,13],[8,13,1,13,"e"],[8,14,1,13],[8,15,1,13,"__esModule"],[8,25,1,13],[8,34,1,13,"e"],[8,35,1,13],[9,4,1,13],[9,8,1,13,"n"],[9,9,1,13],[10,4,1,13],[10,8,1,13,"e"],[10,9,1,13],[10,11,1,13,"Object"],[10,17,1,13],[10,18,1,13,"keys"],[10,22,1,13],[10,23,1,13,"e"],[10,24,1,13],[10,26,1,13,"forEach"],[10,33,1,13],[10,44,1,13,"k"],[10,45,1,13],[11,6,1,13,"n"],[11,7,1,13],[11,8,1,13,"k"],[11,9,1,13],[11,13,1,13,"e"],[11,14,1,13],[11,15,1,13,"k"],[11,16,1,13],[12,4,1,13],[13,4,1,13,"n"],[13,5,1,13],[13,6,1,13,"default"],[13,13,1,13],[13,16,1,13,"e"],[13,17,1,13],[14,4,1,13],[14,11,1,13,"n"],[14,12,1,13],[15,2,1,13],[16,2,52,0,"exports"],[16,9,52,0],[16,10,52,0,"getPathFromState"],[16,26,52,0],[16,29,52,0,"getPathFromState"],[16,45,52,0],[17,2,3,0],[17,6,3,0,"_queryString"],[17,18,3,0],[17,21,3,0,"require"],[17,28,3,0],[17,29,3,0,"_dependencyMap"],[17,43,3,0],[18,2,3,0],[18,6,3,0,"queryString"],[18,17,3,0],[18,20,3,0,"_interopNamespace"],[18,37,3,0],[18,38,3,0,"_queryString"],[18,50,3,0],[19,2,4,0],[19,6,4,0,"_getPatternPartsJs"],[19,24,4,0],[19,27,4,0,"require"],[19,34,4,0],[19,35,4,0,"_dependencyMap"],[19,49,4,0],[20,2,5,0],[20,6,5,0,"_validatePathConfigJs"],[20,27,5,0],[20,30,5,0,"require"],[20,37,5,0],[20,38,5,0,"_dependencyMap"],[20,52,5,0],[21,2,6,0],[21,8,6,6,"getActiveRoute"],[21,22,6,20],[21,25,6,23,"state"],[21,30,6,28],[21,34,6,32],[22,4,7,2],[22,10,7,8,"route"],[22,15,7,13],[22,18,7,16],[22,25,7,23,"state"],[22,30,7,28],[22,31,7,29,"index"],[22,36,7,34],[22,41,7,39],[22,49,7,47],[22,52,7,50,"state"],[22,57,7,55],[22,58,7,56,"routes"],[22,64,7,62],[22,65,7,63,"state"],[22,70,7,68],[22,71,7,69,"index"],[22,76,7,74],[22,77,7,75],[22,80,7,78,"state"],[22,85,7,83],[22,86,7,84,"routes"],[22,92,7,90],[22,93,7,91,"state"],[22,98,7,96],[22,99,7,97,"routes"],[22,105,7,103],[22,106,7,104,"length"],[22,112,7,110],[22,115,7,113],[22,116,7,114],[22,117,7,115],[23,4,8,2],[23,8,8,6,"route"],[23,13,8,11],[23,14,8,12,"state"],[23,19,8,17],[23,21,8,19],[24,6,9,4],[24,13,9,11,"getActiveRoute"],[24,27,9,25],[24,28,9,26,"route"],[24,33,9,31],[24,34,9,32,"state"],[24,39,9,37],[24,40,9,38],[25,4,10,2],[26,4,11,2],[26,11,11,9,"route"],[26,16,11,14],[27,2,12,0],[27,3,12,1],[28,2,13,0],[28,8,13,6,"cachedNormalizedConfigs"],[28,31,13,29],[28,34,13,32],[28,38,13,36,"WeakMap"],[28,45,13,43],[28,46,13,44],[28,47,13,45],[29,2,14,0],[29,8,14,6,"getNormalizedConfigs"],[29,28,14,26],[29,31,14,29,"options"],[29,38,14,36],[29,42,14,40],[30,4,15,2],[30,8,15,6],[30,9,15,7,"options"],[30,16,15,14],[30,18,15,16,"screens"],[30,25,15,23],[30,27,15,25],[30,34,15,32],[30,35,15,33],[30,36,15,34],[31,4,16,2],[31,10,16,8,"cached"],[31,16,16,14],[31,19,16,17,"cachedNormalizedConfigs"],[31,42,16,40],[31,43,16,41,"get"],[31,46,16,44],[31,47,16,45,"options"],[31,54,16,52],[31,56,16,54,"screens"],[31,63,16,61],[31,64,16,62],[32,4,17,2],[32,8,17,6,"cached"],[32,14,17,12],[32,16,17,14],[32,23,17,21,"cached"],[32,29,17,27],[33,4,18,2],[33,10,18,8,"normalizedConfigs"],[33,27,18,25],[33,30,18,28,"createNormalizedConfigs"],[33,53,18,51],[33,54,18,52,"options"],[33,61,18,59],[33,62,18,60,"screens"],[33,69,18,67],[33,70,18,68],[34,4,19,2,"cachedNormalizedConfigs"],[34,27,19,25],[34,28,19,26,"set"],[34,31,19,29],[34,32,19,30,"options"],[34,39,19,37],[34,40,19,38,"screens"],[34,47,19,45],[34,49,19,47,"normalizedConfigs"],[34,66,19,64],[34,67,19,65],[35,4,20,2],[35,11,20,9,"normalizedConfigs"],[35,28,20,26],[36,2,21,0],[36,3,21,1],[38,2,23,0],[39,0,24,0],[40,0,25,0],[41,0,26,0],[42,0,27,0],[43,0,28,0],[44,0,29,0],[45,0,30,0],[46,0,31,0],[47,0,32,0],[48,0,33,0],[49,0,34,0],[50,0,35,0],[51,0,36,0],[52,0,37,0],[53,0,38,0],[54,0,39,0],[55,0,40,0],[56,0,41,0],[57,0,42,0],[58,0,43,0],[59,0,44,0],[60,0,45,0],[61,0,46,0],[62,0,47,0],[63,0,48,0],[64,0,49,0],[65,0,50,0],[66,0,51,0],[67,2,52,7],[67,11,52,16,"getPathFromState"],[67,27,52,32,"getPathFromState"],[67,28,52,33,"state"],[67,33,52,38],[67,35,52,40,"options"],[67,42,52,47],[67,44,52,49],[68,4,53,2],[68,8,53,6,"state"],[68,13,53,11],[68,17,53,15],[68,21,53,19],[68,23,53,21],[69,6,54,4],[69,12,54,10,"Error"],[69,17,54,15],[69,18,54,16],[69,26,54,24,"String"],[69,32,54,30],[69,33,54,31,"state"],[69,38,54,36],[69,39,54,37],[69,104,54,102],[69,105,54,103],[70,4,55,2],[71,4,56,2],[71,8,56,6,"options"],[71,15,56,13],[71,17,56,15],[72,6,57,4],[72,10,57,4,"validatePathConfig"],[72,31,57,22],[72,32,57,22,"validatePathConfig"],[72,50,57,22],[72,52,57,23,"options"],[72,59,57,30],[72,60,57,31],[73,4,58,2],[74,4,59,2],[74,10,59,8,"configs"],[74,17,59,15],[74,20,59,18,"getNormalizedConfigs"],[74,40,59,38],[74,41,59,39,"options"],[74,48,59,46],[74,49,59,47],[75,4,60,2],[75,8,60,6,"path"],[75,12,60,10],[75,15,60,13],[75,18,60,16],[76,4,61,2],[76,8,61,6,"current"],[76,15,61,13],[76,18,61,16,"state"],[76,23,61,21],[77,4,62,2],[77,10,62,8,"allParams"],[77,19,62,17],[77,22,62,20],[77,23,62,21],[77,24,62,22],[78,4,63,2],[78,11,63,9,"current"],[78,18,63,16],[78,20,63,18],[79,6,64,4],[79,10,64,8,"index"],[79,15,64,13],[79,18,64,16],[79,25,64,23,"current"],[79,32,64,30],[79,33,64,31,"index"],[79,38,64,36],[79,43,64,41],[79,51,64,49],[79,54,64,52,"current"],[79,61,64,59],[79,62,64,60,"index"],[79,67,64,65],[79,70,64,68],[79,71,64,69],[80,6,65,4],[80,10,65,8,"route"],[80,15,65,13],[80,18,65,16,"current"],[80,25,65,23],[80,26,65,24,"routes"],[80,32,65,30],[80,33,65,31,"index"],[80,38,65,36],[80,39,65,37],[81,6,66,4],[81,10,66,8,"parts"],[81,15,66,13],[82,6,67,4],[82,10,67,8,"focusedParams"],[82,23,67,21],[83,6,68,4],[83,10,68,8,"currentOptions"],[83,24,68,22],[83,27,68,25,"configs"],[83,34,68,32],[84,6,69,4],[84,12,69,10,"focusedRoute"],[84,24,69,22],[84,27,69,25,"getActiveRoute"],[84,41,69,39],[84,42,69,40,"state"],[84,47,69,45],[84,48,69,46],[86,6,71,4],[87,6,72,4],[87,12,72,10,"nestedRouteNames"],[87,28,72,26],[87,31,72,29],[87,33,72,31],[88,6,73,4],[88,10,73,8,"hasNext"],[88,17,73,15],[88,20,73,18],[88,24,73,22],[89,6,74,4],[89,13,74,11,"route"],[89,18,74,16],[89,19,74,17,"name"],[89,23,74,21],[89,27,74,25,"currentOptions"],[89,41,74,39],[89,45,74,43,"hasNext"],[89,52,74,50],[89,54,74,52],[90,8,75,6,"parts"],[90,13,75,11],[90,16,75,14,"currentOptions"],[90,30,75,28],[90,31,75,29,"route"],[90,36,75,34],[90,37,75,35,"name"],[90,41,75,39],[90,42,75,40],[90,43,75,41,"parts"],[90,48,75,46],[91,8,76,6,"nestedRouteNames"],[91,24,76,22],[91,25,76,23,"push"],[91,29,76,27],[91,30,76,28,"route"],[91,35,76,33],[91,36,76,34,"name"],[91,40,76,38],[91,41,76,39],[92,8,77,6],[92,12,77,10,"route"],[92,17,77,15],[92,18,77,16,"params"],[92,24,77,22],[92,26,77,24],[93,10,78,8],[93,16,78,14,"options"],[93,23,78,21],[93,26,78,24,"currentOptions"],[93,40,78,38],[93,41,78,39,"route"],[93,46,78,44],[93,47,78,45,"name"],[93,51,78,49],[93,52,78,50],[94,10,79,8],[94,16,79,14,"currentParams"],[94,29,79,27],[94,32,79,30,"Object"],[94,38,79,36],[94,39,79,37,"fromEntries"],[94,50,79,48],[94,51,79,49,"Object"],[94,57,79,55],[94,58,79,56,"entries"],[94,65,79,63],[94,66,79,64,"route"],[94,71,79,69],[94,72,79,70,"params"],[94,78,79,76],[94,79,79,77],[94,80,79,78,"map"],[94,83,79,81],[94,84,79,82],[94,85,79,83],[94,86,79,84,"key"],[94,89,79,87],[94,91,79,89,"value"],[94,96,79,94],[94,97,79,95],[94,102,79,100],[95,12,80,10],[95,16,80,14,"value"],[95,21,80,19],[95,26,80,24,"undefined"],[95,35,80,33],[95,37,80,35],[96,14,81,12],[96,18,81,16,"options"],[96,25,81,23],[96,27,81,25],[97,16,82,14],[97,22,82,20,"optional"],[97,30,82,28],[97,33,82,31,"options"],[97,40,82,38],[97,41,82,39,"parts"],[97,46,82,44],[97,48,82,46,"find"],[97,52,82,50],[97,53,82,51,"part"],[97,57,82,55],[97,61,82,59,"part"],[97,65,82,63],[97,66,82,64,"param"],[97,71,82,69],[97,76,82,74,"key"],[97,79,82,77],[97,80,82,78],[97,82,82,80,"optional"],[97,90,82,88],[98,16,83,14],[98,20,83,18,"optional"],[98,28,83,26],[98,30,83,28],[99,18,84,16],[99,25,84,23],[99,29,84,27],[100,16,85,14],[101,14,86,12],[101,15,86,13],[101,21,86,19],[102,16,87,14],[102,23,87,21],[102,27,87,25],[103,14,88,12],[104,12,89,10],[105,12,90,10],[105,18,90,16,"stringify"],[105,27,90,25],[105,30,90,28,"options"],[105,37,90,35],[105,39,90,37,"stringify"],[105,48,90,46],[105,51,90,49,"key"],[105,54,90,52],[105,55,90,53],[105,59,90,57,"String"],[105,65,90,63],[106,12,91,10],[106,19,91,17],[106,20,91,18,"key"],[106,23,91,21],[106,25,91,23,"stringify"],[106,34,91,32],[106,35,91,33,"value"],[106,40,91,38],[106,41,91,39],[106,42,91,40],[107,10,92,8],[107,11,92,9],[107,12,92,10],[107,13,92,11,"filter"],[107,19,92,17],[107,20,92,18,"entry"],[107,25,92,23],[107,29,92,27,"entry"],[107,34,92,32],[107,38,92,36],[107,42,92,40],[107,43,92,41],[107,44,92,42],[108,10,93,8],[108,14,93,12,"parts"],[108,19,93,17],[108,21,93,19,"length"],[108,27,93,25],[108,29,93,27],[109,12,94,10,"Object"],[109,18,94,16],[109,19,94,17,"assign"],[109,25,94,23],[109,26,94,24,"allParams"],[109,35,94,33],[109,37,94,35,"currentParams"],[109,50,94,48],[109,51,94,49],[110,10,95,8],[111,10,96,8],[111,14,96,12,"focusedRoute"],[111,26,96,24],[111,31,96,29,"route"],[111,36,96,34],[111,38,96,36],[112,12,97,10],[113,12,98,10],[114,12,99,10,"focusedParams"],[114,25,99,23],[114,28,99,26],[115,14,100,12],[115,17,100,15,"currentParams"],[116,12,101,10],[116,13,101,11],[117,12,102,10,"parts"],[118,12,103,10],[119,12,103,10],[119,14,104,12,"forEach"],[119,21,104,19],[119,22,104,20],[119,23,104,21],[120,14,105,12,"param"],[121,12,106,10],[121,13,106,11],[121,18,106,16],[122,14,107,12],[122,18,107,16,"param"],[122,23,107,21],[122,25,107,23],[123,16,108,14],[124,16,109,14],[124,20,109,18,"focusedParams"],[124,33,109,31],[124,35,109,33],[125,18,110,16],[126,18,111,16],[126,25,111,23,"focusedParams"],[126,38,111,36],[126,39,111,37,"param"],[126,44,111,42],[126,45,111,43],[127,16,112,14],[128,14,113,12],[129,12,114,10],[129,13,114,11],[129,14,114,12],[130,10,115,8],[131,8,116,6],[133,8,118,6],[134,8,119,6],[134,12,119,10],[134,13,119,11,"currentOptions"],[134,27,119,25],[134,28,119,26,"route"],[134,33,119,31],[134,34,119,32,"name"],[134,38,119,36],[134,39,119,37],[134,40,119,38,"screens"],[134,47,119,45],[134,51,119,49,"route"],[134,56,119,54],[134,57,119,55,"state"],[134,62,119,60],[134,67,119,65,"undefined"],[134,76,119,74],[134,78,119,76],[135,10,120,8,"hasNext"],[135,17,120,15],[135,20,120,18],[135,25,120,23],[136,8,121,6],[136,9,121,7],[136,15,121,13],[137,10,122,8,"index"],[137,15,122,13],[137,18,122,16],[137,25,122,23,"route"],[137,30,122,28],[137,31,122,29,"state"],[137,36,122,34],[137,37,122,35,"index"],[137,42,122,40],[137,47,122,45],[137,55,122,53],[137,58,122,56,"route"],[137,63,122,61],[137,64,122,62,"state"],[137,69,122,67],[137,70,122,68,"index"],[137,75,122,73],[137,78,122,76,"route"],[137,83,122,81],[137,84,122,82,"state"],[137,89,122,87],[137,90,122,88,"routes"],[137,96,122,94],[137,97,122,95,"length"],[137,103,122,101],[137,106,122,104],[137,107,122,105],[138,10,123,8],[138,16,123,14,"nextRoute"],[138,25,123,23],[138,28,123,26,"route"],[138,33,123,31],[138,34,123,32,"state"],[138,39,123,37],[138,40,123,38,"routes"],[138,46,123,44],[138,47,123,45,"index"],[138,52,123,50],[138,53,123,51],[139,10,124,8],[139,16,124,14,"nestedConfig"],[139,28,124,26],[139,31,124,29,"currentOptions"],[139,45,124,43],[139,46,124,44,"route"],[139,51,124,49],[139,52,124,50,"name"],[139,56,124,54],[139,57,124,55],[139,58,124,56,"screens"],[139,65,124,63],[141,10,126,8],[142,10,127,8],[142,14,127,12,"nestedConfig"],[142,26,127,24],[142,30,127,28,"nextRoute"],[142,39,127,37],[142,40,127,38,"name"],[142,44,127,42],[142,48,127,46,"nestedConfig"],[142,60,127,58],[142,62,127,60],[143,12,128,10,"route"],[143,17,128,15],[143,20,128,18,"nextRoute"],[143,29,128,27],[144,12,129,10,"currentOptions"],[144,26,129,24],[144,29,129,27,"nestedConfig"],[144,41,129,39],[145,10,130,8],[145,11,130,9],[145,17,130,15],[146,12,131,10],[147,12,132,10,"hasNext"],[147,19,132,17],[147,22,132,20],[147,27,132,25],[148,10,133,8],[149,8,134,6],[150,6,135,4],[151,6,136,4],[151,10,136,8,"currentOptions"],[151,24,136,22],[151,25,136,23,"route"],[151,30,136,28],[151,31,136,29,"name"],[151,35,136,33],[151,36,136,34],[151,41,136,39,"undefined"],[151,50,136,48],[151,52,136,50],[152,8,137,6,"path"],[152,12,137,10],[152,16,137,14,"parts"],[152,21,137,19],[152,23,137,21,"map"],[152,26,137,24],[152,27,137,25],[152,28,137,26],[153,10,138,8,"segment"],[153,17,138,15],[154,10,139,8,"param"],[154,15,139,13],[155,10,140,8,"optional"],[156,8,141,6],[156,9,141,7],[156,14,141,12],[157,10,142,8],[158,10,143,8],[159,10,144,8],[160,10,145,8],[160,14,145,12,"segment"],[160,21,145,19],[160,26,145,24],[160,29,145,27],[160,31,145,29],[161,12,146,10],[161,19,146,17,"route"],[161,24,146,22],[161,25,146,23,"name"],[161,29,146,27],[162,10,147,8],[164,10,149,8],[165,10,150,8],[165,14,150,12,"param"],[165,19,150,17],[165,21,150,19],[166,12,151,10],[166,18,151,16,"value"],[166,23,151,21],[166,26,151,24,"allParams"],[166,35,151,33],[166,36,151,34,"param"],[166,41,151,39],[166,42,151,40],[167,12,152,10],[167,16,152,14,"value"],[167,21,152,19],[167,26,152,24,"undefined"],[167,35,152,33],[167,39,152,37,"optional"],[167,47,152,45],[167,49,152,47],[168,14,153,12],[169,14,154,12],[169,21,154,19],[169,23,154,21],[170,12,155,10],[172,12,157,10],[173,12,158,10],[174,12,159,10],[174,19,159,17,"String"],[174,25,159,23],[174,26,159,24,"value"],[174,31,159,29],[174,32,159,30],[174,33,159,31,"replace"],[174,40,159,38],[174,41,159,39],[174,74,159,72],[174,76,159,74,"char"],[174,80,159,78],[174,84,159,82,"encodeURIComponent"],[174,102,159,100],[174,103,159,101,"char"],[174,107,159,105],[174,108,159,106],[174,109,159,107],[175,10,160,8],[176,10,161,8],[176,17,161,15,"encodeURIComponent"],[176,35,161,33],[176,36,161,34,"segment"],[176,43,161,41],[176,44,161,42],[177,8,162,6],[177,9,162,7],[177,10,162,8],[177,11,162,9,"join"],[177,15,162,13],[177,16,162,14],[177,19,162,17],[177,20,162,18],[178,6,163,4],[178,7,163,5],[178,13,163,11],[179,8,164,6,"path"],[179,12,164,10],[179,16,164,14,"encodeURIComponent"],[179,34,164,32],[179,35,164,33,"route"],[179,40,164,38],[179,41,164,39,"name"],[179,45,164,43],[179,46,164,44],[180,6,165,4],[181,6,166,4],[181,10,166,8],[181,11,166,9,"focusedParams"],[181,24,166,22],[181,28,166,26,"focusedRoute"],[181,40,166,38],[181,41,166,39,"params"],[181,47,166,45],[181,49,166,47],[182,8,167,6,"focusedParams"],[182,21,167,19],[182,24,167,22,"Object"],[182,30,167,28],[182,31,167,29,"fromEntries"],[182,42,167,40],[182,43,167,41,"Object"],[182,49,167,47],[182,50,167,48,"entries"],[182,57,167,55],[182,58,167,56,"focusedRoute"],[182,70,167,68],[182,71,167,69,"params"],[182,77,167,75],[182,78,167,76],[182,79,167,77,"map"],[182,82,167,80],[182,83,167,81],[182,84,167,82],[182,85,167,83,"key"],[182,88,167,86],[182,90,167,88,"value"],[182,95,167,93],[182,96,167,94],[182,101,167,99],[182,102,167,100,"key"],[182,105,167,103],[182,107,167,105,"String"],[182,113,167,111],[182,114,167,112,"value"],[182,119,167,117],[182,120,167,118],[182,121,167,119],[182,122,167,120],[182,123,167,121],[183,6,168,4],[184,6,169,4],[184,10,169,8,"route"],[184,15,169,13],[184,16,169,14,"state"],[184,21,169,19],[184,23,169,21],[185,8,170,6,"path"],[185,12,170,10],[185,16,170,14],[185,19,170,17],[186,6,171,4],[186,7,171,5],[186,13,171,11],[186,17,171,15,"focusedParams"],[186,30,171,28],[186,32,171,30],[187,8,172,6],[187,13,172,11],[187,19,172,17,"param"],[187,24,172,22],[187,28,172,26,"focusedParams"],[187,41,172,39],[187,43,172,41],[188,10,173,8],[188,14,173,12,"focusedParams"],[188,27,173,25],[188,28,173,26,"param"],[188,33,173,31],[188,34,173,32],[188,39,173,37],[188,50,173,48],[188,52,173,50],[189,12,174,10],[190,12,175,10],[190,19,175,17,"focusedParams"],[190,32,175,30],[190,33,175,31,"param"],[190,38,175,36],[190,39,175,37],[191,10,176,8],[192,8,177,6],[193,8,178,6],[193,14,178,12,"query"],[193,19,178,17],[193,22,178,20,"queryString"],[193,33,178,31],[193,34,178,32,"stringify"],[193,43,178,41],[193,44,178,42,"focusedParams"],[193,57,178,55],[193,59,178,57],[194,10,179,8,"sort"],[194,14,179,12],[194,16,179,14],[195,8,180,6],[195,9,180,7],[195,10,180,8],[196,8,181,6],[196,12,181,10,"query"],[196,17,181,15],[196,19,181,17],[197,10,182,8,"path"],[197,14,182,12],[197,18,182,16],[197,22,182,20,"query"],[197,27,182,25],[197,29,182,27],[198,8,183,6],[199,6,184,4],[200,6,185,4,"current"],[200,13,185,11],[200,16,185,14,"route"],[200,21,185,19],[200,22,185,20,"state"],[200,27,185,25],[201,4,186,2],[203,4,188,2],[204,4,189,2],[204,8,189,6,"options"],[204,15,189,13],[204,17,189,15,"path"],[204,21,189,19],[204,23,189,21],[205,6,190,4,"path"],[205,10,190,8],[205,13,190,11],[205,16,190,14,"options"],[205,23,190,21],[205,24,190,22,"path"],[205,28,190,26],[205,32,190,30,"path"],[205,36,190,34],[205,38,190,36],[206,4,191,2],[208,4,193,2],[209,4,194,2,"path"],[209,8,194,6],[209,11,194,9,"path"],[209,15,194,13],[209,16,194,14,"replace"],[209,23,194,21],[209,24,194,22],[209,30,194,28],[209,32,194,30],[209,35,194,33],[209,36,194,34],[210,4,195,2,"path"],[210,8,195,6],[210,11,195,9,"path"],[210,15,195,13],[210,16,195,14,"length"],[210,22,195,20],[210,25,195,23],[210,26,195,24],[210,29,195,27,"path"],[210,33,195,31],[210,34,195,32,"replace"],[210,41,195,39],[210,42,195,40],[210,47,195,45],[210,49,195,47],[210,51,195,49],[210,52,195,50],[210,55,195,53,"path"],[210,59,195,57],[212,4,197,2],[213,4,198,2],[214,4,199,2],[214,8,199,6],[214,9,199,7,"path"],[214,13,199,11],[214,14,199,12,"startsWith"],[214,24,199,22],[214,25,199,23],[214,28,199,26],[214,29,199,27],[214,31,199,29],[215,6,200,4,"path"],[215,10,200,8],[215,13,200,11],[215,17,200,15,"path"],[215,21,200,19],[215,23,200,21],[216,4,201,2],[217,4,202,2],[217,11,202,9,"path"],[217,15,202,13],[218,2,203,0],[219,2,204,0],[219,8,204,6,"createConfigItem"],[219,24,204,22],[219,27,204,25,"createConfigItem"],[219,28,204,26,"config"],[219,34,204,32],[219,36,204,34,"parentParts"],[219,47,204,45],[219,52,204,50],[220,4,205,2],[220,8,205,6],[220,15,205,13,"config"],[220,21,205,19],[220,26,205,24],[220,34,205,32],[220,36,205,34],[221,6,206,4],[222,6,207,4],[222,12,207,10,"parts"],[222,17,207,15],[222,20,207,18],[222,24,207,18,"getPatternParts"],[222,42,207,33],[222,43,207,33,"getPatternParts"],[222,58,207,33],[222,60,207,34,"config"],[222,66,207,40],[222,67,207,41],[223,6,208,4],[223,10,208,8,"parentParts"],[223,21,208,19],[223,23,208,21],[224,8,209,6],[224,15,209,13],[225,10,210,8,"parts"],[225,15,210,13],[225,17,210,15],[225,18,210,16],[225,21,210,19,"parentParts"],[225,32,210,30],[225,34,210,32],[225,37,210,35,"parts"],[225,42,210,40],[226,8,211,6],[226,9,211,7],[227,6,212,4],[228,6,213,4],[228,13,213,11],[229,8,214,6,"parts"],[230,6,215,4],[230,7,215,5],[231,4,216,2],[232,4,217,2],[232,8,217,6,"config"],[232,14,217,12],[232,15,217,13,"exact"],[232,20,217,18],[232,24,217,22,"config"],[232,30,217,28],[232,31,217,29,"path"],[232,35,217,33],[232,40,217,38,"undefined"],[232,49,217,47],[232,51,217,49],[233,6,218,4],[233,12,218,10],[233,16,218,14,"Error"],[233,21,218,19],[233,22,218,20],[233,172,218,170],[233,173,218,171],[234,4,219,2],[236,4,221,2],[237,4,222,2],[238,4,223,2],[238,10,223,8,"parts"],[238,15,223,13],[238,18,223,16,"config"],[238,24,223,22],[238,25,223,23,"exact"],[238,30,223,28],[238,35,223,33],[238,39,223,37],[238,42,223,40],[238,43,223,41],[238,47,223,45,"parentParts"],[238,58,223,56],[238,62,223,60],[238,64,223,62],[238,65,223,63],[238,67,223,65],[238,71,223,69,"config"],[238,77,223,75],[238,78,223,76,"path"],[238,82,223,80],[238,85,223,83],[238,89,223,83,"getPatternParts"],[238,107,223,98],[238,108,223,98,"getPatternParts"],[238,123,223,98],[238,125,223,99,"config"],[238,131,223,105],[238,132,223,106,"path"],[238,136,223,110],[238,137,223,111],[238,140,223,114],[238,142,223,116],[238,143,223,117],[238,144,223,118],[238,147,223,121,"config"],[238,153,223,127],[238,154,223,128,"path"],[238,158,223,132],[238,161,223,135],[238,165,223,135,"getPatternParts"],[238,183,223,150],[238,184,223,150,"getPatternParts"],[238,199,223,150],[238,201,223,151,"config"],[238,207,223,157],[238,208,223,158,"path"],[238,212,223,162],[238,213,223,163],[238,216,223,166,"undefined"],[238,225,223,175],[239,4,224,2],[239,10,224,8,"screens"],[239,17,224,15],[239,20,224,18,"config"],[239,26,224,24],[239,27,224,25,"screens"],[239,34,224,32],[239,37,224,35,"createNormalizedConfigs"],[239,60,224,58],[239,61,224,59,"config"],[239,67,224,65],[239,68,224,66,"screens"],[239,75,224,73],[239,77,224,75,"parts"],[239,82,224,80],[239,83,224,81],[239,86,224,84,"undefined"],[239,95,224,93],[240,4,225,2],[240,11,225,9],[241,6,226,4,"parts"],[241,11,226,9],[242,6,227,4,"stringify"],[242,15,227,13],[242,17,227,15,"config"],[242,23,227,21],[242,24,227,22,"stringify"],[242,33,227,31],[243,6,228,4,"screens"],[244,4,229,2],[244,5,229,3],[245,2,230,0],[245,3,230,1],[246,2,231,0],[246,8,231,6,"createNormalizedConfigs"],[246,31,231,29],[246,34,231,32,"createNormalizedConfigs"],[246,35,231,33,"options"],[246,42,231,40],[246,44,231,42,"parts"],[246,49,231,47],[246,54,231,52,"Object"],[246,60,231,58],[246,61,231,59,"fromEntries"],[246,72,231,70],[246,73,231,71,"Object"],[246,79,231,77],[246,80,231,78,"entries"],[246,87,231,85],[246,88,231,86,"options"],[246,95,231,93],[246,96,231,94],[246,97,231,95,"map"],[246,100,231,98],[246,101,231,99],[246,102,231,100],[246,103,231,101,"name"],[246,107,231,105],[246,109,231,107,"c"],[246,110,231,108],[246,111,231,109],[246,116,231,114],[247,4,232,2],[247,10,232,8,"result"],[247,16,232,14],[247,19,232,17,"createConfigItem"],[247,35,232,33],[247,36,232,34,"c"],[247,37,232,35],[247,39,232,37,"parts"],[247,44,232,42],[247,45,232,43],[248,4,233,2],[248,11,233,9],[248,12,233,10,"name"],[248,16,233,14],[248,18,233,16,"result"],[248,24,233,22],[248,25,233,23],[249,2,234,0],[249,3,234,1],[249,4,234,2],[249,5,234,3],[250,0,234,4],[250,3]],"functionMap":{"names":["<global>","getActiveRoute","getNormalizedConfigs","getPathFromState","Object.entries.map$argument_0","options.parts.find$argument_0","Object.entries.map.filter$argument_0","parts.forEach$argument_0","parts.map$argument_0","String.replace$argument_1","createConfigItem","createNormalizedConfigs"],"mappings":"AAA;uBCK;CDM;6BEE;CFO;OG+B;kFC2B;mDCG,0BD;SDU,SG,sBH;oBIY;WJU;yBKuB;0ECsB,gCD;OLG;iFCK,sCD;CHoC;yBUC;CV0B;gCWC,mEP;COG,EX"},"hasCjsExports":false},"type":"js/module"}]}