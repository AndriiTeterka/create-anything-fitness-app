{"dependencies":[{"name":"@react-navigation/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":227,"index":242}}],"key":"Wm75LgE4xYscVWo0KoLFlflJQCo=","exportNames":["*"],"imports":1}},{"name":"fast-deep-equal","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":243},"end":{"line":4,"column":38,"index":281}}],"key":"kmUMBZlZK8fLQ5NsiSOBIMofZVo=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":282},"end":{"line":5,"column":31,"index":313}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"./createMemoryHistory.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":314},"end":{"line":6,"column":63,"index":377}}],"key":"A5sfS3fG0SatnHOyroudNhe0KN0=","exportNames":["*"],"imports":1}},{"name":"./ServerContext.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":378},"end":{"line":7,"column":51,"index":429}}],"key":"+Hz1a4I7q6hCkPilSOm0KYt2/D0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      n[k] = e[k];\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"series\", {\n    enumerable: true,\n    get: function () {\n      return series;\n    }\n  });\n  exports.useLinking = useLinking;\n  var _reactNavigationCore = require(_dependencyMap[0], \"@react-navigation/core\");\n  var _fastDeepEqual = require(_dependencyMap[1], \"fast-deep-equal\");\n  var isEqual = _interopDefault(_fastDeepEqual);\n  var _react = require(_dependencyMap[2], \"react\");\n  var React = _interopNamespace(_react);\n  var _createMemoryHistoryJs = require(_dependencyMap[3], \"./createMemoryHistory.js\");\n  var _ServerContextJs = require(_dependencyMap[4], \"./ServerContext.js\");\n  /**\n   * Find the matching navigation state that changed between 2 navigation states\n   * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n   */\n  const findMatchingState = (a, b) => {\n    if (a === undefined || b === undefined || a.key !== b.key) {\n      return [undefined, undefined];\n    }\n\n    // Tab and drawer will have `history` property, but stack will have history in `routes`\n    const aHistoryLength = a.history ? a.history.length : a.routes.length;\n    const bHistoryLength = b.history ? b.history.length : b.routes.length;\n    const aRoute = a.routes[a.index];\n    const bRoute = b.routes[b.index];\n    const aChildState = aRoute.state;\n    const bChildState = bRoute.state;\n\n    // Stop here if this is the state object that changed:\n    // - history length is different\n    // - focused routes are different\n    // - one of them doesn't have child state\n    // - child state keys are different\n    if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n      return [a, b];\n    }\n    return findMatchingState(aChildState, bChildState);\n  };\n\n  /**\n   * Run async function in series as it's called.\n   */\n  const series = cb => {\n    let queue = Promise.resolve();\n    const callback = () => {\n      // eslint-disable-next-line promise/no-callback-in-promise\n      queue = queue.then(cb);\n    };\n    return callback;\n  };\n  const linkingHandlers = [];\n  function useLinking(ref, {\n    enabled = true,\n    config,\n    getStateFromPath = _reactNavigationCore.getStateFromPath,\n    getPathFromState = _reactNavigationCore.getPathFromState,\n    getActionFromState = _reactNavigationCore.getActionFromState\n  }, onUnhandledLinking) {\n    const independent = (0, _reactNavigationCore.useNavigationIndependentTree)();\n    React.useEffect(() => {\n      if (process.env.NODE_ENV === 'production') {\n        return undefined;\n      }\n      if (independent) {\n        return undefined;\n      }\n      if (enabled !== false && linkingHandlers.length) {\n        console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n      }\n      const handler = Symbol();\n      if (enabled !== false) {\n        linkingHandlers.push(handler);\n      }\n      return () => {\n        const index = linkingHandlers.indexOf(handler);\n        if (index > -1) {\n          linkingHandlers.splice(index, 1);\n        }\n      };\n    }, [enabled, independent]);\n    const [history] = React.useState(_createMemoryHistoryJs.createMemoryHistory);\n\n    // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n    // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n    // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n    const enabledRef = React.useRef(enabled);\n    const configRef = React.useRef(config);\n    const getStateFromPathRef = React.useRef(getStateFromPath);\n    const getPathFromStateRef = React.useRef(getPathFromState);\n    const getActionFromStateRef = React.useRef(getActionFromState);\n    React.useEffect(() => {\n      enabledRef.current = enabled;\n      configRef.current = config;\n      getStateFromPathRef.current = getStateFromPath;\n      getPathFromStateRef.current = getPathFromState;\n      getActionFromStateRef.current = getActionFromState;\n    });\n    const validateRoutesNotExistInRootState = React.useCallback(state => {\n      const navigation = ref.current;\n      const rootState = navigation?.getRootState();\n      // Make sure that the routes in the state exist in the root navigator\n      // Otherwise there's an error in the linking configuration\n      return state?.routes.some(r => !rootState?.routeNames.includes(r.name));\n    }, [ref]);\n    const server = React.useContext(_ServerContextJs.ServerContext);\n    const getInitialState = React.useCallback(() => {\n      let value;\n      if (enabledRef.current) {\n        const location = server?.location ?? (typeof window !== 'undefined' ? window.location : undefined);\n        const path = location ? location.pathname + location.search : undefined;\n        if (path) {\n          value = getStateFromPathRef.current(path, configRef.current);\n        }\n\n        // If the link were handled, it gets cleared in NavigationContainer\n        onUnhandledLinking(path);\n      }\n      const thenable = {\n        then(onfulfilled) {\n          return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n        },\n        catch() {\n          return thenable;\n        }\n      };\n      return thenable;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const previousIndexRef = React.useRef(undefined);\n    const previousStateRef = React.useRef(undefined);\n    const pendingPopStatePathRef = React.useRef(undefined);\n    React.useEffect(() => {\n      previousIndexRef.current = history.index;\n      return history.listen(() => {\n        const navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        const {\n          location\n        } = window;\n        const path = location.pathname + location.search;\n        const index = history.index;\n        const previousIndex = previousIndexRef.current ?? 0;\n        previousIndexRef.current = index;\n        pendingPopStatePathRef.current = path;\n\n        // When browser back/forward is clicked, we first need to check if state object for this index exists\n        // If it does we'll reset to that state object\n        // Otherwise, we'll handle it like a regular deep link\n        const record = history.get(index);\n        if (record?.path === path && record?.state) {\n          navigation.resetRoot(record.state);\n          return;\n        }\n        const state = getStateFromPathRef.current(path, configRef.current);\n\n        // We should only dispatch an action when going forward\n        // Otherwise the action will likely add items to history, which would mess things up\n        if (state) {\n          // If the link were handled, it gets cleared in NavigationContainer\n          onUnhandledLinking(path);\n          // Make sure that the routes in the state exist in the root navigator\n          // Otherwise there's an error in the linking configuration\n          if (validateRoutesNotExistInRootState(state)) {\n            return;\n          }\n          if (index > previousIndex) {\n            const action = getActionFromStateRef.current(state, configRef.current);\n            if (action !== undefined) {\n              try {\n                navigation.dispatch(action);\n              } catch (e) {\n                // Ignore any errors from deep linking.\n                // This could happen in case of malformed links, navigation object not being initialized etc.\n                console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ? e.message : e}`);\n              }\n            } else {\n              navigation.resetRoot(state);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          // if current path didn't return any state, we should revert to initial state\n          navigation.resetRoot(state);\n        }\n      });\n    }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n    React.useEffect(() => {\n      if (!enabled) {\n        return;\n      }\n      const getPathForRoute = (route, state) => {\n        let path;\n\n        // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n        // This makes sure that we preserve the original URL for wildcard routes\n        if (route?.path) {\n          const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n          if (stateForPath) {\n            const focusedRoute = (0, _reactNavigationCore.findFocusedRoute)(stateForPath);\n            if (focusedRoute && focusedRoute.name === route.name && (0, isEqual.default)(focusedRoute.params, route.params)) {\n              path = route.path;\n            }\n          }\n        }\n        if (path == null) {\n          path = getPathFromStateRef.current(state, configRef.current);\n        }\n        const previousRoute = previousStateRef.current ? (0, _reactNavigationCore.findFocusedRoute)(previousStateRef.current) : undefined;\n\n        // Preserve the hash if the route didn't change\n        if (previousRoute && route && 'key' in previousRoute && 'key' in route && previousRoute.key === route.key) {\n          path = path + location.hash;\n        }\n        return path;\n      };\n      if (ref.current) {\n        // We need to record the current metadata on the first render if they aren't set\n        // This will allow the initial state to be in the history entry\n        const state = ref.current.getRootState();\n        if (state) {\n          const route = (0, _reactNavigationCore.findFocusedRoute)(state);\n          const path = getPathForRoute(route, state);\n          if (previousStateRef.current === undefined) {\n            previousStateRef.current = state;\n          }\n          history.replace({\n            path,\n            state\n          });\n        }\n      }\n      const onStateChange = async () => {\n        const navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        const previousState = previousStateRef.current;\n        const state = navigation.getRootState();\n\n        // root state may not available, for example when root navigators switch inside the container\n        if (!state) {\n          return;\n        }\n        const pendingPath = pendingPopStatePathRef.current;\n        const route = (0, _reactNavigationCore.findFocusedRoute)(state);\n        const path = getPathForRoute(route, state);\n        previousStateRef.current = state;\n        pendingPopStatePathRef.current = undefined;\n\n        // To detect the kind of state change, we need to:\n        // - Find the common focused navigation state in previous and current state\n        // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n        // - If no common focused navigation state found, it's a replace\n        const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n        if (previousFocusedState && focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath) {\n          const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n          if (historyDelta > 0) {\n            // If history length is increased, we should pushState\n            // Note that path might not actually change here, for example, drawer open should pushState\n            history.push({\n              path,\n              state\n            });\n          } else if (historyDelta < 0) {\n            // If history length is decreased, i.e. entries were removed, we want to go back\n\n            const nextIndex = history.backIndex({\n              path\n            });\n            const currentIndex = history.index;\n            try {\n              if (nextIndex !== -1 && nextIndex < currentIndex &&\n              // We should only go back if the entry exists and it's less than current index\n              history.get(nextIndex)) {\n                // An existing entry for this path exists and it's less than current index, go back to that\n                await history.go(nextIndex - currentIndex);\n              } else {\n                // We couldn't find an existing entry to go back to, so we'll go back by the delta\n                // This won't be correct if multiple routes were pushed in one go before\n                // Usually this shouldn't happen and this is a fallback for that\n                await history.go(historyDelta);\n              }\n\n              // Store the updated state as well as fix the path if incorrect\n              history.replace({\n                path,\n                state\n              });\n            } catch (e) {\n              // The navigation was interrupted\n            }\n          } else {\n            // If history length is unchanged, we want to replaceState\n            history.replace({\n              path,\n              state\n            });\n          }\n        } else {\n          // If no common navigation state was found, assume it's a replace\n          // This would happen if the user did a reset/conditionally changed navigators\n          history.replace({\n            path,\n            state\n          });\n        }\n      };\n\n      // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n      // This could happen since `history.go(n)` is asynchronous\n      // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n      return ref.current?.addListener('state', series(onStateChange));\n    }, [enabled, history, ref]);\n    return {\n      getInitialState\n    };\n  }\n});","lineCount":347,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13],[7,11,1,13,"_interopDefault"],[7,27,1,13,"e"],[7,28,1,13],[8,4,1,13],[8,11,1,13,"e"],[8,12,1,13],[8,16,1,13,"e"],[8,17,1,13],[8,18,1,13,"__esModule"],[8,28,1,13],[8,31,1,13,"e"],[8,32,1,13],[9,6,1,13,"default"],[9,13,1,13],[9,15,1,13,"e"],[10,4,1,13],[11,2,1,13],[12,2,1,13],[12,11,1,13,"_interopNamespace"],[12,29,1,13,"e"],[12,30,1,13],[13,4,1,13],[13,8,1,13,"e"],[13,9,1,13],[13,13,1,13,"e"],[13,14,1,13],[13,15,1,13,"__esModule"],[13,25,1,13],[13,34,1,13,"e"],[13,35,1,13],[14,4,1,13],[14,8,1,13,"n"],[14,9,1,13],[15,4,1,13],[15,8,1,13,"e"],[15,9,1,13],[15,11,1,13,"Object"],[15,17,1,13],[15,18,1,13,"keys"],[15,22,1,13],[15,23,1,13,"e"],[15,24,1,13],[15,26,1,13,"forEach"],[15,33,1,13],[15,44,1,13,"k"],[15,45,1,13],[16,6,1,13,"n"],[16,7,1,13],[16,8,1,13,"k"],[16,9,1,13],[16,13,1,13,"e"],[16,14,1,13],[16,15,1,13,"k"],[16,16,1,13],[17,4,1,13],[18,4,1,13,"n"],[18,5,1,13],[18,6,1,13,"default"],[18,13,1,13],[18,16,1,13,"e"],[18,17,1,13],[19,4,1,13],[19,11,1,13,"n"],[19,12,1,13],[20,2,1,13],[21,2,39,0,"Object"],[21,8,39,0],[21,9,39,0,"defineProperty"],[21,23,39,0],[21,24,39,0,"exports"],[21,31,39,0],[22,4,39,0,"enumerable"],[22,14,39,0],[23,4,39,0,"get"],[23,7,39,0],[23,18,39,0,"get"],[23,19,39,0],[24,6,39,0],[24,13,39,0,"series"],[24,19,39,0],[25,4,39,0],[26,2,39,0],[27,2,48,0,"exports"],[27,9,48,0],[27,10,48,0,"useLinking"],[27,20,48,0],[27,23,48,0,"useLinking"],[27,33,48,0],[28,2,3,0],[28,6,3,0,"_reactNavigationCore"],[28,26,3,0],[28,29,3,0,"require"],[28,36,3,0],[28,37,3,0,"_dependencyMap"],[28,51,3,0],[29,2,4,0],[29,6,4,0,"_fastDeepEqual"],[29,20,4,0],[29,23,4,0,"require"],[29,30,4,0],[29,31,4,0,"_dependencyMap"],[29,45,4,0],[30,2,4,0],[30,6,4,0,"isEqual"],[30,13,4,0],[30,16,4,0,"_interopDefault"],[30,31,4,0],[30,32,4,0,"_fastDeepEqual"],[30,46,4,0],[31,2,5,0],[31,6,5,0,"_react"],[31,12,5,0],[31,15,5,0,"require"],[31,22,5,0],[31,23,5,0,"_dependencyMap"],[31,37,5,0],[32,2,5,0],[32,6,5,0,"React"],[32,11,5,0],[32,14,5,0,"_interopNamespace"],[32,31,5,0],[32,32,5,0,"_react"],[32,38,5,0],[33,2,6,0],[33,6,6,0,"_createMemoryHistoryJs"],[33,28,6,0],[33,31,6,0,"require"],[33,38,6,0],[33,39,6,0,"_dependencyMap"],[33,53,6,0],[34,2,7,0],[34,6,7,0,"_ServerContextJs"],[34,22,7,0],[34,25,7,0,"require"],[34,32,7,0],[34,33,7,0,"_dependencyMap"],[34,47,7,0],[35,2,8,0],[36,0,9,0],[37,0,10,0],[38,0,11,0],[39,2,12,0],[39,8,12,6,"findMatchingState"],[39,25,12,23],[39,28,12,26,"findMatchingState"],[39,29,12,27,"a"],[39,30,12,28],[39,32,12,30,"b"],[39,33,12,31],[39,38,12,36],[40,4,13,2],[40,8,13,6,"a"],[40,9,13,7],[40,14,13,12,"undefined"],[40,23,13,21],[40,27,13,25,"b"],[40,28,13,26],[40,33,13,31,"undefined"],[40,42,13,40],[40,46,13,44,"a"],[40,47,13,45],[40,48,13,46,"key"],[40,51,13,49],[40,56,13,54,"b"],[40,57,13,55],[40,58,13,56,"key"],[40,61,13,59],[40,63,13,61],[41,6,14,4],[41,13,14,11],[41,14,14,12,"undefined"],[41,23,14,21],[41,25,14,23,"undefined"],[41,34,14,32],[41,35,14,33],[42,4,15,2],[44,4,17,2],[45,4,18,2],[45,10,18,8,"aHistoryLength"],[45,24,18,22],[45,27,18,25,"a"],[45,28,18,26],[45,29,18,27,"history"],[45,36,18,34],[45,39,18,37,"a"],[45,40,18,38],[45,41,18,39,"history"],[45,48,18,46],[45,49,18,47,"length"],[45,55,18,53],[45,58,18,56,"a"],[45,59,18,57],[45,60,18,58,"routes"],[45,66,18,64],[45,67,18,65,"length"],[45,73,18,71],[46,4,19,2],[46,10,19,8,"bHistoryLength"],[46,24,19,22],[46,27,19,25,"b"],[46,28,19,26],[46,29,19,27,"history"],[46,36,19,34],[46,39,19,37,"b"],[46,40,19,38],[46,41,19,39,"history"],[46,48,19,46],[46,49,19,47,"length"],[46,55,19,53],[46,58,19,56,"b"],[46,59,19,57],[46,60,19,58,"routes"],[46,66,19,64],[46,67,19,65,"length"],[46,73,19,71],[47,4,20,2],[47,10,20,8,"aRoute"],[47,16,20,14],[47,19,20,17,"a"],[47,20,20,18],[47,21,20,19,"routes"],[47,27,20,25],[47,28,20,26,"a"],[47,29,20,27],[47,30,20,28,"index"],[47,35,20,33],[47,36,20,34],[48,4,21,2],[48,10,21,8,"bRoute"],[48,16,21,14],[48,19,21,17,"b"],[48,20,21,18],[48,21,21,19,"routes"],[48,27,21,25],[48,28,21,26,"b"],[48,29,21,27],[48,30,21,28,"index"],[48,35,21,33],[48,36,21,34],[49,4,22,2],[49,10,22,8,"aChildState"],[49,21,22,19],[49,24,22,22,"aRoute"],[49,30,22,28],[49,31,22,29,"state"],[49,36,22,34],[50,4,23,2],[50,10,23,8,"bChildState"],[50,21,23,19],[50,24,23,22,"bRoute"],[50,30,23,28],[50,31,23,29,"state"],[50,36,23,34],[52,4,25,2],[53,4,26,2],[54,4,27,2],[55,4,28,2],[56,4,29,2],[57,4,30,2],[57,8,30,6,"aHistoryLength"],[57,22,30,20],[57,27,30,25,"bHistoryLength"],[57,41,30,39],[57,45,30,43,"aRoute"],[57,51,30,49],[57,52,30,50,"key"],[57,55,30,53],[57,60,30,58,"bRoute"],[57,66,30,64],[57,67,30,65,"key"],[57,70,30,68],[57,74,30,72,"aChildState"],[57,85,30,83],[57,90,30,88,"undefined"],[57,99,30,97],[57,103,30,101,"bChildState"],[57,114,30,112],[57,119,30,117,"undefined"],[57,128,30,126],[57,132,30,130,"aChildState"],[57,143,30,141],[57,144,30,142,"key"],[57,147,30,145],[57,152,30,150,"bChildState"],[57,163,30,161],[57,164,30,162,"key"],[57,167,30,165],[57,169,30,167],[58,6,31,4],[58,13,31,11],[58,14,31,12,"a"],[58,15,31,13],[58,17,31,15,"b"],[58,18,31,16],[58,19,31,17],[59,4,32,2],[60,4,33,2],[60,11,33,9,"findMatchingState"],[60,28,33,26],[60,29,33,27,"aChildState"],[60,40,33,38],[60,42,33,40,"bChildState"],[60,53,33,51],[60,54,33,52],[61,2,34,0],[61,3,34,1],[63,2,36,0],[64,0,37,0],[65,0,38,0],[66,2,39,7],[66,8,39,13,"series"],[66,14,39,19],[66,17,39,22,"cb"],[66,19,39,24],[66,23,39,28],[67,4,40,2],[67,8,40,6,"queue"],[67,13,40,11],[67,16,40,14,"Promise"],[67,23,40,21],[67,24,40,22,"resolve"],[67,31,40,29],[67,32,40,30],[67,33,40,31],[68,4,41,2],[68,10,41,8,"callback"],[68,18,41,16],[68,21,41,19,"callback"],[68,22,41,19],[68,27,41,25],[69,6,42,4],[70,6,43,4,"queue"],[70,11,43,9],[70,14,43,12,"queue"],[70,19,43,17],[70,20,43,18,"then"],[70,24,43,22],[70,25,43,23,"cb"],[70,27,43,25],[70,28,43,26],[71,4,44,2],[71,5,44,3],[72,4,45,2],[72,11,45,9,"callback"],[72,19,45,17],[73,2,46,0],[73,3,46,1],[74,2,47,0],[74,8,47,6,"linkingHandlers"],[74,23,47,21],[74,26,47,24],[74,28,47,26],[75,2,48,7],[75,11,48,16,"useLinking"],[75,21,48,26,"useLinking"],[75,22,48,27,"ref"],[75,25,48,30],[75,27,48,32],[76,4,49,2,"enabled"],[76,11,49,9],[76,14,49,12],[76,18,49,16],[77,4,50,2,"config"],[77,10,50,8],[78,4,51,2,"getStateFromPath"],[78,20,51,18],[78,23,51,21,"getStateFromPathDefault"],[78,43,51,44],[78,44,51,44,"getStateFromPath"],[78,60,51,44],[79,4,52,2,"getPathFromState"],[79,20,52,18],[79,23,52,21,"getPathFromStateDefault"],[79,43,52,44],[79,44,52,44,"getPathFromState"],[79,60,52,44],[80,4,53,2,"getActionFromState"],[80,22,53,20],[80,25,53,23,"getActionFromStateDefault"],[80,45,53,48],[80,46,53,48,"getActionFromState"],[81,2,54,0],[81,3,54,1],[81,5,54,3,"onUnhandledLinking"],[81,23,54,21],[81,25,54,23],[82,4,55,2],[82,10,55,8,"independent"],[82,21,55,19],[82,24,55,22],[82,28,55,22,"useNavigationIndependentTree"],[82,48,55,50],[82,49,55,50,"useNavigationIndependentTree"],[82,77,55,50],[82,79,55,51],[82,80,55,52],[83,4,56,2,"React"],[83,9,56,7],[83,10,56,8,"useEffect"],[83,19,56,17],[83,20,56,18],[83,26,56,24],[84,6,57,4],[84,10,57,8,"process"],[84,17,57,15],[84,18,57,16,"env"],[84,21,57,19],[84,22,57,20,"NODE_ENV"],[84,30,57,28],[84,35,57,33],[84,47,57,45],[84,49,57,47],[85,8,58,6],[85,15,58,13,"undefined"],[85,24,58,22],[86,6,59,4],[87,6,60,4],[87,10,60,8,"independent"],[87,21,60,19],[87,23,60,21],[88,8,61,6],[88,15,61,13,"undefined"],[88,24,61,22],[89,6,62,4],[90,6,63,4],[90,10,63,8,"enabled"],[90,17,63,15],[90,22,63,20],[90,27,63,25],[90,31,63,29,"linkingHandlers"],[90,46,63,44],[90,47,63,45,"length"],[90,53,63,51],[90,55,63,53],[91,8,64,6,"console"],[91,15,64,13],[91,16,64,14,"error"],[91,21,64,19],[91,22,64,20],[91,23,64,21],[91,196,64,194],[91,198,64,196],[91,285,64,283],[91,287,64,285],[91,347,64,345],[91,348,64,346],[91,349,64,347,"join"],[91,353,64,351],[91,354,64,352],[91,358,64,356],[91,359,64,357],[91,360,64,358,"trim"],[91,364,64,362],[91,365,64,363],[91,366,64,364],[91,367,64,365],[92,6,65,4],[93,6,66,4],[93,12,66,10,"handler"],[93,19,66,17],[93,22,66,20,"Symbol"],[93,28,66,26],[93,29,66,27],[93,30,66,28],[94,6,67,4],[94,10,67,8,"enabled"],[94,17,67,15],[94,22,67,20],[94,27,67,25],[94,29,67,27],[95,8,68,6,"linkingHandlers"],[95,23,68,21],[95,24,68,22,"push"],[95,28,68,26],[95,29,68,27,"handler"],[95,36,68,34],[95,37,68,35],[96,6,69,4],[97,6,70,4],[97,13,70,11],[97,19,70,17],[98,8,71,6],[98,14,71,12,"index"],[98,19,71,17],[98,22,71,20,"linkingHandlers"],[98,37,71,35],[98,38,71,36,"indexOf"],[98,45,71,43],[98,46,71,44,"handler"],[98,53,71,51],[98,54,71,52],[99,8,72,6],[99,12,72,10,"index"],[99,17,72,15],[99,20,72,18],[99,21,72,19],[99,22,72,20],[99,24,72,22],[100,10,73,8,"linkingHandlers"],[100,25,73,23],[100,26,73,24,"splice"],[100,32,73,30],[100,33,73,31,"index"],[100,38,73,36],[100,40,73,38],[100,41,73,39],[100,42,73,40],[101,8,74,6],[102,6,75,4],[102,7,75,5],[103,4,76,2],[103,5,76,3],[103,7,76,5],[103,8,76,6,"enabled"],[103,15,76,13],[103,17,76,15,"independent"],[103,28,76,26],[103,29,76,27],[103,30,76,28],[104,4,77,2],[104,10,77,8],[104,11,77,9,"history"],[104,18,77,16],[104,19,77,17],[104,22,77,20,"React"],[104,27,77,25],[104,28,77,26,"useState"],[104,36,77,34],[104,37,77,35,"createMemoryHistory"],[104,59,77,54],[104,60,77,54,"createMemoryHistory"],[104,79,77,54],[104,80,77,55],[106,4,79,2],[107,4,80,2],[108,4,81,2],[109,4,82,2],[109,10,82,8,"enabledRef"],[109,20,82,18],[109,23,82,21,"React"],[109,28,82,26],[109,29,82,27,"useRef"],[109,35,82,33],[109,36,82,34,"enabled"],[109,43,82,41],[109,44,82,42],[110,4,83,2],[110,10,83,8,"configRef"],[110,19,83,17],[110,22,83,20,"React"],[110,27,83,25],[110,28,83,26,"useRef"],[110,34,83,32],[110,35,83,33,"config"],[110,41,83,39],[110,42,83,40],[111,4,84,2],[111,10,84,8,"getStateFromPathRef"],[111,29,84,27],[111,32,84,30,"React"],[111,37,84,35],[111,38,84,36,"useRef"],[111,44,84,42],[111,45,84,43,"getStateFromPath"],[111,61,84,59],[111,62,84,60],[112,4,85,2],[112,10,85,8,"getPathFromStateRef"],[112,29,85,27],[112,32,85,30,"React"],[112,37,85,35],[112,38,85,36,"useRef"],[112,44,85,42],[112,45,85,43,"getPathFromState"],[112,61,85,59],[112,62,85,60],[113,4,86,2],[113,10,86,8,"getActionFromStateRef"],[113,31,86,29],[113,34,86,32,"React"],[113,39,86,37],[113,40,86,38,"useRef"],[113,46,86,44],[113,47,86,45,"getActionFromState"],[113,65,86,63],[113,66,86,64],[114,4,87,2,"React"],[114,9,87,7],[114,10,87,8,"useEffect"],[114,19,87,17],[114,20,87,18],[114,26,87,24],[115,6,88,4,"enabledRef"],[115,16,88,14],[115,17,88,15,"current"],[115,24,88,22],[115,27,88,25,"enabled"],[115,34,88,32],[116,6,89,4,"configRef"],[116,15,89,13],[116,16,89,14,"current"],[116,23,89,21],[116,26,89,24,"config"],[116,32,89,30],[117,6,90,4,"getStateFromPathRef"],[117,25,90,23],[117,26,90,24,"current"],[117,33,90,31],[117,36,90,34,"getStateFromPath"],[117,52,90,50],[118,6,91,4,"getPathFromStateRef"],[118,25,91,23],[118,26,91,24,"current"],[118,33,91,31],[118,36,91,34,"getPathFromState"],[118,52,91,50],[119,6,92,4,"getActionFromStateRef"],[119,27,92,25],[119,28,92,26,"current"],[119,35,92,33],[119,38,92,36,"getActionFromState"],[119,56,92,54],[120,4,93,2],[120,5,93,3],[120,6,93,4],[121,4,94,2],[121,10,94,8,"validateRoutesNotExistInRootState"],[121,43,94,41],[121,46,94,44,"React"],[121,51,94,49],[121,52,94,50,"useCallback"],[121,63,94,61],[121,64,94,62,"state"],[121,69,94,67],[121,73,94,71],[122,6,95,4],[122,12,95,10,"navigation"],[122,22,95,20],[122,25,95,23,"ref"],[122,28,95,26],[122,29,95,27,"current"],[122,36,95,34],[123,6,96,4],[123,12,96,10,"rootState"],[123,21,96,19],[123,24,96,22,"navigation"],[123,34,96,32],[123,36,96,34,"getRootState"],[123,48,96,46],[123,49,96,47],[123,50,96,48],[124,6,97,4],[125,6,98,4],[126,6,99,4],[126,13,99,11,"state"],[126,18,99,16],[126,20,99,18,"routes"],[126,26,99,24],[126,27,99,25,"some"],[126,31,99,29],[126,32,99,30,"r"],[126,33,99,31],[126,37,99,35],[126,38,99,36,"rootState"],[126,47,99,45],[126,49,99,47,"routeNames"],[126,59,99,57],[126,60,99,58,"includes"],[126,68,99,66],[126,69,99,67,"r"],[126,70,99,68],[126,71,99,69,"name"],[126,75,99,73],[126,76,99,74],[126,77,99,75],[127,4,100,2],[127,5,100,3],[127,7,100,5],[127,8,100,6,"ref"],[127,11,100,9],[127,12,100,10],[127,13,100,11],[128,4,101,2],[128,10,101,8,"server"],[128,16,101,14],[128,19,101,17,"React"],[128,24,101,22],[128,25,101,23,"useContext"],[128,35,101,33],[128,36,101,34,"ServerContext"],[128,52,101,47],[128,53,101,47,"ServerContext"],[128,66,101,47],[128,67,101,48],[129,4,102,2],[129,10,102,8,"getInitialState"],[129,25,102,23],[129,28,102,26,"React"],[129,33,102,31],[129,34,102,32,"useCallback"],[129,45,102,43],[129,46,102,44],[129,52,102,50],[130,6,103,4],[130,10,103,8,"value"],[130,15,103,13],[131,6,104,4],[131,10,104,8,"enabledRef"],[131,20,104,18],[131,21,104,19,"current"],[131,28,104,26],[131,30,104,28],[132,8,105,6],[132,14,105,12,"location"],[132,22,105,20],[132,25,105,23,"server"],[132,31,105,29],[132,33,105,31,"location"],[132,41,105,39],[132,46,105,44],[132,53,105,51,"window"],[132,59,105,57],[132,64,105,62],[132,75,105,73],[132,78,105,76,"window"],[132,84,105,82],[132,85,105,83,"location"],[132,93,105,91],[132,96,105,94,"undefined"],[132,105,105,103],[132,106,105,104],[133,8,106,6],[133,14,106,12,"path"],[133,18,106,16],[133,21,106,19,"location"],[133,29,106,27],[133,32,106,30,"location"],[133,40,106,38],[133,41,106,39,"pathname"],[133,49,106,47],[133,52,106,50,"location"],[133,60,106,58],[133,61,106,59,"search"],[133,67,106,65],[133,70,106,68,"undefined"],[133,79,106,77],[134,8,107,6],[134,12,107,10,"path"],[134,16,107,14],[134,18,107,16],[135,10,108,8,"value"],[135,15,108,13],[135,18,108,16,"getStateFromPathRef"],[135,37,108,35],[135,38,108,36,"current"],[135,45,108,43],[135,46,108,44,"path"],[135,50,108,48],[135,52,108,50,"configRef"],[135,61,108,59],[135,62,108,60,"current"],[135,69,108,67],[135,70,108,68],[136,8,109,6],[138,8,111,6],[139,8,112,6,"onUnhandledLinking"],[139,26,112,24],[139,27,112,25,"path"],[139,31,112,29],[139,32,112,30],[140,6,113,4],[141,6,114,4],[141,12,114,10,"thenable"],[141,20,114,18],[141,23,114,21],[142,8,115,6,"then"],[142,12,115,10,"then"],[142,13,115,11,"onfulfilled"],[142,24,115,22],[142,26,115,24],[143,10,116,8],[143,17,116,15,"Promise"],[143,24,116,22],[143,25,116,23,"resolve"],[143,32,116,30],[143,33,116,31,"onfulfilled"],[143,44,116,42],[143,47,116,45,"onfulfilled"],[143,58,116,56],[143,59,116,57,"value"],[143,64,116,62],[143,65,116,63],[143,68,116,66,"value"],[143,73,116,71],[143,74,116,72],[144,8,117,6],[144,9,117,7],[145,8,118,6,"catch"],[145,13,118,11,"catch"],[145,14,118,11],[145,16,118,14],[146,10,119,8],[146,17,119,15,"thenable"],[146,25,119,23],[147,8,120,6],[148,6,121,4],[148,7,121,5],[149,6,122,4],[149,13,122,11,"thenable"],[149,21,122,19],[150,6,123,4],[151,4,124,2],[151,5,124,3],[151,7,124,5],[151,9,124,7],[151,10,124,8],[152,4,125,2],[152,10,125,8,"previousIndexRef"],[152,26,125,24],[152,29,125,27,"React"],[152,34,125,32],[152,35,125,33,"useRef"],[152,41,125,39],[152,42,125,40,"undefined"],[152,51,125,49],[152,52,125,50],[153,4,126,2],[153,10,126,8,"previousStateRef"],[153,26,126,24],[153,29,126,27,"React"],[153,34,126,32],[153,35,126,33,"useRef"],[153,41,126,39],[153,42,126,40,"undefined"],[153,51,126,49],[153,52,126,50],[154,4,127,2],[154,10,127,8,"pendingPopStatePathRef"],[154,32,127,30],[154,35,127,33,"React"],[154,40,127,38],[154,41,127,39,"useRef"],[154,47,127,45],[154,48,127,46,"undefined"],[154,57,127,55],[154,58,127,56],[155,4,128,2,"React"],[155,9,128,7],[155,10,128,8,"useEffect"],[155,19,128,17],[155,20,128,18],[155,26,128,24],[156,6,129,4,"previousIndexRef"],[156,22,129,20],[156,23,129,21,"current"],[156,30,129,28],[156,33,129,31,"history"],[156,40,129,38],[156,41,129,39,"index"],[156,46,129,44],[157,6,130,4],[157,13,130,11,"history"],[157,20,130,18],[157,21,130,19,"listen"],[157,27,130,25],[157,28,130,26],[157,34,130,32],[158,8,131,6],[158,14,131,12,"navigation"],[158,24,131,22],[158,27,131,25,"ref"],[158,30,131,28],[158,31,131,29,"current"],[158,38,131,36],[159,8,132,6],[159,12,132,10],[159,13,132,11,"navigation"],[159,23,132,21],[159,27,132,25],[159,28,132,26,"enabled"],[159,35,132,33],[159,37,132,35],[160,10,133,8],[161,8,134,6],[162,8,135,6],[162,14,135,12],[163,10,136,8,"location"],[164,8,137,6],[164,9,137,7],[164,12,137,10,"window"],[164,18,137,16],[165,8,138,6],[165,14,138,12,"path"],[165,18,138,16],[165,21,138,19,"location"],[165,29,138,27],[165,30,138,28,"pathname"],[165,38,138,36],[165,41,138,39,"location"],[165,49,138,47],[165,50,138,48,"search"],[165,56,138,54],[166,8,139,6],[166,14,139,12,"index"],[166,19,139,17],[166,22,139,20,"history"],[166,29,139,27],[166,30,139,28,"index"],[166,35,139,33],[167,8,140,6],[167,14,140,12,"previousIndex"],[167,27,140,25],[167,30,140,28,"previousIndexRef"],[167,46,140,44],[167,47,140,45,"current"],[167,54,140,52],[167,58,140,56],[167,59,140,57],[168,8,141,6,"previousIndexRef"],[168,24,141,22],[168,25,141,23,"current"],[168,32,141,30],[168,35,141,33,"index"],[168,40,141,38],[169,8,142,6,"pendingPopStatePathRef"],[169,30,142,28],[169,31,142,29,"current"],[169,38,142,36],[169,41,142,39,"path"],[169,45,142,43],[171,8,144,6],[172,8,145,6],[173,8,146,6],[174,8,147,6],[174,14,147,12,"record"],[174,20,147,18],[174,23,147,21,"history"],[174,30,147,28],[174,31,147,29,"get"],[174,34,147,32],[174,35,147,33,"index"],[174,40,147,38],[174,41,147,39],[175,8,148,6],[175,12,148,10,"record"],[175,18,148,16],[175,20,148,18,"path"],[175,24,148,22],[175,29,148,27,"path"],[175,33,148,31],[175,37,148,35,"record"],[175,43,148,41],[175,45,148,43,"state"],[175,50,148,48],[175,52,148,50],[176,10,149,8,"navigation"],[176,20,149,18],[176,21,149,19,"resetRoot"],[176,30,149,28],[176,31,149,29,"record"],[176,37,149,35],[176,38,149,36,"state"],[176,43,149,41],[176,44,149,42],[177,10,150,8],[178,8,151,6],[179,8,152,6],[179,14,152,12,"state"],[179,19,152,17],[179,22,152,20,"getStateFromPathRef"],[179,41,152,39],[179,42,152,40,"current"],[179,49,152,47],[179,50,152,48,"path"],[179,54,152,52],[179,56,152,54,"configRef"],[179,65,152,63],[179,66,152,64,"current"],[179,73,152,71],[179,74,152,72],[181,8,154,6],[182,8,155,6],[183,8,156,6],[183,12,156,10,"state"],[183,17,156,15],[183,19,156,17],[184,10,157,8],[185,10,158,8,"onUnhandledLinking"],[185,28,158,26],[185,29,158,27,"path"],[185,33,158,31],[185,34,158,32],[186,10,159,8],[187,10,160,8],[188,10,161,8],[188,14,161,12,"validateRoutesNotExistInRootState"],[188,47,161,45],[188,48,161,46,"state"],[188,53,161,51],[188,54,161,52],[188,56,161,54],[189,12,162,10],[190,10,163,8],[191,10,164,8],[191,14,164,12,"index"],[191,19,164,17],[191,22,164,20,"previousIndex"],[191,35,164,33],[191,37,164,35],[192,12,165,10],[192,18,165,16,"action"],[192,24,165,22],[192,27,165,25,"getActionFromStateRef"],[192,48,165,46],[192,49,165,47,"current"],[192,56,165,54],[192,57,165,55,"state"],[192,62,165,60],[192,64,165,62,"configRef"],[192,73,165,71],[192,74,165,72,"current"],[192,81,165,79],[192,82,165,80],[193,12,166,10],[193,16,166,14,"action"],[193,22,166,20],[193,27,166,25,"undefined"],[193,36,166,34],[193,38,166,36],[194,14,167,12],[194,18,167,16],[195,16,168,14,"navigation"],[195,26,168,24],[195,27,168,25,"dispatch"],[195,35,168,33],[195,36,168,34,"action"],[195,42,168,40],[195,43,168,41],[196,14,169,12],[196,15,169,13],[196,16,169,14],[196,23,169,21,"e"],[196,24,169,22],[196,26,169,24],[197,16,170,14],[198,16,171,14],[199,16,172,14,"console"],[199,23,172,21],[199,24,172,22,"warn"],[199,28,172,26],[199,29,172,27],[199,82,172,80,"path"],[199,86,172,84],[199,92,172,90],[199,99,172,97,"e"],[199,100,172,98],[199,105,172,103],[199,113,172,111],[199,117,172,115,"e"],[199,118,172,116],[199,122,172,120],[199,126,172,124],[199,130,172,128],[199,139,172,137],[199,143,172,141,"e"],[199,144,172,142],[199,147,172,145,"e"],[199,148,172,146],[199,149,172,147,"message"],[199,156,172,154],[199,159,172,157,"e"],[199,160,172,158],[199,162,172,160],[199,163,172,161],[200,14,173,12],[201,12,174,10],[201,13,174,11],[201,19,174,17],[202,14,175,12,"navigation"],[202,24,175,22],[202,25,175,23,"resetRoot"],[202,34,175,32],[202,35,175,33,"state"],[202,40,175,38],[202,41,175,39],[203,12,176,10],[204,10,177,8],[204,11,177,9],[204,17,177,15],[205,12,178,10,"navigation"],[205,22,178,20],[205,23,178,21,"resetRoot"],[205,32,178,30],[205,33,178,31,"state"],[205,38,178,36],[205,39,178,37],[206,10,179,8],[207,8,180,6],[207,9,180,7],[207,15,180,13],[208,10,181,8],[209,10,182,8,"navigation"],[209,20,182,18],[209,21,182,19,"resetRoot"],[209,30,182,28],[209,31,182,29,"state"],[209,36,182,34],[209,37,182,35],[210,8,183,6],[211,6,184,4],[211,7,184,5],[211,8,184,6],[212,4,185,2],[212,5,185,3],[212,7,185,5],[212,8,185,6,"enabled"],[212,15,185,13],[212,17,185,15,"history"],[212,24,185,22],[212,26,185,24,"onUnhandledLinking"],[212,44,185,42],[212,46,185,44,"ref"],[212,49,185,47],[212,51,185,49,"validateRoutesNotExistInRootState"],[212,84,185,82],[212,85,185,83],[212,86,185,84],[213,4,186,2,"React"],[213,9,186,7],[213,10,186,8,"useEffect"],[213,19,186,17],[213,20,186,18],[213,26,186,24],[214,6,187,4],[214,10,187,8],[214,11,187,9,"enabled"],[214,18,187,16],[214,20,187,18],[215,8,188,6],[216,6,189,4],[217,6,190,4],[217,12,190,10,"getPathForRoute"],[217,27,190,25],[217,30,190,28,"getPathForRoute"],[217,31,190,29,"route"],[217,36,190,34],[217,38,190,36,"state"],[217,43,190,41],[217,48,190,46],[218,8,191,6],[218,12,191,10,"path"],[218,16,191,14],[220,8,193,6],[221,8,194,6],[222,8,195,6],[222,12,195,10,"route"],[222,17,195,15],[222,19,195,17,"path"],[222,23,195,21],[222,25,195,23],[223,10,196,8],[223,16,196,14,"stateForPath"],[223,28,196,26],[223,31,196,29,"getStateFromPathRef"],[223,50,196,48],[223,51,196,49,"current"],[223,58,196,56],[223,59,196,57,"route"],[223,64,196,62],[223,65,196,63,"path"],[223,69,196,67],[223,71,196,69,"configRef"],[223,80,196,78],[223,81,196,79,"current"],[223,88,196,86],[223,89,196,87],[224,10,197,8],[224,14,197,12,"stateForPath"],[224,26,197,24],[224,28,197,26],[225,12,198,10],[225,18,198,16,"focusedRoute"],[225,30,198,28],[225,33,198,31],[225,37,198,31,"findFocusedRoute"],[225,57,198,47],[225,58,198,47,"findFocusedRoute"],[225,74,198,47],[225,76,198,48,"stateForPath"],[225,88,198,60],[225,89,198,61],[226,12,199,10],[226,16,199,14,"focusedRoute"],[226,28,199,26],[226,32,199,30,"focusedRoute"],[226,44,199,42],[226,45,199,43,"name"],[226,49,199,47],[226,54,199,52,"route"],[226,59,199,57],[226,60,199,58,"name"],[226,64,199,62],[226,68,199,66],[226,72,199,66,"isEqual"],[226,79,199,73],[226,80,199,73,"default"],[226,87,199,73],[226,89,199,74,"focusedRoute"],[226,101,199,86],[226,102,199,87,"params"],[226,108,199,93],[226,110,199,95,"route"],[226,115,199,100],[226,116,199,101,"params"],[226,122,199,107],[226,123,199,108],[226,125,199,110],[227,14,200,12,"path"],[227,18,200,16],[227,21,200,19,"route"],[227,26,200,24],[227,27,200,25,"path"],[227,31,200,29],[228,12,201,10],[229,10,202,8],[230,8,203,6],[231,8,204,6],[231,12,204,10,"path"],[231,16,204,14],[231,20,204,18],[231,24,204,22],[231,26,204,24],[232,10,205,8,"path"],[232,14,205,12],[232,17,205,15,"getPathFromStateRef"],[232,36,205,34],[232,37,205,35,"current"],[232,44,205,42],[232,45,205,43,"state"],[232,50,205,48],[232,52,205,50,"configRef"],[232,61,205,59],[232,62,205,60,"current"],[232,69,205,67],[232,70,205,68],[233,8,206,6],[234,8,207,6],[234,14,207,12,"previousRoute"],[234,27,207,25],[234,30,207,28,"previousStateRef"],[234,46,207,44],[234,47,207,45,"current"],[234,54,207,52],[234,57,207,55],[234,61,207,55,"findFocusedRoute"],[234,81,207,71],[234,82,207,71,"findFocusedRoute"],[234,98,207,71],[234,100,207,72,"previousStateRef"],[234,116,207,88],[234,117,207,89,"current"],[234,124,207,96],[234,125,207,97],[234,128,207,100,"undefined"],[234,137,207,109],[236,8,209,6],[237,8,210,6],[237,12,210,10,"previousRoute"],[237,25,210,23],[237,29,210,27,"route"],[237,34,210,32],[237,38,210,36],[237,43,210,41],[237,47,210,45,"previousRoute"],[237,60,210,58],[237,64,210,62],[237,69,210,67],[237,73,210,71,"route"],[237,78,210,76],[237,82,210,80,"previousRoute"],[237,95,210,93],[237,96,210,94,"key"],[237,99,210,97],[237,104,210,102,"route"],[237,109,210,107],[237,110,210,108,"key"],[237,113,210,111],[237,115,210,113],[238,10,211,8,"path"],[238,14,211,12],[238,17,211,15,"path"],[238,21,211,19],[238,24,211,22,"location"],[238,32,211,30],[238,33,211,31,"hash"],[238,37,211,35],[239,8,212,6],[240,8,213,6],[240,15,213,13,"path"],[240,19,213,17],[241,6,214,4],[241,7,214,5],[242,6,215,4],[242,10,215,8,"ref"],[242,13,215,11],[242,14,215,12,"current"],[242,21,215,19],[242,23,215,21],[243,8,216,6],[244,8,217,6],[245,8,218,6],[245,14,218,12,"state"],[245,19,218,17],[245,22,218,20,"ref"],[245,25,218,23],[245,26,218,24,"current"],[245,33,218,31],[245,34,218,32,"getRootState"],[245,46,218,44],[245,47,218,45],[245,48,218,46],[246,8,219,6],[246,12,219,10,"state"],[246,17,219,15],[246,19,219,17],[247,10,220,8],[247,16,220,14,"route"],[247,21,220,19],[247,24,220,22],[247,28,220,22,"findFocusedRoute"],[247,48,220,38],[247,49,220,38,"findFocusedRoute"],[247,65,220,38],[247,67,220,39,"state"],[247,72,220,44],[247,73,220,45],[248,10,221,8],[248,16,221,14,"path"],[248,20,221,18],[248,23,221,21,"getPathForRoute"],[248,38,221,36],[248,39,221,37,"route"],[248,44,221,42],[248,46,221,44,"state"],[248,51,221,49],[248,52,221,50],[249,10,222,8],[249,14,222,12,"previousStateRef"],[249,30,222,28],[249,31,222,29,"current"],[249,38,222,36],[249,43,222,41,"undefined"],[249,52,222,50],[249,54,222,52],[250,12,223,10,"previousStateRef"],[250,28,223,26],[250,29,223,27,"current"],[250,36,223,34],[250,39,223,37,"state"],[250,44,223,42],[251,10,224,8],[252,10,225,8,"history"],[252,17,225,15],[252,18,225,16,"replace"],[252,25,225,23],[252,26,225,24],[253,12,226,10,"path"],[253,16,226,14],[254,12,227,10,"state"],[255,10,228,8],[255,11,228,9],[255,12,228,10],[256,8,229,6],[257,6,230,4],[258,6,231,4],[258,12,231,10,"onStateChange"],[258,25,231,23],[258,28,231,26],[258,34,231,26,"onStateChange"],[258,35,231,26],[258,40,231,38],[259,8,232,6],[259,14,232,12,"navigation"],[259,24,232,22],[259,27,232,25,"ref"],[259,30,232,28],[259,31,232,29,"current"],[259,38,232,36],[260,8,233,6],[260,12,233,10],[260,13,233,11,"navigation"],[260,23,233,21],[260,27,233,25],[260,28,233,26,"enabled"],[260,35,233,33],[260,37,233,35],[261,10,234,8],[262,8,235,6],[263,8,236,6],[263,14,236,12,"previousState"],[263,27,236,25],[263,30,236,28,"previousStateRef"],[263,46,236,44],[263,47,236,45,"current"],[263,54,236,52],[264,8,237,6],[264,14,237,12,"state"],[264,19,237,17],[264,22,237,20,"navigation"],[264,32,237,30],[264,33,237,31,"getRootState"],[264,45,237,43],[264,46,237,44],[264,47,237,45],[266,8,239,6],[267,8,240,6],[267,12,240,10],[267,13,240,11,"state"],[267,18,240,16],[267,20,240,18],[268,10,241,8],[269,8,242,6],[270,8,243,6],[270,14,243,12,"pendingPath"],[270,25,243,23],[270,28,243,26,"pendingPopStatePathRef"],[270,50,243,48],[270,51,243,49,"current"],[270,58,243,56],[271,8,244,6],[271,14,244,12,"route"],[271,19,244,17],[271,22,244,20],[271,26,244,20,"findFocusedRoute"],[271,46,244,36],[271,47,244,36,"findFocusedRoute"],[271,63,244,36],[271,65,244,37,"state"],[271,70,244,42],[271,71,244,43],[272,8,245,6],[272,14,245,12,"path"],[272,18,245,16],[272,21,245,19,"getPathForRoute"],[272,36,245,34],[272,37,245,35,"route"],[272,42,245,40],[272,44,245,42,"state"],[272,49,245,47],[272,50,245,48],[273,8,246,6,"previousStateRef"],[273,24,246,22],[273,25,246,23,"current"],[273,32,246,30],[273,35,246,33,"state"],[273,40,246,38],[274,8,247,6,"pendingPopStatePathRef"],[274,30,247,28],[274,31,247,29,"current"],[274,38,247,36],[274,41,247,39,"undefined"],[274,50,247,48],[276,8,249,6],[277,8,250,6],[278,8,251,6],[279,8,252,6],[280,8,253,6],[280,14,253,12],[280,15,253,13,"previousFocusedState"],[280,35,253,33],[280,37,253,35,"focusedState"],[280,49,253,47],[280,50,253,48],[280,53,253,51,"findMatchingState"],[280,70,253,68],[280,71,253,69,"previousState"],[280,84,253,82],[280,86,253,84,"state"],[280,91,253,89],[280,92,253,90],[281,8,254,6],[281,12,254,10,"previousFocusedState"],[281,32,254,30],[281,36,254,34,"focusedState"],[281,48,254,46],[282,8,255,6],[283,8,256,6],[284,8,257,6,"path"],[284,12,257,10],[284,17,257,15,"pendingPath"],[284,28,257,26],[284,30,257,28],[285,10,258,8],[285,16,258,14,"historyDelta"],[285,28,258,26],[285,31,258,29],[285,32,258,30,"focusedState"],[285,44,258,42],[285,45,258,43,"history"],[285,52,258,50],[285,55,258,53,"focusedState"],[285,67,258,65],[285,68,258,66,"history"],[285,75,258,73],[285,76,258,74,"length"],[285,82,258,80],[285,85,258,83,"focusedState"],[285,97,258,95],[285,98,258,96,"routes"],[285,104,258,102],[285,105,258,103,"length"],[285,111,258,109],[285,116,258,114,"previousFocusedState"],[285,136,258,134],[285,137,258,135,"history"],[285,144,258,142],[285,147,258,145,"previousFocusedState"],[285,167,258,165],[285,168,258,166,"history"],[285,175,258,173],[285,176,258,174,"length"],[285,182,258,180],[285,185,258,183,"previousFocusedState"],[285,205,258,203],[285,206,258,204,"routes"],[285,212,258,210],[285,213,258,211,"length"],[285,219,258,217],[285,220,258,218],[286,10,259,8],[286,14,259,12,"historyDelta"],[286,26,259,24],[286,29,259,27],[286,30,259,28],[286,32,259,30],[287,12,260,10],[288,12,261,10],[289,12,262,10,"history"],[289,19,262,17],[289,20,262,18,"push"],[289,24,262,22],[289,25,262,23],[290,14,263,12,"path"],[290,18,263,16],[291,14,264,12,"state"],[292,12,265,10],[292,13,265,11],[292,14,265,12],[293,10,266,8],[293,11,266,9],[293,17,266,15],[293,21,266,19,"historyDelta"],[293,33,266,31],[293,36,266,34],[293,37,266,35],[293,39,266,37],[294,12,267,10],[296,12,269,10],[296,18,269,16,"nextIndex"],[296,27,269,25],[296,30,269,28,"history"],[296,37,269,35],[296,38,269,36,"backIndex"],[296,47,269,45],[296,48,269,46],[297,14,270,12,"path"],[298,12,271,10],[298,13,271,11],[298,14,271,12],[299,12,272,10],[299,18,272,16,"currentIndex"],[299,30,272,28],[299,33,272,31,"history"],[299,40,272,38],[299,41,272,39,"index"],[299,46,272,44],[300,12,273,10],[300,16,273,14],[301,14,274,12],[301,18,274,16,"nextIndex"],[301,27,274,25],[301,32,274,30],[301,33,274,31],[301,34,274,32],[301,38,274,36,"nextIndex"],[301,47,274,45],[301,50,274,48,"currentIndex"],[301,62,274,60],[302,14,275,12],[303,14,276,12,"history"],[303,21,276,19],[303,22,276,20,"get"],[303,25,276,23],[303,26,276,24,"nextIndex"],[303,35,276,33],[303,36,276,34],[303,38,276,36],[304,16,277,14],[305,16,278,14],[305,22,278,20,"history"],[305,29,278,27],[305,30,278,28,"go"],[305,32,278,30],[305,33,278,31,"nextIndex"],[305,42,278,40],[305,45,278,43,"currentIndex"],[305,57,278,55],[305,58,278,56],[306,14,279,12],[306,15,279,13],[306,21,279,19],[307,16,280,14],[308,16,281,14],[309,16,282,14],[310,16,283,14],[310,22,283,20,"history"],[310,29,283,27],[310,30,283,28,"go"],[310,32,283,30],[310,33,283,31,"historyDelta"],[310,45,283,43],[310,46,283,44],[311,14,284,12],[313,14,286,12],[314,14,287,12,"history"],[314,21,287,19],[314,22,287,20,"replace"],[314,29,287,27],[314,30,287,28],[315,16,288,14,"path"],[315,20,288,18],[316,16,289,14,"state"],[317,14,290,12],[317,15,290,13],[317,16,290,14],[318,12,291,10],[318,13,291,11],[318,14,291,12],[318,21,291,19,"e"],[318,22,291,20],[318,24,291,22],[319,14,292,12],[320,12,292,12],[321,10,294,8],[321,11,294,9],[321,17,294,15],[322,12,295,10],[323,12,296,10,"history"],[323,19,296,17],[323,20,296,18,"replace"],[323,27,296,25],[323,28,296,26],[324,14,297,12,"path"],[324,18,297,16],[325,14,298,12,"state"],[326,12,299,10],[326,13,299,11],[326,14,299,12],[327,10,300,8],[328,8,301,6],[328,9,301,7],[328,15,301,13],[329,10,302,8],[330,10,303,8],[331,10,304,8,"history"],[331,17,304,15],[331,18,304,16,"replace"],[331,25,304,23],[331,26,304,24],[332,12,305,10,"path"],[332,16,305,14],[333,12,306,10,"state"],[334,10,307,8],[334,11,307,9],[334,12,307,10],[335,8,308,6],[336,6,309,4],[336,7,309,5],[338,6,311,4],[339,6,312,4],[340,6,313,4],[341,6,314,4],[341,13,314,11,"ref"],[341,16,314,14],[341,17,314,15,"current"],[341,24,314,22],[341,26,314,24,"addListener"],[341,37,314,35],[341,38,314,36],[341,45,314,43],[341,47,314,45,"series"],[341,53,314,51],[341,54,314,52,"onStateChange"],[341,67,314,65],[341,68,314,66],[341,69,314,67],[342,4,315,2],[342,5,315,3],[342,7,315,5],[342,8,315,6,"enabled"],[342,15,315,13],[342,17,315,15,"history"],[342,24,315,22],[342,26,315,24,"ref"],[342,29,315,27],[342,30,315,28],[342,31,315,29],[343,4,316,2],[343,11,316,9],[344,6,317,4,"getInitialState"],[345,4,318,2],[345,5,318,3],[346,2,319,0],[347,0,319,1],[347,3]],"functionMap":{"names":["<global>","findMatchingState","series","callback","useLinking","React.useEffect$argument_0","<anonymous>","validateRoutesNotExistInRootState","state.routes.some$argument_0","getInitialState","thenable.then","thenable._catch","history.listen$argument_0","getPathForRoute","onStateChange"],"mappings":"AAA;0BCW;CDsB;sBEK;mBCE;GDG;CFE;OIE;kBCQ;WCc;KDK;GDC;kBCW;GDM;8DGC;8BCK,4CD;GHC;4CKE;MCa;ODE;MEC;OFE;GLI;kBCI;0BOE;KPsD;GDC;kBCC;4BQI;KRwB;0BSiB;KT8E;GDM;CJI"},"hasCjsExports":false},"type":"js/module"}]}