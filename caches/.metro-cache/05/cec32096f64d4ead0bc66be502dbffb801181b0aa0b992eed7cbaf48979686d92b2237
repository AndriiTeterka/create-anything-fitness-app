{"dependencies":[{"name":"@egjs/hammerjs","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":112},"end":{"line":5,"column":36,"index":148}}],"key":"I5Lt2ouU6D9a2C2V4SJv4GWe8Fg=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/findNodeHandle","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"2RP7Dp//wHy/IL2D3/pkDbKjgUI=","exportNames":["*"],"imports":1}},{"name":"../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":196},"end":{"line":7,"column":33,"index":229}}],"key":"ISRoyBmrsYyTcSqLDCBIFNoRZWE=","exportNames":["*"],"imports":1}},{"name":"./constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":230},"end":{"line":8,"column":39,"index":269}}],"key":"waDaw5D7vDr2hRFu0z1BqRCTzP4=","exportNames":["*"],"imports":1}},{"name":"./NodeManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":270},"end":{"line":9,"column":45,"index":315}}],"key":"krMbHBNX+RO/bw1gHRLBNgemf/A=","exportNames":["*"],"imports":1}},{"name":"../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":316},"end":{"line":10,"column":55,"index":371}}],"key":"Ty3ERJQ4RajY8XDWg1+a8wq7RdE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /* eslint-disable @eslint-community/eslint-comments/no-unlimited-disable */\n  /* eslint-disable */\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      n[k] = e[k];\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _egjsHammerjs = require(_dependencyMap[0], \"@egjs/hammerjs\");\n  var Hammer = _interopDefault(_egjsHammerjs);\n  var _reactNativeWebDistExportsFindNodeHandle = require(_dependencyMap[1], \"react-native-web/dist/exports/findNodeHandle\");\n  var findNodeHandle = _interopDefault(_reactNativeWebDistExportsFindNodeHandle);\n  var _State = require(_dependencyMap[2], \"../State\");\n  var _constants = require(_dependencyMap[3], \"./constants\");\n  var _NodeManager = require(_dependencyMap[4], \"./NodeManager\");\n  var NodeManager = _interopNamespace(_NodeManager);\n  var _ghQueueMicrotask = require(_dependencyMap[5], \"../ghQueueMicrotask\");\n  // TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\n  let gestureInstances = 0;\n  class GestureHandler {\n    isGestureRunning = false;\n    view = null;\n    hasGestureFailed = false;\n    hammer = null;\n    initialRotation = null;\n    config = {};\n    previousState = _State.State.UNDETERMINED;\n    pendingGestures = {};\n    oldState = _State.State.UNDETERMINED;\n    lastSentState = null;\n    get id() {\n      return `${this.name}${this.gestureInstance}`;\n    }\n\n    // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n    // here to use instanceof would cause import cycle\n    get isNative() {\n      return false;\n    }\n    get isDiscrete() {\n      return false;\n    }\n    get shouldEnableGestureOnSetup() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n    constructor() {\n      this.gestureInstance = gestureInstances++;\n      this.hasCustomActivationCriteria = false;\n    }\n    getConfig() {\n      return this.config;\n    }\n    onWaitingEnded(_gesture) {}\n    removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n    addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n    isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n    get NativeGestureClass() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n    updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n    clearSelfAsPending = () => {\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.removePendingGesture(this.id);\n        }\n      }\n    };\n    updateGestureConfig({\n      enabled = true,\n      ...props\n    }) {\n      this.clearSelfAsPending();\n      this.config = this.ensureConfig({\n        enabled,\n        ...props\n      });\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.addPendingGesture(this);\n        }\n      }\n      if (this.hammer) {\n        this.sync();\n      }\n      return this.config;\n    }\n    destroy = () => {\n      this.clearSelfAsPending();\n      if (this.hammer) {\n        this.hammer.stop(false);\n        this.hammer.destroy();\n      }\n      this.hammer = null;\n    };\n    isPointInView = ({\n      x,\n      y\n    }) => {\n      // @ts-ignore FIXME(TS)\n      const rect = this.view.getBoundingClientRect();\n      const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    };\n    getState(type) {\n      // @ts-ignore TODO(TS) check if this is needed\n      if (type == 0) {\n        return 0;\n      }\n      return _constants.EventMap[type];\n    }\n    transformEventData(event) {\n      const {\n        eventType,\n        maxPointers: numberOfPointers\n      } = event;\n      // const direction = DirectionMap[ev.direction];\n      const changedTouch = event.changedPointers[0];\n      const pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n\n      // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n      const state = this.getState(eventType);\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n      return {\n        nativeEvent: {\n          numberOfPointers,\n          state,\n          pointerInside,\n          ...this.transformNativeEvent(event),\n          // onHandlerStateChange only\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          // send oldState only when the state was changed, or is different than ACTIVE\n          // GestureDetector relies on the presence of `oldState` to differentiate between\n          // update events and state change events\n          oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n        },\n        timeStamp: Date.now()\n      };\n    }\n    transformNativeEvent(_event) {\n      return {};\n    }\n    sendEvent = nativeEvent => {\n      const {\n        onGestureHandlerEvent,\n        onGestureHandlerStateChange\n      } = this.propsRef.current;\n      const event = this.transformEventData(nativeEvent);\n      invokeNullableMethod(onGestureHandlerEvent, event);\n      if (this.lastSentState !== event.nativeEvent.state) {\n        this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    };\n    cancelPendingGestures(event) {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n    notifyPendingGestures() {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n\n    // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n    onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n    forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n    cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent({\n        ...event,\n        eventType: Hammer.default.INPUT_CANCEL,\n        isFinal: true\n      });\n      this.onGestureEnded(event);\n    }\n    onRawEvent({\n      isFirst\n    }) {\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n    shouldUseTouchEvents(config) {\n      return config.simultaneousHandlers?.some(handler => handler.isNative) ?? false;\n    }\n    setView(ref, propsRef) {\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n      const SUPPORTS_TOUCH = 'ontouchstart' in window;\n      this.propsRef = propsRef;\n      this.ref = ref;\n\n      // @ts-ignore\n      this.view = (0, findNodeHandle.default)(ref);\n\n      // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n      // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n      // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n      this.hammer = SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config) ? new Hammer.default.Manager(this.view, {\n        inputClass: Hammer.default.TouchInput\n      }) : new Hammer.default.Manager(this.view);\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      const {\n        NativeGestureClass\n      } = this;\n      // @ts-ignore TODO(TS)\n      const gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', ev => {\n        if (!this.config.enabled) {\n          this.hasGestureFailed = false;\n          this.isGestureRunning = false;\n          return;\n        }\n        this.onRawEvent(ev);\n\n        // TODO: Bacon: Check against something other than null\n        // The isFirst value is not called when the first rotation is calculated.\n        if (this.initialRotation === null && ev.rotation !== 0) {\n          this.initialRotation = ev.rotation;\n        }\n        if (ev.isFinal) {\n          // in favor of a willFail otherwise the last frame of the gesture will be captured.\n          setTimeout(() => {\n            this.initialRotation = null;\n            this.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n    setupEvents() {\n      // TODO(TS) Hammer types aren't exactly that what we get in runtime\n      if (!this.isDiscrete) {\n        this.hammer.on(`${this.name}start`, event => this.onStart(event));\n        this.hammer.on(`${this.name}end ${this.name}cancel`, event => {\n          this.onGestureEnded(event);\n        });\n      }\n      this.hammer.on(this.name, ev => this.onGestureActivated(ev)); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n    }\n    onStart({\n      deltaX,\n      deltaY,\n      rotation\n    }) {\n      // Reset the state for the next gesture\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n    onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n    onSuccess() {}\n    _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        // Get the list of gestures that this gesture is still waiting for.\n        // Use `=== false` in case a ref that isn't a gesture handler is used.\n        const stillWaiting = this.config.waitFor.filter(({\n          hasGestureFailed\n        }) => hasGestureFailed === false);\n        return stillWaiting;\n      }\n      return [];\n    }\n    getHammerConfig() {\n      const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers\n      };\n    }\n    sync = () => {\n      const gesture = this.hammer.get(this.name);\n      if (!gesture) return;\n      const enable = (recognizer, inputData) => {\n        if (!this.config.enabled) {\n          this.isGestureRunning = false;\n          this.hasGestureFailed = false;\n          return false;\n        }\n\n        // Prevent events before the system is ready.\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return this.shouldEnableGestureOnSetup;\n        }\n        if (this.hasGestureFailed) {\n          return false;\n        }\n        if (!this.isDiscrete) {\n          if (this.isGestureRunning) {\n            return true;\n          }\n          // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n          // Only process if there are views to wait for.\n          this._stillWaiting = this._getPendingGestures();\n          // This gesture should continue waiting.\n          if (this._stillWaiting.length) {\n            // Check to see if one of the gestures you're waiting for has started.\n            // If it has then the gesture should fail.\n            for (const gesture of this._stillWaiting) {\n              // When the target gesture has started, this gesture must force fail.\n              if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                this.hasGestureFailed = true;\n                this.isGestureRunning = false;\n                return false;\n              }\n            }\n            // This gesture shouldn't start until the others have finished.\n            return false;\n          }\n        }\n\n        // Use default behaviour\n        if (!this.hasCustomActivationCriteria) {\n          return true;\n        }\n        const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation;\n        // @ts-ignore FIXME(TS)\n        const {\n          success,\n          failed\n        } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, {\n          ...inputData,\n          deltaRotation\n        });\n        if (failed) {\n          this.simulateCancelEvent(inputData);\n          this.hasGestureFailed = true;\n        }\n        return success;\n      };\n      const params = this.getHammerConfig();\n      // @ts-ignore FIXME(TS)\n      gesture.set({\n        ...params,\n        enable\n      });\n    };\n    simulateCancelEvent(_inputData) {}\n\n    // Validate the props\n    ensureConfig(config) {\n      const props = {\n        ...config\n      };\n\n      // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n      if ('minDist' in config) {\n        props.minDist = config.minDist;\n        props.minDistSq = props.minDist * props.minDist;\n      }\n      if ('minVelocity' in config) {\n        props.minVelocity = config.minVelocity;\n        props.minVelocitySq = props.minVelocity * props.minVelocity;\n      }\n      if ('maxDist' in config) {\n        props.maxDist = config.maxDist;\n        props.maxDistSq = config.maxDist * config.maxDist;\n      }\n      if ('waitFor' in config) {\n        props.waitFor = asArray(config.waitFor).map(({\n          handlerTag\n        }) => NodeManager.getHandler(handlerTag)).filter(v => v);\n      } else {\n        props.waitFor = null;\n      }\n      if ('simultaneousHandlers' in config) {\n        const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n        props.simultaneousHandlers = asArray(config.simultaneousHandlers).map(handler => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        }).filter(v => v);\n        if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n          (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n            // if the undelying event API needs to be changed, we need to unmount and mount\n            // the hammer instance again.\n            this.destroy();\n            this.setView(this.ref, this.propsRef);\n          });\n        }\n      } else {\n        props.simultaneousHandlers = null;\n      }\n      const configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n      configProps.forEach(prop => {\n        if (typeof props[prop] === 'undefined') {\n          props[prop] = Number.NaN;\n        }\n      });\n      return props; // TODO(TS) how to convince TS that props are filled?\n    }\n  }\n\n  // TODO(TS) investigate this method\n  // Used for sending data to a callback or AnimatedEvent\n  function invokeNullableMethod(method, event) {\n    if (method) {\n      if (typeof method === 'function') {\n        method(event);\n      } else {\n        // For use with reanimated's AnimatedEvent\n        if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n          const handler = method.__getHandler();\n          invokeNullableMethod(handler, event);\n        } else {\n          if ('__nodeConfig' in method) {\n            const {\n              argMapping\n            } = method.__nodeConfig;\n            if (Array.isArray(argMapping)) {\n              for (const [index, [key, value]] of argMapping.entries()) {\n                if (key in event.nativeEvent) {\n                  // @ts-ignore fix method type\n                  const nativeValue = event.nativeEvent[key];\n                  if (value && value.setValue) {\n                    // Reanimated API\n                    value.setValue(nativeValue);\n                  } else {\n                    // RN Animated API\n                    method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  function asArray(value) {\n    // TODO(TS) use config.waitFor type\n    return value == null ? [] : Array.isArray(value) ? value : [value];\n  }\n  var _default = GestureHandler;\n});","lineCount":503,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,4,0],[6,2,4,0,"Object"],[6,8,4,0],[6,9,4,0,"defineProperty"],[6,23,4,0],[6,24,4,0,"exports"],[6,31,4,0],[7,4,4,0,"value"],[7,9,4,0],[8,2,4,0],[9,2,4,0],[9,11,4,0,"_interopDefault"],[9,27,4,0,"e"],[9,28,4,0],[10,4,4,0],[10,11,4,0,"e"],[10,12,4,0],[10,16,4,0,"e"],[10,17,4,0],[10,18,4,0,"__esModule"],[10,28,4,0],[10,31,4,0,"e"],[10,32,4,0],[11,6,4,0,"default"],[11,13,4,0],[11,15,4,0,"e"],[12,4,4,0],[13,2,4,0],[14,2,4,0],[14,11,4,0,"_interopNamespace"],[14,29,4,0,"e"],[14,30,4,0],[15,4,4,0],[15,8,4,0,"e"],[15,9,4,0],[15,13,4,0,"e"],[15,14,4,0],[15,15,4,0,"__esModule"],[15,25,4,0],[15,34,4,0,"e"],[15,35,4,0],[16,4,4,0],[16,8,4,0,"n"],[16,9,4,0],[17,4,4,0],[17,8,4,0,"e"],[17,9,4,0],[17,11,4,0,"Object"],[17,17,4,0],[17,18,4,0,"keys"],[17,22,4,0],[17,23,4,0,"e"],[17,24,4,0],[17,26,4,0,"forEach"],[17,33,4,0],[17,44,4,0,"k"],[17,45,4,0],[18,6,4,0,"n"],[18,7,4,0],[18,8,4,0,"k"],[18,9,4,0],[18,13,4,0,"e"],[18,14,4,0],[18,15,4,0,"k"],[18,16,4,0],[19,4,4,0],[20,4,4,0,"n"],[20,5,4,0],[20,6,4,0,"default"],[20,13,4,0],[20,16,4,0,"e"],[20,17,4,0],[21,4,4,0],[21,11,4,0,"n"],[21,12,4,0],[22,2,4,0],[23,2,477,0,"Object"],[23,8,477,0],[23,9,477,0,"defineProperty"],[23,23,477,0],[23,24,477,0,"exports"],[23,31,477,0],[24,4,477,0,"enumerable"],[24,14,477,0],[25,4,477,0,"get"],[25,7,477,0],[25,18,477,0,"get"],[25,19,477,0],[26,6,477,0],[26,13,477,0,"_default"],[26,21,477,0],[27,4,477,0],[28,2,477,0],[29,2,5,0],[29,6,5,0,"_egjsHammerjs"],[29,19,5,0],[29,22,5,0,"require"],[29,29,5,0],[29,30,5,0,"_dependencyMap"],[29,44,5,0],[30,2,5,0],[30,6,5,0,"Hammer"],[30,12,5,0],[30,15,5,0,"_interopDefault"],[30,30,5,0],[30,31,5,0,"_egjsHammerjs"],[30,44,5,0],[31,2,5,36],[31,6,5,36,"_reactNativeWebDistExportsFindNodeHandle"],[31,46,5,36],[31,49,5,36,"require"],[31,56,5,36],[31,57,5,36,"_dependencyMap"],[31,71,5,36],[32,2,5,36],[32,6,5,36,"findNodeHandle"],[32,20,5,36],[32,23,5,36,"_interopDefault"],[32,38,5,36],[32,39,5,36,"_reactNativeWebDistExportsFindNodeHandle"],[32,79,5,36],[33,2,7,0],[33,6,7,0,"_State"],[33,12,7,0],[33,15,7,0,"require"],[33,22,7,0],[33,23,7,0,"_dependencyMap"],[33,37,7,0],[34,2,8,0],[34,6,8,0,"_constants"],[34,16,8,0],[34,19,8,0,"require"],[34,26,8,0],[34,27,8,0,"_dependencyMap"],[34,41,8,0],[35,2,9,0],[35,6,9,0,"_NodeManager"],[35,18,9,0],[35,21,9,0,"require"],[35,28,9,0],[35,29,9,0,"_dependencyMap"],[35,43,9,0],[36,2,9,0],[36,6,9,0,"NodeManager"],[36,17,9,0],[36,20,9,0,"_interopNamespace"],[36,37,9,0],[36,38,9,0,"_NodeManager"],[36,50,9,0],[37,2,10,0],[37,6,10,0,"_ghQueueMicrotask"],[37,23,10,0],[37,26,10,0,"require"],[37,33,10,0],[37,34,10,0,"_dependencyMap"],[37,48,10,0],[38,2,12,0],[39,2,14,0],[39,6,14,4,"gestureInstances"],[39,22,14,20],[39,25,14,23],[39,26,14,24],[40,2,15,0],[40,8,15,6,"GestureHandler"],[40,22,15,20],[40,23,15,21],[41,4,16,2,"isGestureRunning"],[41,20,16,18],[41,23,16,21],[41,28,16,26],[42,4,17,2,"view"],[42,8,17,6],[42,11,17,9],[42,15,17,13],[43,4,18,2,"hasGestureFailed"],[43,20,18,18],[43,23,18,21],[43,28,18,26],[44,4,19,2,"hammer"],[44,10,19,8],[44,13,19,11],[44,17,19,15],[45,4,20,2,"initialRotation"],[45,19,20,17],[45,22,20,20],[45,26,20,24],[46,4,21,2,"config"],[46,10,21,8],[46,13,21,11],[46,14,21,12],[46,15,21,13],[47,4,22,2,"previousState"],[47,17,22,15],[47,20,22,18,"State"],[47,26,22,23],[47,27,22,23,"State"],[47,32,22,23],[47,33,22,24,"UNDETERMINED"],[47,45,22,36],[48,4,23,2,"pendingGestures"],[48,19,23,17],[48,22,23,20],[48,23,23,21],[48,24,23,22],[49,4,24,2,"oldState"],[49,12,24,10],[49,15,24,13,"State"],[49,21,24,18],[49,22,24,18,"State"],[49,27,24,18],[49,28,24,19,"UNDETERMINED"],[49,40,24,31],[50,4,25,2,"lastSentState"],[50,17,25,15],[50,20,25,18],[50,24,25,22],[51,4,26,2],[51,8,26,6,"id"],[51,10,26,8,"id"],[51,11,26,8],[51,13,26,11],[52,6,27,4],[52,13,27,11],[52,16,27,14],[52,20,27,18],[52,21,27,19,"name"],[52,25,27,23],[52,28,27,26],[52,32,27,30],[52,33,27,31,"gestureInstance"],[52,48,27,46],[52,50,27,48],[53,4,28,2],[55,4,30,2],[56,4,31,2],[57,4,32,2],[57,8,32,6,"isNative"],[57,16,32,14,"isNative"],[57,17,32,14],[57,19,32,17],[58,6,33,4],[58,13,33,11],[58,18,33,16],[59,4,34,2],[60,4,35,2],[60,8,35,6,"isDiscrete"],[60,18,35,16,"isDiscrete"],[60,19,35,16],[60,21,35,19],[61,6,36,4],[61,13,36,11],[61,18,36,16],[62,4,37,2],[63,4,38,2],[63,8,38,6,"shouldEnableGestureOnSetup"],[63,34,38,32,"shouldEnableGestureOnSetup"],[63,35,38,32],[63,37,38,35],[64,6,39,4],[64,12,39,10],[64,16,39,14,"Error"],[64,21,39,19],[64,22,39,20],[64,79,39,77],[64,80,39,78],[65,4,40,2],[66,4,41,2,"constructor"],[66,15,41,13,"constructor"],[66,16,41,13],[66,18,41,16],[67,6,42,4],[67,10,42,8],[67,11,42,9,"gestureInstance"],[67,26,42,24],[67,29,42,27,"gestureInstances"],[67,45,42,43],[67,47,42,45],[68,6,43,4],[68,10,43,8],[68,11,43,9,"hasCustomActivationCriteria"],[68,38,43,36],[68,41,43,39],[68,46,43,44],[69,4,44,2],[70,4,45,2,"getConfig"],[70,13,45,11,"getConfig"],[70,14,45,11],[70,16,45,14],[71,6,46,4],[71,13,46,11],[71,17,46,15],[71,18,46,16,"config"],[71,24,46,22],[72,4,47,2],[73,4,48,2,"onWaitingEnded"],[73,18,48,16,"onWaitingEnded"],[73,19,48,17,"_gesture"],[73,27,48,25],[73,29,48,27],[73,30,48,28],[74,4,49,2,"removePendingGesture"],[74,24,49,22,"removePendingGesture"],[74,25,49,23,"id"],[74,27,49,25],[74,29,49,27],[75,6,50,4],[75,13,50,11],[75,17,50,15],[75,18,50,16,"pendingGestures"],[75,33,50,31],[75,34,50,32,"id"],[75,36,50,34],[75,37,50,35],[76,4,51,2],[77,4,52,2,"addPendingGesture"],[77,21,52,19,"addPendingGesture"],[77,22,52,20,"gesture"],[77,29,52,27],[77,31,52,29],[78,6,53,4],[78,10,53,8],[78,11,53,9,"pendingGestures"],[78,26,53,24],[78,27,53,25,"gesture"],[78,34,53,32],[78,35,53,33,"id"],[78,37,53,35],[78,38,53,36],[78,41,53,39,"gesture"],[78,48,53,46],[79,4,54,2],[80,4,55,2,"isGestureEnabledForEvent"],[80,28,55,26,"isGestureEnabledForEvent"],[80,29,55,27,"_config"],[80,36,55,34],[80,38,55,36,"_recognizer"],[80,49,55,47],[80,51,55,49,"_event"],[80,57,55,55],[80,59,55,57],[81,6,56,4],[81,13,56,11],[82,8,57,6,"success"],[82,15,57,13],[82,17,57,15],[83,6,58,4],[83,7,58,5],[84,4,59,2],[85,4,60,2],[85,8,60,6,"NativeGestureClass"],[85,26,60,24,"NativeGestureClass"],[85,27,60,24],[85,29,60,27],[86,6,61,4],[86,12,61,10],[86,16,61,14,"Error"],[86,21,61,19],[86,22,61,20],[86,71,61,69],[86,72,61,70],[87,4,62,2],[88,4,63,2,"updateHasCustomActivationCriteria"],[88,37,63,35,"updateHasCustomActivationCriteria"],[88,38,63,36,"_config"],[88,45,63,43],[88,47,63,45],[89,6,64,4],[89,13,64,11],[89,17,64,15],[90,4,65,2],[91,4,66,2,"clearSelfAsPending"],[91,22,66,20],[91,25,66,23,"clearSelfAsPending"],[91,26,66,23],[91,31,66,29],[92,6,67,4],[92,10,67,8,"Array"],[92,15,67,13],[92,16,67,14,"isArray"],[92,23,67,21],[92,24,67,22],[92,28,67,26],[92,29,67,27,"config"],[92,35,67,33],[92,36,67,34,"waitFor"],[92,43,67,41],[92,44,67,42],[92,46,67,44],[93,8,68,6],[93,13,68,11],[93,19,68,17,"gesture"],[93,26,68,24],[93,30,68,28],[93,34,68,32],[93,35,68,33,"config"],[93,41,68,39],[93,42,68,40,"waitFor"],[93,49,68,47],[93,51,68,49],[94,10,69,8,"gesture"],[94,17,69,15],[94,18,69,16,"removePendingGesture"],[94,38,69,36],[94,39,69,37],[94,43,69,41],[94,44,69,42,"id"],[94,46,69,44],[94,47,69,45],[95,8,70,6],[96,6,71,4],[97,4,72,2],[97,5,72,3],[98,4,73,2,"updateGestureConfig"],[98,23,73,21,"updateGestureConfig"],[98,24,73,22],[99,6,74,4,"enabled"],[99,13,74,11],[99,16,74,14],[99,20,74,18],[100,6,75,4],[100,9,75,7,"props"],[101,4,76,2],[101,5,76,3],[101,7,76,5],[102,6,77,4],[102,10,77,8],[102,11,77,9,"clearSelfAsPending"],[102,29,77,27],[102,30,77,28],[102,31,77,29],[103,6,78,4],[103,10,78,8],[103,11,78,9,"config"],[103,17,78,15],[103,20,78,18],[103,24,78,22],[103,25,78,23,"ensureConfig"],[103,37,78,35],[103,38,78,36],[104,8,79,6,"enabled"],[104,15,79,13],[105,8,80,6],[105,11,80,9,"props"],[106,6,81,4],[106,7,81,5],[106,8,81,6],[107,6,82,4],[107,10,82,8],[107,11,82,9,"hasCustomActivationCriteria"],[107,38,82,36],[107,41,82,39],[107,45,82,43],[107,46,82,44,"updateHasCustomActivationCriteria"],[107,79,82,77],[107,80,82,78],[107,84,82,82],[107,85,82,83,"config"],[107,91,82,89],[107,92,82,90],[108,6,83,4],[108,10,83,8,"Array"],[108,15,83,13],[108,16,83,14,"isArray"],[108,23,83,21],[108,24,83,22],[108,28,83,26],[108,29,83,27,"config"],[108,35,83,33],[108,36,83,34,"waitFor"],[108,43,83,41],[108,44,83,42],[108,46,83,44],[109,8,84,6],[109,13,84,11],[109,19,84,17,"gesture"],[109,26,84,24],[109,30,84,28],[109,34,84,32],[109,35,84,33,"config"],[109,41,84,39],[109,42,84,40,"waitFor"],[109,49,84,47],[109,51,84,49],[110,10,85,8,"gesture"],[110,17,85,15],[110,18,85,16,"addPendingGesture"],[110,35,85,33],[110,36,85,34],[110,40,85,38],[110,41,85,39],[111,8,86,6],[112,6,87,4],[113,6,88,4],[113,10,88,8],[113,14,88,12],[113,15,88,13,"hammer"],[113,21,88,19],[113,23,88,21],[114,8,89,6],[114,12,89,10],[114,13,89,11,"sync"],[114,17,89,15],[114,18,89,16],[114,19,89,17],[115,6,90,4],[116,6,91,4],[116,13,91,11],[116,17,91,15],[116,18,91,16,"config"],[116,24,91,22],[117,4,92,2],[118,4,93,2,"destroy"],[118,11,93,9],[118,14,93,12,"destroy"],[118,15,93,12],[118,20,93,18],[119,6,94,4],[119,10,94,8],[119,11,94,9,"clearSelfAsPending"],[119,29,94,27],[119,30,94,28],[119,31,94,29],[120,6,95,4],[120,10,95,8],[120,14,95,12],[120,15,95,13,"hammer"],[120,21,95,19],[120,23,95,21],[121,8,96,6],[121,12,96,10],[121,13,96,11,"hammer"],[121,19,96,17],[121,20,96,18,"stop"],[121,24,96,22],[121,25,96,23],[121,30,96,28],[121,31,96,29],[122,8,97,6],[122,12,97,10],[122,13,97,11,"hammer"],[122,19,97,17],[122,20,97,18,"destroy"],[122,27,97,25],[122,28,97,26],[122,29,97,27],[123,6,98,4],[124,6,99,4],[124,10,99,8],[124,11,99,9,"hammer"],[124,17,99,15],[124,20,99,18],[124,24,99,22],[125,4,100,2],[125,5,100,3],[126,4,101,2,"isPointInView"],[126,17,101,15],[126,20,101,18,"isPointInView"],[126,21,101,19],[127,6,102,4,"x"],[127,7,102,5],[128,6,103,4,"y"],[129,4,104,2],[129,5,104,3],[129,10,104,8],[130,6,105,4],[131,6,106,4],[131,12,106,10,"rect"],[131,16,106,14],[131,19,106,17],[131,23,106,21],[131,24,106,22,"view"],[131,28,106,26],[131,29,106,27,"getBoundingClientRect"],[131,50,106,48],[131,51,106,49],[131,52,106,50],[132,6,107,4],[132,12,107,10,"pointerInside"],[132,25,107,23],[132,28,107,26,"x"],[132,29,107,27],[132,33,107,31,"rect"],[132,37,107,35],[132,38,107,36,"left"],[132,42,107,40],[132,46,107,44,"x"],[132,47,107,45],[132,51,107,49,"rect"],[132,55,107,53],[132,56,107,54,"right"],[132,61,107,59],[132,65,107,63,"y"],[132,66,107,64],[132,70,107,68,"rect"],[132,74,107,72],[132,75,107,73,"top"],[132,78,107,76],[132,82,107,80,"y"],[132,83,107,81],[132,87,107,85,"rect"],[132,91,107,89],[132,92,107,90,"bottom"],[132,98,107,96],[133,6,108,4],[133,13,108,11,"pointerInside"],[133,26,108,24],[134,4,109,2],[134,5,109,3],[135,4,110,2,"getState"],[135,12,110,10,"getState"],[135,13,110,11,"type"],[135,17,110,15],[135,19,110,17],[136,6,111,4],[137,6,112,4],[137,10,112,8,"type"],[137,14,112,12],[137,18,112,16],[137,19,112,17],[137,21,112,19],[138,8,113,6],[138,15,113,13],[138,16,113,14],[139,6,114,4],[140,6,115,4],[140,13,115,11,"EventMap"],[140,23,115,19],[140,24,115,19,"EventMap"],[140,32,115,19],[140,33,115,20,"type"],[140,37,115,24],[140,38,115,25],[141,4,116,2],[142,4,117,2,"transformEventData"],[142,22,117,20,"transformEventData"],[142,23,117,21,"event"],[142,28,117,26],[142,30,117,28],[143,6,118,4],[143,12,118,10],[144,8,119,6,"eventType"],[144,17,119,15],[145,8,120,6,"maxPointers"],[145,19,120,17],[145,21,120,19,"numberOfPointers"],[146,6,121,4],[146,7,121,5],[146,10,121,8,"event"],[146,15,121,13],[147,6,122,4],[148,6,123,4],[148,12,123,10,"changedTouch"],[148,24,123,22],[148,27,123,25,"event"],[148,32,123,30],[148,33,123,31,"changedPointers"],[148,48,123,46],[148,49,123,47],[148,50,123,48],[148,51,123,49],[149,6,124,4],[149,12,124,10,"pointerInside"],[149,25,124,23],[149,28,124,26],[149,32,124,30],[149,33,124,31,"isPointInView"],[149,46,124,44],[149,47,124,45],[150,8,125,6,"x"],[150,9,125,7],[150,11,125,9,"changedTouch"],[150,23,125,21],[150,24,125,22,"clientX"],[150,31,125,29],[151,8,126,6,"y"],[151,9,126,7],[151,11,126,9,"changedTouch"],[151,23,126,21],[151,24,126,22,"clientY"],[152,6,127,4],[152,7,127,5],[152,8,127,6],[154,6,129,4],[155,6,130,4],[155,12,130,10,"state"],[155,17,130,15],[155,20,130,18],[155,24,130,22],[155,25,130,23,"getState"],[155,33,130,31],[155,34,130,32,"eventType"],[155,43,130,41],[155,44,130,42],[156,6,131,4],[156,10,131,8,"state"],[156,15,131,13],[156,20,131,18],[156,24,131,22],[156,25,131,23,"previousState"],[156,38,131,36],[156,40,131,38],[157,8,132,6],[157,12,132,10],[157,13,132,11,"oldState"],[157,21,132,19],[157,24,132,22],[157,28,132,26],[157,29,132,27,"previousState"],[157,42,132,40],[158,8,133,6],[158,12,133,10],[158,13,133,11,"previousState"],[158,26,133,24],[158,29,133,27,"state"],[158,34,133,32],[159,6,134,4],[160,6,135,4],[160,13,135,11],[161,8,136,6,"nativeEvent"],[161,19,136,17],[161,21,136,19],[162,10,137,8,"numberOfPointers"],[162,26,137,24],[163,10,138,8,"state"],[163,15,138,13],[164,10,139,8,"pointerInside"],[164,23,139,21],[165,10,140,8],[165,13,140,11],[165,17,140,15],[165,18,140,16,"transformNativeEvent"],[165,38,140,36],[165,39,140,37,"event"],[165,44,140,42],[165,45,140,43],[166,10,141,8],[167,10,142,8,"handlerTag"],[167,20,142,18],[167,22,142,20],[167,26,142,24],[167,27,142,25,"handlerTag"],[167,37,142,35],[168,10,143,8,"target"],[168,16,143,14],[168,18,143,16],[168,22,143,20],[168,23,143,21,"ref"],[168,26,143,24],[169,10,144,8],[170,10,145,8],[171,10,146,8],[172,10,147,8,"oldState"],[172,18,147,16],[172,20,147,18,"state"],[172,25,147,23],[172,30,147,28],[172,34,147,32],[172,35,147,33,"previousState"],[172,48,147,46],[172,52,147,50,"state"],[172,57,147,55],[172,61,147,59],[172,62,147,60],[172,65,147,63],[172,69,147,67],[172,70,147,68,"oldState"],[172,78,147,76],[172,81,147,79,"undefined"],[173,8,148,6],[173,9,148,7],[174,8,149,6,"timeStamp"],[174,17,149,15],[174,19,149,17,"Date"],[174,23,149,21],[174,24,149,22,"now"],[174,27,149,25],[174,28,149,26],[175,6,150,4],[175,7,150,5],[176,4,151,2],[177,4,152,2,"transformNativeEvent"],[177,24,152,22,"transformNativeEvent"],[177,25,152,23,"_event"],[177,31,152,29],[177,33,152,31],[178,6,153,4],[178,13,153,11],[178,14,153,12],[178,15,153,13],[179,4,154,2],[180,4,155,2,"sendEvent"],[180,13,155,11],[180,16,155,14,"nativeEvent"],[180,27,155,25],[180,31,155,29],[181,6,156,4],[181,12,156,10],[182,8,157,6,"onGestureHandlerEvent"],[182,29,157,27],[183,8,158,6,"onGestureHandlerStateChange"],[184,6,159,4],[184,7,159,5],[184,10,159,8],[184,14,159,12],[184,15,159,13,"propsRef"],[184,23,159,21],[184,24,159,22,"current"],[184,31,159,29],[185,6,160,4],[185,12,160,10,"event"],[185,17,160,15],[185,20,160,18],[185,24,160,22],[185,25,160,23,"transformEventData"],[185,43,160,41],[185,44,160,42,"nativeEvent"],[185,55,160,53],[185,56,160,54],[186,6,161,4,"invokeNullableMethod"],[186,26,161,24],[186,27,161,25,"onGestureHandlerEvent"],[186,48,161,46],[186,50,161,48,"event"],[186,55,161,53],[186,56,161,54],[187,6,162,4],[187,10,162,8],[187,14,162,12],[187,15,162,13,"lastSentState"],[187,28,162,26],[187,33,162,31,"event"],[187,38,162,36],[187,39,162,37,"nativeEvent"],[187,50,162,48],[187,51,162,49,"state"],[187,56,162,54],[187,58,162,56],[188,8,163,6],[188,12,163,10],[188,13,163,11,"lastSentState"],[188,26,163,24],[188,29,163,27,"event"],[188,34,163,32],[188,35,163,33,"nativeEvent"],[188,46,163,44],[188,47,163,45,"state"],[188,52,163,50],[189,8,164,6,"invokeNullableMethod"],[189,28,164,26],[189,29,164,27,"onGestureHandlerStateChange"],[189,56,164,54],[189,58,164,56,"event"],[189,63,164,61],[189,64,164,62],[190,6,165,4],[191,4,166,2],[191,5,166,3],[192,4,167,2,"cancelPendingGestures"],[192,25,167,23,"cancelPendingGestures"],[192,26,167,24,"event"],[192,31,167,29],[192,33,167,31],[193,6,168,4],[193,11,168,9],[193,17,168,15,"gesture"],[193,24,168,22],[193,28,168,26,"Object"],[193,34,168,32],[193,35,168,33,"values"],[193,41,168,39],[193,42,168,40],[193,46,168,44],[193,47,168,45,"pendingGestures"],[193,62,168,60],[193,63,168,61],[193,65,168,63],[194,8,169,6],[194,12,169,10,"gesture"],[194,19,169,17],[194,23,169,21,"gesture"],[194,30,169,28],[194,31,169,29,"isGestureRunning"],[194,47,169,45],[194,49,169,47],[195,10,170,8,"gesture"],[195,17,170,15],[195,18,170,16,"hasGestureFailed"],[195,34,170,32],[195,37,170,35],[195,41,170,39],[196,10,171,8,"gesture"],[196,17,171,15],[196,18,171,16,"cancelEvent"],[196,29,171,27],[196,30,171,28,"event"],[196,35,171,33],[196,36,171,34],[197,8,172,6],[198,6,173,4],[199,4,174,2],[200,4,175,2,"notifyPendingGestures"],[200,25,175,23,"notifyPendingGestures"],[200,26,175,23],[200,28,175,26],[201,6,176,4],[201,11,176,9],[201,17,176,15,"gesture"],[201,24,176,22],[201,28,176,26,"Object"],[201,34,176,32],[201,35,176,33,"values"],[201,41,176,39],[201,42,176,40],[201,46,176,44],[201,47,176,45,"pendingGestures"],[201,62,176,60],[201,63,176,61],[201,65,176,63],[202,8,177,6],[202,12,177,10,"gesture"],[202,19,177,17],[202,21,177,19],[203,10,178,8,"gesture"],[203,17,178,15],[203,18,178,16,"onWaitingEnded"],[203,32,178,30],[203,33,178,31],[203,37,178,35],[203,38,178,36],[204,8,179,6],[205,6,180,4],[206,4,181,2],[208,4,183,2],[209,4,184,2,"onGestureEnded"],[209,18,184,16,"onGestureEnded"],[209,19,184,17,"event"],[209,24,184,22],[209,26,184,24],[210,6,185,4],[210,10,185,8],[210,11,185,9,"isGestureRunning"],[210,27,185,25],[210,30,185,28],[210,35,185,33],[211,6,186,4],[211,10,186,8],[211,11,186,9,"cancelPendingGestures"],[211,32,186,30],[211,33,186,31,"event"],[211,38,186,36],[211,39,186,37],[212,4,187,2],[213,4,188,2,"forceInvalidate"],[213,19,188,17,"forceInvalidate"],[213,20,188,18,"event"],[213,25,188,23],[213,27,188,25],[214,6,189,4],[214,10,189,8],[214,14,189,12],[214,15,189,13,"isGestureRunning"],[214,31,189,29],[214,33,189,31],[215,8,190,6],[215,12,190,10],[215,13,190,11,"hasGestureFailed"],[215,29,190,27],[215,32,190,30],[215,36,190,34],[216,8,191,6],[216,12,191,10],[216,13,191,11,"cancelEvent"],[216,24,191,22],[216,25,191,23,"event"],[216,30,191,28],[216,31,191,29],[217,6,192,4],[218,4,193,2],[219,4,194,2,"cancelEvent"],[219,15,194,13,"cancelEvent"],[219,16,194,14,"event"],[219,21,194,19],[219,23,194,21],[220,6,195,4],[220,10,195,8],[220,11,195,9,"notifyPendingGestures"],[220,32,195,30],[220,33,195,31],[220,34,195,32],[221,6,196,4],[221,10,196,8],[221,11,196,9,"sendEvent"],[221,20,196,18],[221,21,196,19],[222,8,197,6],[222,11,197,9,"event"],[222,16,197,14],[223,8,198,6,"eventType"],[223,17,198,15],[223,19,198,17,"Hammer"],[223,25,198,23],[223,26,198,23,"default"],[223,33,198,23],[223,34,198,24,"INPUT_CANCEL"],[223,46,198,36],[224,8,199,6,"isFinal"],[224,15,199,13],[224,17,199,15],[225,6,200,4],[225,7,200,5],[225,8,200,6],[226,6,201,4],[226,10,201,8],[226,11,201,9,"onGestureEnded"],[226,25,201,23],[226,26,201,24,"event"],[226,31,201,29],[226,32,201,30],[227,4,202,2],[228,4,203,2,"onRawEvent"],[228,14,203,12,"onRawEvent"],[228,15,203,13],[229,6,204,4,"isFirst"],[230,4,205,2],[230,5,205,3],[230,7,205,5],[231,6,206,4],[231,10,206,8,"isFirst"],[231,17,206,15],[231,19,206,17],[232,8,207,6],[232,12,207,10],[232,13,207,11,"hasGestureFailed"],[232,29,207,27],[232,32,207,30],[232,37,207,35],[233,6,208,4],[234,4,209,2],[235,4,210,2,"shouldUseTouchEvents"],[235,24,210,22,"shouldUseTouchEvents"],[235,25,210,23,"config"],[235,31,210,29],[235,33,210,31],[236,6,211,4],[236,13,211,11,"config"],[236,19,211,17],[236,20,211,18,"simultaneousHandlers"],[236,40,211,38],[236,42,211,40,"some"],[236,46,211,44],[236,47,211,45,"handler"],[236,54,211,52],[236,58,211,56,"handler"],[236,65,211,63],[236,66,211,64,"isNative"],[236,74,211,72],[236,75,211,73],[236,79,211,77],[236,84,211,82],[237,4,212,2],[238,4,213,2,"setView"],[238,11,213,9,"setView"],[238,12,213,10,"ref"],[238,15,213,13],[238,17,213,15,"propsRef"],[238,25,213,23],[238,27,213,25],[239,6,214,4],[239,10,214,8,"ref"],[239,13,214,11],[239,17,214,15],[239,21,214,19],[239,23,214,21],[240,8,215,6],[240,12,215,10],[240,13,215,11,"destroy"],[240,20,215,18],[240,21,215,19],[240,22,215,20],[241,8,216,6],[241,12,216,10],[241,13,216,11,"view"],[241,17,216,15],[241,20,216,18],[241,24,216,22],[242,8,217,6],[243,6,218,4],[245,6,220,4],[246,6,221,4],[246,12,221,10,"SUPPORTS_TOUCH"],[246,26,221,24],[246,29,221,27],[246,43,221,41],[246,47,221,45,"window"],[246,53,221,51],[247,6,222,4],[247,10,222,8],[247,11,222,9,"propsRef"],[247,19,222,17],[247,22,222,20,"propsRef"],[247,30,222,28],[248,6,223,4],[248,10,223,8],[248,11,223,9,"ref"],[248,14,223,12],[248,17,223,15,"ref"],[248,20,223,18],[250,6,225,4],[251,6,226,4],[251,10,226,8],[251,11,226,9,"view"],[251,15,226,13],[251,18,226,16],[251,22,226,16,"findNodeHandle"],[251,36,226,30],[251,37,226,30,"default"],[251,44,226,30],[251,46,226,31,"ref"],[251,49,226,34],[251,50,226,35],[253,6,228,4],[254,6,229,4],[255,6,230,4],[256,6,231,4],[256,10,231,8],[256,11,231,9,"hammer"],[256,17,231,15],[256,20,231,18,"SUPPORTS_TOUCH"],[256,34,231,32],[256,38,231,36],[256,42,231,40],[256,43,231,41,"shouldUseTouchEvents"],[256,63,231,61],[256,64,231,62],[256,68,231,66],[256,69,231,67,"config"],[256,75,231,73],[256,76,231,74],[256,79,231,77],[256,83,231,81,"Hammer"],[256,89,231,87],[256,90,231,87,"default"],[256,97,231,87],[256,98,231,88,"Manager"],[256,105,231,95],[256,106,231,96],[256,110,231,100],[256,111,231,101,"view"],[256,115,231,105],[256,117,231,107],[257,8,232,6,"inputClass"],[257,18,232,16],[257,20,232,18,"Hammer"],[257,26,232,24],[257,27,232,24,"default"],[257,34,232,24],[257,35,232,25,"TouchInput"],[258,6,233,4],[258,7,233,5],[258,8,233,6],[258,11,233,9],[258,15,233,13,"Hammer"],[258,21,233,19],[258,22,233,19,"default"],[258,29,233,19],[258,30,233,20,"Manager"],[258,37,233,27],[258,38,233,28],[258,42,233,32],[258,43,233,33,"view"],[258,47,233,37],[258,48,233,38],[259,6,234,4],[259,10,234,8],[259,11,234,9,"oldState"],[259,19,234,17],[259,22,234,20,"State"],[259,28,234,25],[259,29,234,25,"State"],[259,34,234,25],[259,35,234,26,"UNDETERMINED"],[259,47,234,38],[260,6,235,4],[260,10,235,8],[260,11,235,9,"previousState"],[260,24,235,22],[260,27,235,25,"State"],[260,33,235,30],[260,34,235,30,"State"],[260,39,235,30],[260,40,235,31,"UNDETERMINED"],[260,52,235,43],[261,6,236,4],[261,10,236,8],[261,11,236,9,"lastSentState"],[261,24,236,22],[261,27,236,25],[261,31,236,29],[262,6,237,4],[262,12,237,10],[263,8,238,6,"NativeGestureClass"],[264,6,239,4],[264,7,239,5],[264,10,239,8],[264,14,239,12],[265,6,240,4],[266,6,241,4],[266,12,241,10,"gesture"],[266,19,241,17],[266,22,241,20],[266,26,241,24,"NativeGestureClass"],[266,44,241,42],[266,45,241,43],[266,49,241,47],[266,50,241,48,"getHammerConfig"],[266,65,241,63],[266,66,241,64],[266,67,241,65],[266,68,241,66],[267,6,242,4],[267,10,242,8],[267,11,242,9,"hammer"],[267,17,242,15],[267,18,242,16,"add"],[267,21,242,19],[267,22,242,20,"gesture"],[267,29,242,27],[267,30,242,28],[268,6,243,4],[268,10,243,8],[268,11,243,9,"hammer"],[268,17,243,15],[268,18,243,16,"on"],[268,20,243,18],[268,21,243,19],[268,35,243,33],[268,37,243,35,"ev"],[268,39,243,37],[268,43,243,41],[269,8,244,6],[269,12,244,10],[269,13,244,11],[269,17,244,15],[269,18,244,16,"config"],[269,24,244,22],[269,25,244,23,"enabled"],[269,32,244,30],[269,34,244,32],[270,10,245,8],[270,14,245,12],[270,15,245,13,"hasGestureFailed"],[270,31,245,29],[270,34,245,32],[270,39,245,37],[271,10,246,8],[271,14,246,12],[271,15,246,13,"isGestureRunning"],[271,31,246,29],[271,34,246,32],[271,39,246,37],[272,10,247,8],[273,8,248,6],[274,8,249,6],[274,12,249,10],[274,13,249,11,"onRawEvent"],[274,23,249,21],[274,24,249,22,"ev"],[274,26,249,24],[274,27,249,25],[276,8,251,6],[277,8,252,6],[278,8,253,6],[278,12,253,10],[278,16,253,14],[278,17,253,15,"initialRotation"],[278,32,253,30],[278,37,253,35],[278,41,253,39],[278,45,253,43,"ev"],[278,47,253,45],[278,48,253,46,"rotation"],[278,56,253,54],[278,61,253,59],[278,62,253,60],[278,64,253,62],[279,10,254,8],[279,14,254,12],[279,15,254,13,"initialRotation"],[279,30,254,28],[279,33,254,31,"ev"],[279,35,254,33],[279,36,254,34,"rotation"],[279,44,254,42],[280,8,255,6],[281,8,256,6],[281,12,256,10,"ev"],[281,14,256,12],[281,15,256,13,"isFinal"],[281,22,256,20],[281,24,256,22],[282,10,257,8],[283,10,258,8,"setTimeout"],[283,20,258,18],[283,21,258,19],[283,27,258,25],[284,12,259,10],[284,16,259,14],[284,17,259,15,"initialRotation"],[284,32,259,30],[284,35,259,33],[284,39,259,37],[285,12,260,10],[285,16,260,14],[285,17,260,15,"hasGestureFailed"],[285,33,260,31],[285,36,260,34],[285,41,260,39],[286,10,261,8],[286,11,261,9],[286,12,261,10],[287,8,262,6],[288,6,263,4],[288,7,263,5],[288,8,263,6],[289,6,264,4],[289,10,264,8],[289,11,264,9,"setupEvents"],[289,22,264,20],[289,23,264,21],[289,24,264,22],[290,6,265,4],[290,10,265,8],[290,11,265,9,"sync"],[290,15,265,13],[290,16,265,14],[290,17,265,15],[291,4,266,2],[292,4,267,2,"setupEvents"],[292,15,267,13,"setupEvents"],[292,16,267,13],[292,18,267,16],[293,6,268,4],[294,6,269,4],[294,10,269,8],[294,11,269,9],[294,15,269,13],[294,16,269,14,"isDiscrete"],[294,26,269,24],[294,28,269,26],[295,8,270,6],[295,12,270,10],[295,13,270,11,"hammer"],[295,19,270,17],[295,20,270,18,"on"],[295,22,270,20],[295,23,270,21],[295,26,270,24],[295,30,270,28],[295,31,270,29,"name"],[295,35,270,33],[295,42,270,40],[295,44,270,42,"event"],[295,49,270,47],[295,53,270,51],[295,57,270,55],[295,58,270,56,"onStart"],[295,65,270,63],[295,66,270,64,"event"],[295,71,270,69],[295,72,270,70],[295,73,270,71],[296,8,271,6],[296,12,271,10],[296,13,271,11,"hammer"],[296,19,271,17],[296,20,271,18,"on"],[296,22,271,20],[296,23,271,21],[296,26,271,24],[296,30,271,28],[296,31,271,29,"name"],[296,35,271,33],[296,42,271,40],[296,46,271,44],[296,47,271,45,"name"],[296,51,271,49],[296,59,271,57],[296,61,271,59,"event"],[296,66,271,64],[296,70,271,68],[297,10,272,8],[297,14,272,12],[297,15,272,13,"onGestureEnded"],[297,29,272,27],[297,30,272,28,"event"],[297,35,272,33],[297,36,272,34],[298,8,273,6],[298,9,273,7],[298,10,273,8],[299,6,274,4],[300,6,275,4],[300,10,275,8],[300,11,275,9,"hammer"],[300,17,275,15],[300,18,275,16,"on"],[300,20,275,18],[300,21,275,19],[300,25,275,23],[300,26,275,24,"name"],[300,30,275,28],[300,32,275,30,"ev"],[300,34,275,32],[300,38,275,36],[300,42,275,40],[300,43,275,41,"onGestureActivated"],[300,61,275,59],[300,62,275,60,"ev"],[300,64,275,62],[300,65,275,63],[300,66,275,64],[300,67,275,65],[300,68,275,66],[301,4,276,2],[302,4,277,2,"onStart"],[302,11,277,9,"onStart"],[302,12,277,10],[303,6,278,4,"deltaX"],[303,12,278,10],[304,6,279,4,"deltaY"],[304,12,279,10],[305,6,280,4,"rotation"],[306,4,281,2],[306,5,281,3],[306,7,281,5],[307,6,282,4],[308,6,283,4],[308,10,283,8],[308,11,283,9,"oldState"],[308,19,283,17],[308,22,283,20,"State"],[308,28,283,25],[308,29,283,25,"State"],[308,34,283,25],[308,35,283,26,"UNDETERMINED"],[308,47,283,38],[309,6,284,4],[309,10,284,8],[309,11,284,9,"previousState"],[309,24,284,22],[309,27,284,25,"State"],[309,33,284,30],[309,34,284,30,"State"],[309,39,284,30],[309,40,284,31,"UNDETERMINED"],[309,52,284,43],[310,6,285,4],[310,10,285,8],[310,11,285,9,"lastSentState"],[310,24,285,22],[310,27,285,25],[310,31,285,29],[311,6,286,4],[311,10,286,8],[311,11,286,9,"isGestureRunning"],[311,27,286,25],[311,30,286,28],[311,34,286,32],[312,6,287,4],[312,10,287,8],[312,11,287,9,"__initialX"],[312,21,287,19],[312,24,287,22,"deltaX"],[312,30,287,28],[313,6,288,4],[313,10,288,8],[313,11,288,9,"__initialY"],[313,21,288,19],[313,24,288,22,"deltaY"],[313,30,288,28],[314,6,289,4],[314,10,289,8],[314,11,289,9,"initialRotation"],[314,26,289,24],[314,29,289,27,"rotation"],[314,37,289,35],[315,4,290,2],[316,4,291,2,"onGestureActivated"],[316,22,291,20,"onGestureActivated"],[316,23,291,21,"ev"],[316,25,291,23],[316,27,291,25],[317,6,292,4],[317,10,292,8],[317,11,292,9,"sendEvent"],[317,20,292,18],[317,21,292,19,"ev"],[317,23,292,21],[317,24,292,22],[318,4,293,2],[319,4,294,2,"onSuccess"],[319,13,294,11,"onSuccess"],[319,14,294,11],[319,16,294,14],[319,17,294,15],[320,4,295,2,"_getPendingGestures"],[320,23,295,21,"_getPendingGestures"],[320,24,295,21],[320,26,295,24],[321,6,296,4],[321,10,296,8,"Array"],[321,15,296,13],[321,16,296,14,"isArray"],[321,23,296,21],[321,24,296,22],[321,28,296,26],[321,29,296,27,"config"],[321,35,296,33],[321,36,296,34,"waitFor"],[321,43,296,41],[321,44,296,42],[321,48,296,46],[321,52,296,50],[321,53,296,51,"config"],[321,59,296,57],[321,60,296,58,"waitFor"],[321,67,296,65],[321,68,296,66,"length"],[321,74,296,72],[321,76,296,74],[322,8,297,6],[323,8,298,6],[324,8,299,6],[324,14,299,12,"stillWaiting"],[324,26,299,24],[324,29,299,27],[324,33,299,31],[324,34,299,32,"config"],[324,40,299,38],[324,41,299,39,"waitFor"],[324,48,299,46],[324,49,299,47,"filter"],[324,55,299,53],[324,56,299,54],[324,57,299,55],[325,10,300,8,"hasGestureFailed"],[326,8,301,6],[326,9,301,7],[326,14,301,12,"hasGestureFailed"],[326,30,301,28],[326,35,301,33],[326,40,301,38],[326,41,301,39],[327,8,302,6],[327,15,302,13,"stillWaiting"],[327,27,302,25],[328,6,303,4],[329,6,304,4],[329,13,304,11],[329,15,304,13],[330,4,305,2],[331,4,306,2,"getHammerConfig"],[331,19,306,17,"getHammerConfig"],[331,20,306,17],[331,22,306,20],[332,6,307,4],[332,12,307,10,"pointers"],[332,20,307,18],[332,23,307,21],[332,27,307,25],[332,28,307,26,"config"],[332,34,307,32],[332,35,307,33,"minPointers"],[332,46,307,44],[332,51,307,49],[332,55,307,53],[332,56,307,54,"config"],[332,62,307,60],[332,63,307,61,"maxPointers"],[332,74,307,72],[332,77,307,75],[332,81,307,79],[332,82,307,80,"config"],[332,88,307,86],[332,89,307,87,"minPointers"],[332,100,307,98],[332,103,307,101],[332,104,307,102],[333,6,308,4],[333,13,308,11],[334,8,309,6,"pointers"],[335,6,310,4],[335,7,310,5],[336,4,311,2],[337,4,312,2,"sync"],[337,8,312,6],[337,11,312,9,"sync"],[337,12,312,9],[337,17,312,15],[338,6,313,4],[338,12,313,10,"gesture"],[338,19,313,17],[338,22,313,20],[338,26,313,24],[338,27,313,25,"hammer"],[338,33,313,31],[338,34,313,32,"get"],[338,37,313,35],[338,38,313,36],[338,42,313,40],[338,43,313,41,"name"],[338,47,313,45],[338,48,313,46],[339,6,314,4],[339,10,314,8],[339,11,314,9,"gesture"],[339,18,314,16],[339,20,314,18],[340,6,315,4],[340,12,315,10,"enable"],[340,18,315,16],[340,21,315,19,"enable"],[340,22,315,20,"recognizer"],[340,32,315,30],[340,34,315,32,"inputData"],[340,43,315,41],[340,48,315,46],[341,8,316,6],[341,12,316,10],[341,13,316,11],[341,17,316,15],[341,18,316,16,"config"],[341,24,316,22],[341,25,316,23,"enabled"],[341,32,316,30],[341,34,316,32],[342,10,317,8],[342,14,317,12],[342,15,317,13,"isGestureRunning"],[342,31,317,29],[342,34,317,32],[342,39,317,37],[343,10,318,8],[343,14,318,12],[343,15,318,13,"hasGestureFailed"],[343,31,318,29],[343,34,318,32],[343,39,318,37],[344,10,319,8],[344,17,319,15],[344,22,319,20],[345,8,320,6],[347,8,322,6],[348,8,323,6],[348,12,323,10],[348,13,323,11,"inputData"],[348,22,323,20],[348,26,323,24],[348,27,323,25,"recognizer"],[348,37,323,35],[348,38,323,36,"options"],[348,45,323,43],[348,49,323,47],[348,56,323,54,"inputData"],[348,65,323,63],[348,66,323,64,"maxPointers"],[348,77,323,75],[348,82,323,80],[348,93,323,91],[348,95,323,93],[349,10,324,8],[349,17,324,15],[349,21,324,19],[349,22,324,20,"shouldEnableGestureOnSetup"],[349,48,324,46],[350,8,325,6],[351,8,326,6],[351,12,326,10],[351,16,326,14],[351,17,326,15,"hasGestureFailed"],[351,33,326,31],[351,35,326,33],[352,10,327,8],[352,17,327,15],[352,22,327,20],[353,8,328,6],[354,8,329,6],[354,12,329,10],[354,13,329,11],[354,17,329,15],[354,18,329,16,"isDiscrete"],[354,28,329,26],[354,30,329,28],[355,10,330,8],[355,14,330,12],[355,18,330,16],[355,19,330,17,"isGestureRunning"],[355,35,330,33],[355,37,330,35],[356,12,331,10],[356,19,331,17],[356,23,331,21],[357,10,332,8],[358,10,333,8],[359,10,334,8],[360,10,335,8],[360,14,335,12],[360,15,335,13,"_stillWaiting"],[360,28,335,26],[360,31,335,29],[360,35,335,33],[360,36,335,34,"_getPendingGestures"],[360,55,335,53],[360,56,335,54],[360,57,335,55],[361,10,336,8],[362,10,337,8],[362,14,337,12],[362,18,337,16],[362,19,337,17,"_stillWaiting"],[362,32,337,30],[362,33,337,31,"length"],[362,39,337,37],[362,41,337,39],[363,12,338,10],[364,12,339,10],[365,12,340,10],[365,17,340,15],[365,23,340,21,"gesture"],[365,30,340,28],[365,34,340,32],[365,38,340,36],[365,39,340,37,"_stillWaiting"],[365,52,340,50],[365,54,340,52],[366,14,341,12],[367,14,342,12],[367,18,342,16],[367,19,342,17,"gesture"],[367,26,342,24],[367,27,342,25,"isDiscrete"],[367,37,342,35],[367,41,342,39,"gesture"],[367,48,342,46],[367,49,342,47,"isGestureRunning"],[367,65,342,63],[367,67,342,65],[368,16,343,14],[368,20,343,18],[368,21,343,19,"hasGestureFailed"],[368,37,343,35],[368,40,343,38],[368,44,343,42],[369,16,344,14],[369,20,344,18],[369,21,344,19,"isGestureRunning"],[369,37,344,35],[369,40,344,38],[369,45,344,43],[370,16,345,14],[370,23,345,21],[370,28,345,26],[371,14,346,12],[372,12,347,10],[373,12,348,10],[374,12,349,10],[374,19,349,17],[374,24,349,22],[375,10,350,8],[376,8,351,6],[378,8,353,6],[379,8,354,6],[379,12,354,10],[379,13,354,11],[379,17,354,15],[379,18,354,16,"hasCustomActivationCriteria"],[379,45,354,43],[379,47,354,45],[380,10,355,8],[380,17,355,15],[380,21,355,19],[381,8,356,6],[382,8,357,6],[382,14,357,12,"deltaRotation"],[382,27,357,25],[382,30,357,28],[382,34,357,32],[382,35,357,33,"initialRotation"],[382,50,357,48],[382,54,357,52],[382,58,357,56],[382,61,357,59],[382,62,357,60],[382,65,357,63,"inputData"],[382,74,357,72],[382,75,357,73,"rotation"],[382,83,357,81],[382,86,357,84],[382,90,357,88],[382,91,357,89,"initialRotation"],[382,106,357,104],[383,8,358,6],[384,8,359,6],[384,14,359,12],[385,10,360,8,"success"],[385,17,360,15],[386,10,361,8,"failed"],[387,8,362,6],[387,9,362,7],[387,12,362,10],[387,16,362,14],[387,17,362,15,"isGestureEnabledForEvent"],[387,41,362,39],[387,42,362,40],[387,46,362,44],[387,47,362,45,"getConfig"],[387,56,362,54],[387,57,362,55],[387,58,362,56],[387,60,362,58,"recognizer"],[387,70,362,68],[387,72,362,70],[388,10,363,8],[388,13,363,11,"inputData"],[388,22,363,20],[389,10,364,8,"deltaRotation"],[390,8,365,6],[390,9,365,7],[390,10,365,8],[391,8,366,6],[391,12,366,10,"failed"],[391,18,366,16],[391,20,366,18],[392,10,367,8],[392,14,367,12],[392,15,367,13,"simulateCancelEvent"],[392,34,367,32],[392,35,367,33,"inputData"],[392,44,367,42],[392,45,367,43],[393,10,368,8],[393,14,368,12],[393,15,368,13,"hasGestureFailed"],[393,31,368,29],[393,34,368,32],[393,38,368,36],[394,8,369,6],[395,8,370,6],[395,15,370,13,"success"],[395,22,370,20],[396,6,371,4],[396,7,371,5],[397,6,372,4],[397,12,372,10,"params"],[397,18,372,16],[397,21,372,19],[397,25,372,23],[397,26,372,24,"getHammerConfig"],[397,41,372,39],[397,42,372,40],[397,43,372,41],[398,6,373,4],[399,6,374,4,"gesture"],[399,13,374,11],[399,14,374,12,"set"],[399,17,374,15],[399,18,374,16],[400,8,375,6],[400,11,375,9,"params"],[400,17,375,15],[401,8,376,6,"enable"],[402,6,377,4],[402,7,377,5],[402,8,377,6],[403,4,378,2],[403,5,378,3],[404,4,379,2,"simulateCancelEvent"],[404,23,379,21,"simulateCancelEvent"],[404,24,379,22,"_inputData"],[404,34,379,32],[404,36,379,34],[404,37,379,35],[406,4,381,2],[407,4,382,2,"ensureConfig"],[407,16,382,14,"ensureConfig"],[407,17,382,15,"config"],[407,23,382,21],[407,25,382,23],[408,6,383,4],[408,12,383,10,"props"],[408,17,383,15],[408,20,383,18],[409,8,384,6],[409,11,384,9,"config"],[410,6,385,4],[410,7,385,5],[412,6,387,4],[413,6,388,4],[413,10,388,8],[413,19,388,17],[413,23,388,21,"config"],[413,29,388,27],[413,31,388,29],[414,8,389,6,"props"],[414,13,389,11],[414,14,389,12,"minDist"],[414,21,389,19],[414,24,389,22,"config"],[414,30,389,28],[414,31,389,29,"minDist"],[414,38,389,36],[415,8,390,6,"props"],[415,13,390,11],[415,14,390,12,"minDistSq"],[415,23,390,21],[415,26,390,24,"props"],[415,31,390,29],[415,32,390,30,"minDist"],[415,39,390,37],[415,42,390,40,"props"],[415,47,390,45],[415,48,390,46,"minDist"],[415,55,390,53],[416,6,391,4],[417,6,392,4],[417,10,392,8],[417,23,392,21],[417,27,392,25,"config"],[417,33,392,31],[417,35,392,33],[418,8,393,6,"props"],[418,13,393,11],[418,14,393,12,"minVelocity"],[418,25,393,23],[418,28,393,26,"config"],[418,34,393,32],[418,35,393,33,"minVelocity"],[418,46,393,44],[419,8,394,6,"props"],[419,13,394,11],[419,14,394,12,"minVelocitySq"],[419,27,394,25],[419,30,394,28,"props"],[419,35,394,33],[419,36,394,34,"minVelocity"],[419,47,394,45],[419,50,394,48,"props"],[419,55,394,53],[419,56,394,54,"minVelocity"],[419,67,394,65],[420,6,395,4],[421,6,396,4],[421,10,396,8],[421,19,396,17],[421,23,396,21,"config"],[421,29,396,27],[421,31,396,29],[422,8,397,6,"props"],[422,13,397,11],[422,14,397,12,"maxDist"],[422,21,397,19],[422,24,397,22,"config"],[422,30,397,28],[422,31,397,29,"maxDist"],[422,38,397,36],[423,8,398,6,"props"],[423,13,398,11],[423,14,398,12,"maxDistSq"],[423,23,398,21],[423,26,398,24,"config"],[423,32,398,30],[423,33,398,31,"maxDist"],[423,40,398,38],[423,43,398,41,"config"],[423,49,398,47],[423,50,398,48,"maxDist"],[423,57,398,55],[424,6,399,4],[425,6,400,4],[425,10,400,8],[425,19,400,17],[425,23,400,21,"config"],[425,29,400,27],[425,31,400,29],[426,8,401,6,"props"],[426,13,401,11],[426,14,401,12,"waitFor"],[426,21,401,19],[426,24,401,22,"asArray"],[426,31,401,29],[426,32,401,30,"config"],[426,38,401,36],[426,39,401,37,"waitFor"],[426,46,401,44],[426,47,401,45],[426,48,401,46,"map"],[426,51,401,49],[426,52,401,50],[426,53,401,51],[427,10,402,8,"handlerTag"],[428,8,403,6],[428,9,403,7],[428,14,403,12,"NodeManager"],[428,25,403,23],[428,26,403,24,"getHandler"],[428,36,403,34],[428,37,403,35,"handlerTag"],[428,47,403,45],[428,48,403,46],[428,49,403,47],[428,50,403,48,"filter"],[428,56,403,54],[428,57,403,55,"v"],[428,58,403,56],[428,62,403,60,"v"],[428,63,403,61],[428,64,403,62],[429,6,404,4],[429,7,404,5],[429,13,404,11],[430,8,405,6,"props"],[430,13,405,11],[430,14,405,12,"waitFor"],[430,21,405,19],[430,24,405,22],[430,28,405,26],[431,6,406,4],[432,6,407,4],[432,10,407,8],[432,32,407,30],[432,36,407,34,"config"],[432,42,407,40],[432,44,407,42],[433,8,408,6],[433,14,408,12,"shouldUseTouchEvents"],[433,34,408,32],[433,37,408,35],[433,41,408,39],[433,42,408,40,"shouldUseTouchEvents"],[433,62,408,60],[433,63,408,61],[433,67,408,65],[433,68,408,66,"config"],[433,74,408,72],[433,75,408,73],[434,8,409,6,"props"],[434,13,409,11],[434,14,409,12,"simultaneousHandlers"],[434,34,409,32],[434,37,409,35,"asArray"],[434,44,409,42],[434,45,409,43,"config"],[434,51,409,49],[434,52,409,50,"simultaneousHandlers"],[434,72,409,70],[434,73,409,71],[434,74,409,72,"map"],[434,77,409,75],[434,78,409,76,"handler"],[434,85,409,83],[434,89,409,87],[435,10,410,8],[435,14,410,12],[435,21,410,19,"handler"],[435,28,410,26],[435,33,410,31],[435,41,410,39],[435,43,410,41],[436,12,411,10],[436,19,411,17,"NodeManager"],[436,30,411,28],[436,31,411,29,"getHandler"],[436,41,411,39],[436,42,411,40,"handler"],[436,49,411,47],[436,50,411,48],[437,10,412,8],[437,11,412,9],[437,17,412,15],[438,12,413,10],[438,19,413,17,"NodeManager"],[438,30,413,28],[438,31,413,29,"getHandler"],[438,41,413,39],[438,42,413,40,"handler"],[438,49,413,47],[438,50,413,48,"handlerTag"],[438,60,413,58],[438,61,413,59],[439,10,414,8],[440,8,415,6],[440,9,415,7],[440,10,415,8],[440,11,415,9,"filter"],[440,17,415,15],[440,18,415,16,"v"],[440,19,415,17],[440,23,415,21,"v"],[440,24,415,22],[440,25,415,23],[441,8,416,6],[441,12,416,10,"shouldUseTouchEvents"],[441,32,416,30],[441,37,416,35],[441,41,416,39],[441,42,416,40,"shouldUseTouchEvents"],[441,62,416,60],[441,63,416,61,"props"],[441,68,416,66],[441,69,416,67],[441,71,416,69],[442,10,417,8],[442,14,417,8,"ghQueueMicrotask"],[442,31,417,24],[442,32,417,24,"ghQueueMicrotask"],[442,48,417,24],[442,50,417,25],[442,56,417,31],[443,12,418,10],[444,12,419,10],[445,12,420,10],[445,16,420,14],[445,17,420,15,"destroy"],[445,24,420,22],[445,25,420,23],[445,26,420,24],[446,12,421,10],[446,16,421,14],[446,17,421,15,"setView"],[446,24,421,22],[446,25,421,23],[446,29,421,27],[446,30,421,28,"ref"],[446,33,421,31],[446,35,421,33],[446,39,421,37],[446,40,421,38,"propsRef"],[446,48,421,46],[446,49,421,47],[447,10,422,8],[447,11,422,9],[447,12,422,10],[448,8,423,6],[449,6,424,4],[449,7,424,5],[449,13,424,11],[450,8,425,6,"props"],[450,13,425,11],[450,14,425,12,"simultaneousHandlers"],[450,34,425,32],[450,37,425,35],[450,41,425,39],[451,6,426,4],[452,6,427,4],[452,12,427,10,"configProps"],[452,23,427,21],[452,26,427,24],[452,27,427,25],[452,40,427,38],[452,42,427,40],[452,55,427,53],[452,57,427,55],[452,66,427,64],[452,68,427,66],[452,77,427,75],[452,79,427,77],[452,90,427,88],[452,92,427,90],[452,107,427,105],[452,109,427,107],[452,120,427,118],[452,122,427,120],[452,135,427,133],[452,137,427,135],[452,155,427,153],[452,157,427,155],[452,175,427,173],[452,177,427,175],[452,193,427,191],[452,195,427,193],[452,211,427,209],[452,213,427,211],[452,233,427,231],[452,235,427,233],[452,253,427,251],[452,255,427,253],[452,275,427,273],[452,277,427,275],[452,295,427,293],[452,296,427,294],[453,6,428,4,"configProps"],[453,17,428,15],[453,18,428,16,"forEach"],[453,25,428,23],[453,26,428,24,"prop"],[453,30,428,28],[453,34,428,32],[454,8,429,6],[454,12,429,10],[454,19,429,17,"props"],[454,24,429,22],[454,25,429,23,"prop"],[454,29,429,27],[454,30,429,28],[454,35,429,33],[454,46,429,44],[454,48,429,46],[455,10,430,8,"props"],[455,15,430,13],[455,16,430,14,"prop"],[455,20,430,18],[455,21,430,19],[455,24,430,22,"Number"],[455,30,430,28],[455,31,430,29,"NaN"],[455,34,430,32],[456,8,431,6],[457,6,432,4],[457,7,432,5],[457,8,432,6],[458,6,433,4],[458,13,433,11,"props"],[458,18,433,16],[458,19,433,17],[458,20,433,18],[459,4,434,2],[460,2,435,0],[462,2,437,0],[463,2,438,0],[464,2,439,0],[464,11,439,9,"invokeNullableMethod"],[464,31,439,29,"invokeNullableMethod"],[464,32,439,30,"method"],[464,38,439,36],[464,40,439,38,"event"],[464,45,439,43],[464,47,439,45],[465,4,440,2],[465,8,440,6,"method"],[465,14,440,12],[465,16,440,14],[466,6,441,4],[466,10,441,8],[466,17,441,15,"method"],[466,23,441,21],[466,28,441,26],[466,38,441,36],[466,40,441,38],[467,8,442,6,"method"],[467,14,442,12],[467,15,442,13,"event"],[467,20,442,18],[467,21,442,19],[468,6,443,4],[468,7,443,5],[468,13,443,11],[469,8,444,6],[470,8,445,6],[470,12,445,10],[470,26,445,24],[470,30,445,28,"method"],[470,36,445,34],[470,40,445,38],[470,47,445,45,"method"],[470,53,445,51],[470,54,445,52,"__getHandler"],[470,66,445,64],[470,71,445,69],[470,81,445,79],[470,83,445,81],[471,10,446,8],[471,16,446,14,"handler"],[471,23,446,21],[471,26,446,24,"method"],[471,32,446,30],[471,33,446,31,"__getHandler"],[471,45,446,43],[471,46,446,44],[471,47,446,45],[472,10,447,8,"invokeNullableMethod"],[472,30,447,28],[472,31,447,29,"handler"],[472,38,447,36],[472,40,447,38,"event"],[472,45,447,43],[472,46,447,44],[473,8,448,6],[473,9,448,7],[473,15,448,13],[474,10,449,8],[474,14,449,12],[474,28,449,26],[474,32,449,30,"method"],[474,38,449,36],[474,40,449,38],[475,12,450,10],[475,18,450,16],[476,14,451,12,"argMapping"],[477,12,452,10],[477,13,452,11],[477,16,452,14,"method"],[477,22,452,20],[477,23,452,21,"__nodeConfig"],[477,35,452,33],[478,12,453,10],[478,16,453,14,"Array"],[478,21,453,19],[478,22,453,20,"isArray"],[478,29,453,27],[478,30,453,28,"argMapping"],[478,40,453,38],[478,41,453,39],[478,43,453,41],[479,14,454,12],[479,19,454,17],[479,25,454,23],[479,26,454,24,"index"],[479,31,454,29],[479,33,454,31],[479,34,454,32,"key"],[479,37,454,35],[479,39,454,37,"value"],[479,44,454,42],[479,45,454,43],[479,46,454,44],[479,50,454,48,"argMapping"],[479,60,454,58],[479,61,454,59,"entries"],[479,68,454,66],[479,69,454,67],[479,70,454,68],[479,72,454,70],[480,16,455,14],[480,20,455,18,"key"],[480,23,455,21],[480,27,455,25,"event"],[480,32,455,30],[480,33,455,31,"nativeEvent"],[480,44,455,42],[480,46,455,44],[481,18,456,16],[482,18,457,16],[482,24,457,22,"nativeValue"],[482,35,457,33],[482,38,457,36,"event"],[482,43,457,41],[482,44,457,42,"nativeEvent"],[482,55,457,53],[482,56,457,54,"key"],[482,59,457,57],[482,60,457,58],[483,18,458,16],[483,22,458,20,"value"],[483,27,458,25],[483,31,458,29,"value"],[483,36,458,34],[483,37,458,35,"setValue"],[483,45,458,43],[483,47,458,45],[484,20,459,18],[485,20,460,18,"value"],[485,25,460,23],[485,26,460,24,"setValue"],[485,34,460,32],[485,35,460,33,"nativeValue"],[485,46,460,44],[485,47,460,45],[486,18,461,16],[486,19,461,17],[486,25,461,23],[487,20,462,18],[488,20,463,18,"method"],[488,26,463,24],[488,27,463,25,"__nodeConfig"],[488,39,463,37],[488,40,463,38,"argMapping"],[488,50,463,48],[488,51,463,49,"index"],[488,56,463,54],[488,57,463,55],[488,60,463,58],[488,61,463,59,"key"],[488,64,463,62],[488,66,463,64,"nativeValue"],[488,77,463,75],[488,78,463,76],[489,18,464,16],[490,16,465,14],[491,14,466,12],[492,12,467,10],[493,10,468,8],[494,8,469,6],[495,6,470,4],[496,4,471,2],[497,2,472,0],[498,2,473,0],[498,11,473,9,"asArray"],[498,18,473,16,"asArray"],[498,19,473,17,"value"],[498,24,473,22],[498,26,473,24],[499,4,474,2],[500,4,475,2],[500,11,475,9,"value"],[500,16,475,14],[500,20,475,18],[500,24,475,22],[500,27,475,25],[500,29,475,27],[500,32,475,30,"Array"],[500,37,475,35],[500,38,475,36,"isArray"],[500,45,475,43],[500,46,475,44,"value"],[500,51,475,49],[500,52,475,50],[500,55,475,53,"value"],[500,60,475,58],[500,63,475,61],[500,64,475,62,"value"],[500,69,475,67],[500,70,475,68],[501,2,476,0],[502,2,477,0],[502,6,477,0,"_default"],[502,14,477,0],[502,17,477,15,"GestureHandler"],[502,31,477,29],[503,0,477,30],[503,3]],"functionMap":{"names":["<global>","GestureHandler","get__id","get__isNative","get__isDiscrete","get__shouldEnableGestureOnSetup","constructor","getConfig","onWaitingEnded","removePendingGesture","addPendingGesture","isGestureEnabledForEvent","get__NativeGestureClass","updateHasCustomActivationCriteria","clearSelfAsPending","updateGestureConfig","destroy","isPointInView","getState","transformEventData","transformNativeEvent","sendEvent","cancelPendingGestures","notifyPendingGestures","onGestureEnded","forceInvalidate","cancelEvent","onRawEvent","shouldUseTouchEvents","config.simultaneousHandlers.some$argument_0","setView","hammer.on$argument_1","setTimeout$argument_0","setupEvents","onStart","onGestureActivated","onSuccess","_getPendingGestures","config.waitFor.filter$argument_0","getHammerConfig","sync","enable","simulateCancelEvent","ensureConfig","asArray.map$argument_0","asArray.map.filter$argument_0","ghQueueMicrotask$argument_0","configProps.forEach$argument_0","invokeNullableMethod","asArray"],"mappings":"AAA;ACc;ECW;GDE;EEI;GFE;EGC;GHE;EIC;GJE;EKC;GLG;EMC;GNE;EOC,2BP;EQC;GRE;ESC;GTE;EUC;GVI;EWC;GXE;EYC;GZE;uBaC;GbM;EcC;GdmB;YeC;GfO;kBgBC;GhBQ;EiBC;GjBM;EkBC;GlBkC;EmBC;GnBE;coBC;GpBW;EqBC;GrBO;EsBC;GtBM;EuBG;GvBG;EwBC;GxBK;EyBC;GzBQ;E0BC;G1BM;E2BC;6CCC,2BD;G3BC;E6BC;mCC8B;mBCe;SDG;KDE;G7BG;EgCC;0CFG,4BE;2DFC;OEE;8BFE,iCE;GhCC;EiCC;GjCa;EkCC;GlCE;EmCC,cnC;EoCC;sDCI;sCDE;GpCI;EsCC;GtCK;SuCC;mBCG;KDwD;GvCO;EyCC,kCzC;E0CG;kDCmB;8CDE,SE,MF;4ECM;ODM,SE,MF;yBGE;SHK;wBIM;KJI;G1CE;CDC;AgDI;ChDiC;AiDC;CjDG"},"hasCjsExports":false},"type":"js/module"}]}