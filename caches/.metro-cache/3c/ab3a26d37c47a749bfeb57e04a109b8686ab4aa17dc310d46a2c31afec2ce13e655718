{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":429},"end":{"line":11,"column":31,"index":460}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":496},"end":{"line":13,"column":34,"index":530}}],"key":"4HPAaDQ25ZwZ2dzTLatXuUucZUM=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Animated","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dNPzxVfn0yBoRxvhD+vE+lN7k4Q=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/StyleSheet","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"MK7+k1V+KnvCVW7Kj2k/ydtjmVU=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/View","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4kYBDC6LJJXoH7P9rWDi3vkLVB0=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Keyboard","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4H7FkS8ywD5HLTNk4ggLktoHubI=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/StatusBar","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"zzHKpVbCjTP+fv+3SRvKiN2M8pI=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/I18nManager","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YXFxy1JKR54teS+Ykb7Z7cVZrH8=","exportNames":["*"],"imports":1}},{"name":"../handlers/PanGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":624},"end":{"line":15,"column":66,"index":690}}],"key":"Z7WldcovRqVbXERv5Mkjp/bqHuA=","exportNames":["*"],"imports":1}},{"name":"../handlers/TapGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":691},"end":{"line":16,"column":66,"index":757}}],"key":"+Msf+8iAdn6txPXicJvQZ0hdOZ0=","exportNames":["*"],"imports":1}},{"name":"../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":17,"column":0,"index":758},"end":{"line":17,"column":33,"index":791}}],"key":"ISRoyBmrsYyTcSqLDCBIFNoRZWE=","exportNames":["*"],"imports":1}},{"name":"react/jsx-runtime","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":18,"column":0,"index":792},"end":{"line":18,"column":63,"index":855}}],"key":"rKAWVuQOSSDHxC6IWcmkeWszaWg=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  // This component is based on RN's DrawerLayoutAndroid API\n  //\n  // It perhaps deserves to be put in a separate repo, but since it relies on\n  // react-native-gesture-handler library which isn't very popular at the moment I\n  // decided to keep it here for the time being. It will allow us to move faster\n  // and fix issues that may arise in gesture handler library that could be found\n  // when using the drawer component\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      n[k] = e[k];\n    });\n    n.default = e;\n    return n;\n  }\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return DrawerLayout;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var React = _interopNamespace(_react);\n  var _invariant = require(_dependencyMap[1], \"invariant\");\n  var invariant = _interopDefault(_invariant);\n  var _reactNativeWebDistExportsAnimated = require(_dependencyMap[2], \"react-native-web/dist/exports/Animated\");\n  var Animated = _interopDefault(_reactNativeWebDistExportsAnimated);\n  var _reactNativeWebDistExportsStyleSheet = require(_dependencyMap[3], \"react-native-web/dist/exports/StyleSheet\");\n  var StyleSheet = _interopDefault(_reactNativeWebDistExportsStyleSheet);\n  var _reactNativeWebDistExportsView = require(_dependencyMap[4], \"react-native-web/dist/exports/View\");\n  var View = _interopDefault(_reactNativeWebDistExportsView);\n  var _reactNativeWebDistExportsKeyboard = require(_dependencyMap[5], \"react-native-web/dist/exports/Keyboard\");\n  var Keyboard = _interopDefault(_reactNativeWebDistExportsKeyboard);\n  var _reactNativeWebDistExportsStatusBar = require(_dependencyMap[6], \"react-native-web/dist/exports/StatusBar\");\n  var StatusBar = _interopDefault(_reactNativeWebDistExportsStatusBar);\n  var _reactNativeWebDistExportsI18nManager = require(_dependencyMap[7], \"react-native-web/dist/exports/I18nManager\");\n  var I18nManager = _interopDefault(_reactNativeWebDistExportsI18nManager);\n  var _handlersPanGestureHandler = require(_dependencyMap[8], \"../handlers/PanGestureHandler\");\n  var _handlersTapGestureHandler = require(_dependencyMap[9], \"../handlers/TapGestureHandler\");\n  var _State = require(_dependencyMap[10], \"../State\");\n  var _reactJsxRuntime = require(_dependencyMap[11], \"react/jsx-runtime\");\n  const DRAG_TOSS = 0.05;\n  const IDLE = 'Idle';\n  const DRAGGING = 'Dragging';\n  const SETTLING = 'Settling';\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  // Animated.AnimatedInterpolation has been converted to a generic type\n  // in @types/react-native 0.70. This way we can maintain compatibility\n  // with all versions of @types/react-native`\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated use Reanimated version of DrawerLayout instead\n   */\n  class DrawerLayout extends _react.Component {\n    static defaultProps = {\n      drawerWidth: 200,\n      drawerPosition: 'left',\n      useNativeAnimations: true,\n      drawerType: 'front',\n      edgeWidth: 20,\n      minSwipeDistance: 3,\n      overlayColor: 'rgba(0, 0, 0, 0.7)',\n      drawerLockMode: 'unlocked',\n      enableTrackpadTwoFingerGesture: false\n    };\n    constructor(props) {\n      super(props);\n      const dragX = new Animated.default.Value(0);\n      const touchX = new Animated.default.Value(0);\n      const drawerTranslation = new Animated.default.Value(0);\n      this.state = {\n        dragX,\n        touchX,\n        drawerTranslation,\n        containerWidth: 0,\n        drawerState: IDLE,\n        drawerOpened: false\n      };\n      this.updateAnimatedEvent(props, this.state);\n    }\n    shouldComponentUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n      return true;\n    }\n    accessibilityIsModalView = /*#__PURE__*/React.createRef();\n    pointerEventsView = /*#__PURE__*/React.createRef();\n    panGestureHandler = /*#__PURE__*/React.createRef();\n    drawerShown = false;\n    static positions = {\n      Left: 'left',\n      Right: 'right'\n    };\n    updateAnimatedEvent = (props, state) => {\n      // Event definition is based on\n      const {\n        drawerPosition,\n        drawerWidth,\n        drawerType\n      } = props;\n      const {\n        dragX: dragXValue,\n        touchX: touchXValue,\n        drawerTranslation,\n        containerWidth\n      } = state;\n      let dragX = dragXValue;\n      let touchX = touchXValue;\n      if (drawerPosition !== 'left') {\n        // Most of the code is written in a way to handle left-side drawer. In\n        // order to handle right-side drawer the only thing we need to do is to\n        // reverse events coming from gesture handler in a way they emulate\n        // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n        // calulcated by subtracing real touchX from the width of the container\n        // (such that when touch happens at the right edge the value is simply 0)\n        dragX = Animated.default.multiply(new Animated.default.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n        touchX = Animated.default.add(new Animated.default.Value(containerWidth), Animated.default.multiply(new Animated.default.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n\n      // While closing the drawer when user starts gesture outside of its area (in greyed\n      // out part of the window), we want the drawer to follow only once finger reaches the\n      // edge of the drawer.\n      // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n      // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n      // an arrow pointing left\n      // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    +---------------+    +---------------+    +---------------+    +---------------+\n      //\n      // For the above to work properly we define animated value that will keep\n      // start position of the gesture. Then we use that value to calculate how\n      // much we need to subtract from the dragX. If the gesture started on the\n      // greyed out area we take the distance from the edge of the drawer to the\n      // start position. Otherwise we don't subtract at all and the drawer be\n      // pulled back as soon as you start the pan.\n      //\n      // This is used only when drawerType is \"front\"\n      //\n      let translationX = dragX;\n      if (drawerType === 'front') {\n        const startPositionX = Animated.default.add(touchX, Animated.default.multiply(new Animated.default.Value(-1), dragX));\n        const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.default.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n      }\n      this.openValue = Animated.default.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      const gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n      if (this.props.onDrawerSlide) {\n        gestureOptions.listener = ev => {\n          const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          const position = translationX / this.state.containerWidth;\n          this.props.onDrawerSlide?.(position);\n        };\n      }\n      this.onGestureEvent = Animated.default.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    };\n    handleContainerLayout = ({\n      nativeEvent\n    }) => {\n      this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    };\n    emitStateChanged = (newState, drawerWillShow) => {\n      this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n    };\n    openingHandlerStateChange = ({\n      nativeEvent\n    }) => {\n      if (nativeEvent.oldState === _State.State.ACTIVE) {\n        this.handleRelease({\n          nativeEvent\n        });\n      } else if (nativeEvent.state === _State.State.ACTIVE) {\n        this.emitStateChanged(DRAGGING, false);\n        this.setState({\n          drawerState: DRAGGING\n        });\n        if (this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.default.dismiss();\n        }\n        if (this.props.hideStatusBar) {\n          StatusBar.default.setHidden(true, this.props.statusBarAnimation || 'slide');\n        }\n      }\n    };\n    onTapHandlerStateChange = ({\n      nativeEvent\n    }) => {\n      if (this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && this.props.drawerLockMode !== 'locked-open') {\n        this.closeDrawer();\n      }\n    };\n    handleRelease = ({\n      nativeEvent\n    }) => {\n      const {\n        drawerWidth,\n        drawerPosition,\n        drawerType\n      } = this.props;\n      const {\n        containerWidth\n      } = this.state;\n      let {\n        translationX: dragX,\n        velocityX,\n        x: touchX\n      } = nativeEvent;\n      if (drawerPosition !== 'left') {\n        // See description in _updateAnimatedEvent about why events are flipped\n        // for right-side drawer\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n      const gestureStartX = touchX - dragX;\n      let dragOffsetBasedOnStart = 0;\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n      const startOffsetX = dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth : 0);\n      const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      const shouldOpen = projOffsetX > drawerWidth / 2;\n      if (shouldOpen) {\n        this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    };\n    updateShowing = showing => {\n      this.drawerShown = showing;\n      this.accessibilityIsModalView.current?.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      this.pointerEventsView.current?.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      const {\n        drawerPosition,\n        minSwipeDistance,\n        edgeWidth\n      } = this.props;\n      const fromLeft = drawerPosition === 'left';\n      // gestureOrientation is 1 if the expected gesture is from left to right and\n      // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n      // to right gesture, thus orientation will be 1.\n      const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n      // When drawer is closed we want the hitSlop to be horizontally shorter than\n      // the container size by the value of SLOP. This will make it only activate\n      // when gesture happens not further than SLOP away from the edge\n      const hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      // @ts-ignore internal API, maybe could be fixed in handler types\n      this.panGestureHandler.current?.setNativeProps({\n        hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    };\n    animateDrawer = (fromValue, toValue, velocity, speed) => {\n      this.state.dragX.setValue(0);\n      this.state.touchX.setValue(this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth);\n      if (fromValue != null) {\n        let nextFramePosition = fromValue;\n        if (this.props.useNativeAnimations) {\n          // When using native driver, we predict the next position of the\n          // animation because it takes one frame of a roundtrip to pass RELEASE\n          // event from native driver to JS before we can start animating. Without\n          // it, it is more noticable that the frame is dropped.\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n        this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n      const willShow = toValue !== 0;\n      this.updateShowing(willShow);\n      this.emitStateChanged(SETTLING, willShow);\n      this.setState({\n        drawerState: SETTLING\n      });\n      if (this.props.hideStatusBar) {\n        StatusBar.default.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n      }\n      Animated.default.spring(this.state.drawerTranslation, {\n        velocity,\n        bounciness: 0,\n        toValue,\n        useNativeDriver: this.props.useNativeAnimations,\n        speed: speed ?? undefined\n      }).start(({\n        finished\n      }) => {\n        if (finished) {\n          this.emitStateChanged(IDLE, willShow);\n          this.setState({\n            drawerOpened: willShow\n          });\n          if (this.state.drawerState !== DRAGGING) {\n            // It's possilbe that user started drag while the drawer\n            // was settling, don't override state in this case\n            this.setState({\n              drawerState: IDLE\n            });\n          }\n          if (willShow) {\n            this.props.onDrawerOpen?.();\n          } else {\n            this.props.onDrawerClose?.();\n          }\n        }\n      });\n    };\n\n    // eslint-disable-next-line @eslint-react/no-unused-class-component-members\n    openDrawer = (options = {}) => {\n      this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined, this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed);\n\n      // We need to force the update, otherwise the overlay is not rerendered and\n      // it would not be clickable\n      this.forceUpdate();\n    };\n    closeDrawer = (options = {}) => {\n      // TODO: decide if it should be null or undefined is the proper value\n      this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed);\n\n      // We need to force the update, otherwise the overlay is not rerendered and\n      // it would be still clickable\n      this.forceUpdate();\n    };\n    renderOverlay = () => {\n      /* Overlay styles */\n      (0, invariant.default)(this.openValue, 'should be set');\n      let overlayOpacity;\n      if (this.state.drawerState !== IDLE) {\n        overlayOpacity = this.openValue;\n      } else {\n        overlayOpacity = this.state.drawerOpened ? 1 : 0;\n      }\n      const dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: this.props.overlayColor\n      };\n      return /*#__PURE__*/(0, _reactJsxRuntime.jsx)(_handlersTapGestureHandler.TapGestureHandler, {\n        onHandlerStateChange: this.onTapHandlerStateChange,\n        children: /*#__PURE__*/(0, _reactJsxRuntime.jsx)(Animated.default.View, {\n          pointerEvents: this.drawerShown ? 'auto' : 'none',\n          ref: this.pointerEventsView,\n          style: [styles.overlay, dynamicOverlayStyles]\n        })\n      });\n    };\n    renderDrawer = () => {\n      const {\n        drawerBackgroundColor,\n        drawerWidth,\n        drawerPosition,\n        drawerType,\n        drawerContainerStyle,\n        contentContainerStyle\n      } = this.props;\n      const fromLeft = drawerPosition === 'left';\n      const drawerSlide = drawerType !== 'back';\n      const containerSlide = drawerType !== 'front';\n\n      // We rely on row and row-reverse flex directions to position the drawer\n      // properly. Apparently for RTL these are flipped which requires us to use\n      // the opposite setting for the drawer to appear from left or right\n      // according to the drawerPosition prop\n      const reverseContentDirection = I18nManager.default.isRTL ? fromLeft : !fromLeft;\n      const dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      const openValue = this.openValue;\n      (0, invariant.default)(openValue, 'should be set');\n      let containerStyles;\n      if (containerSlide) {\n        const containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n      let drawerTranslateX = 0;\n      if (drawerSlide) {\n        const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        if (this.state.drawerState !== IDLE) {\n          drawerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [closedDrawerOffset, 0],\n            extrapolate: 'clamp'\n          });\n        } else {\n          drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n        }\n      }\n      const drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return /*#__PURE__*/(0, _reactJsxRuntime.jsxs)(Animated.default.View, {\n        style: styles.main,\n        onLayout: this.handleContainerLayout,\n        children: [/*#__PURE__*/(0, _reactJsxRuntime.jsxs)(Animated.default.View, {\n          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n          importantForAccessibility: this.drawerShown ? 'no-hide-descendants' : 'yes',\n          children: [typeof this.props.children === 'function' ? this.props.children(this.openValue) : this.props.children, this.renderOverlay()]\n        }), /*#__PURE__*/(0, _reactJsxRuntime.jsx)(Animated.default.View, {\n          pointerEvents: \"box-none\",\n          ref: this.accessibilityIsModalView,\n          accessibilityViewIsModal: this.drawerShown,\n          style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n          children: /*#__PURE__*/(0, _reactJsxRuntime.jsx)(View.default, {\n            style: dynamicDrawerStyles,\n            children: this.props.renderNavigationView(this.openValue)\n          })\n        })]\n      });\n    };\n    setPanGestureRef = ref => {\n      // TODO(TS): make sure it is OK taken from\n      // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n      this.panGestureHandler.current = ref;\n      this.props.onGestureRef?.(ref);\n    };\n    render() {\n      const {\n        drawerPosition,\n        drawerLockMode,\n        edgeWidth,\n        minSwipeDistance\n      } = this.props;\n      const fromLeft = drawerPosition === 'left';\n\n      // gestureOrientation is 1 if the expected gesture is from left to right and\n      // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n      // to right gesture, thus orientation will be 1.\n      const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n      // When drawer is closed we want the hitSlop to be horizontally shorter than\n      // the container size by the value of SLOP. This will make it only activate\n      // when gesture happens not further than SLOP away from the edge\n      const hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return /*#__PURE__*/(0, _reactJsxRuntime.jsx)(_handlersPanGestureHandler.PanGestureHandler // @ts-ignore could be fixed in handler types\n      , {\n        userSelect: this.props.userSelect,\n        activeCursor: this.props.activeCursor,\n        mouseButton: this.props.mouseButton,\n        enableContextMenu: this.props.enableContextMenu,\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n        children: this.renderDrawer()\n      });\n    }\n  }\n  const styles = StyleSheet.default.create({\n    drawerContainer: {\n      ...StyleSheet.default.absoluteFillObject,\n      zIndex: 1001,\n      flexDirection: 'row'\n    },\n    containerInFront: {\n      ...StyleSheet.default.absoluteFillObject,\n      zIndex: 1002\n    },\n    containerOnBack: {\n      ...StyleSheet.default.absoluteFillObject\n    },\n    main: {\n      flex: 1,\n      zIndex: 0,\n      overflow: 'hidden'\n    },\n    overlay: {\n      ...StyleSheet.default.absoluteFillObject,\n      zIndex: 1000\n    }\n  });\n});","lineCount":575,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,4,0],[6,2,5,0],[7,2,6,0],[8,2,7,0],[9,2,8,0],[10,2,9,0],[11,2,9,0,"Object"],[11,8,9,0],[11,9,9,0,"defineProperty"],[11,23,9,0],[11,24,9,0,"exports"],[11,31,9,0],[12,4,9,0,"value"],[12,9,9,0],[13,2,9,0],[14,2,9,0],[14,11,9,0,"_interopNamespace"],[14,29,9,0,"e"],[14,30,9,0],[15,4,9,0],[15,8,9,0,"e"],[15,9,9,0],[15,13,9,0,"e"],[15,14,9,0],[15,15,9,0,"__esModule"],[15,25,9,0],[15,34,9,0,"e"],[15,35,9,0],[16,4,9,0],[16,8,9,0,"n"],[16,9,9,0],[17,4,9,0],[17,8,9,0,"e"],[17,9,9,0],[17,11,9,0,"Object"],[17,17,9,0],[17,18,9,0,"keys"],[17,22,9,0],[17,23,9,0,"e"],[17,24,9,0],[17,26,9,0,"forEach"],[17,33,9,0],[17,44,9,0,"k"],[17,45,9,0],[18,6,9,0,"n"],[18,7,9,0],[18,8,9,0,"k"],[18,9,9,0],[18,13,9,0,"e"],[18,14,9,0],[18,15,9,0,"k"],[18,16,9,0],[19,4,9,0],[20,4,9,0,"n"],[20,5,9,0],[20,6,9,0,"default"],[20,13,9,0],[20,16,9,0,"e"],[20,17,9,0],[21,4,9,0],[21,11,9,0,"n"],[21,12,9,0],[22,2,9,0],[23,2,9,0],[23,11,9,0,"_interopDefault"],[23,27,9,0,"e"],[23,28,9,0],[24,4,9,0],[24,11,9,0,"e"],[24,12,9,0],[24,16,9,0,"e"],[24,17,9,0],[24,18,9,0,"__esModule"],[24,28,9,0],[24,31,9,0,"e"],[24,32,9,0],[25,6,9,0,"default"],[25,13,9,0],[25,15,9,0,"e"],[26,4,9,0],[27,2,9,0],[28,2,63,15,"Object"],[28,8,63,15],[28,9,63,15,"defineProperty"],[28,23,63,15],[28,24,63,15,"exports"],[28,31,63,15],[29,4,63,15,"enumerable"],[29,14,63,15],[30,4,63,15,"get"],[30,7,63,15],[30,18,63,15,"get"],[30,19,63,15],[31,6,63,15],[31,13,63,15,"DrawerLayout"],[31,25,63,15],[32,4,63,15],[33,2,63,15],[34,2,11,0],[34,6,11,0,"_react"],[34,12,11,0],[34,15,11,0,"require"],[34,22,11,0],[34,23,11,0,"_dependencyMap"],[34,37,11,0],[35,2,11,0],[35,6,11,0,"React"],[35,11,11,0],[35,14,11,0,"_interopNamespace"],[35,31,11,0],[35,32,11,0,"_react"],[35,38,11,0],[36,2,13,0],[36,6,13,0,"_invariant"],[36,16,13,0],[36,19,13,0,"require"],[36,26,13,0],[36,27,13,0,"_dependencyMap"],[36,41,13,0],[37,2,13,0],[37,6,13,0,"invariant"],[37,15,13,0],[37,18,13,0,"_interopDefault"],[37,33,13,0],[37,34,13,0,"_invariant"],[37,44,13,0],[38,2,13,34],[38,6,13,34,"_reactNativeWebDistExportsAnimated"],[38,40,13,34],[38,43,13,34,"require"],[38,50,13,34],[38,51,13,34,"_dependencyMap"],[38,65,13,34],[39,2,13,34],[39,6,13,34,"Animated"],[39,14,13,34],[39,17,13,34,"_interopDefault"],[39,32,13,34],[39,33,13,34,"_reactNativeWebDistExportsAnimated"],[39,67,13,34],[40,2,13,34],[40,6,13,34,"_reactNativeWebDistExportsStyleSheet"],[40,42,13,34],[40,45,13,34,"require"],[40,52,13,34],[40,53,13,34,"_dependencyMap"],[40,67,13,34],[41,2,13,34],[41,6,13,34,"StyleSheet"],[41,16,13,34],[41,19,13,34,"_interopDefault"],[41,34,13,34],[41,35,13,34,"_reactNativeWebDistExportsStyleSheet"],[41,71,13,34],[42,2,13,34],[42,6,13,34,"_reactNativeWebDistExportsView"],[42,36,13,34],[42,39,13,34,"require"],[42,46,13,34],[42,47,13,34,"_dependencyMap"],[42,61,13,34],[43,2,13,34],[43,6,13,34,"View"],[43,10,13,34],[43,13,13,34,"_interopDefault"],[43,28,13,34],[43,29,13,34,"_reactNativeWebDistExportsView"],[43,59,13,34],[44,2,13,34],[44,6,13,34,"_reactNativeWebDistExportsKeyboard"],[44,40,13,34],[44,43,13,34,"require"],[44,50,13,34],[44,51,13,34,"_dependencyMap"],[44,65,13,34],[45,2,13,34],[45,6,13,34,"Keyboard"],[45,14,13,34],[45,17,13,34,"_interopDefault"],[45,32,13,34],[45,33,13,34,"_reactNativeWebDistExportsKeyboard"],[45,67,13,34],[46,2,13,34],[46,6,13,34,"_reactNativeWebDistExportsStatusBar"],[46,41,13,34],[46,44,13,34,"require"],[46,51,13,34],[46,52,13,34,"_dependencyMap"],[46,66,13,34],[47,2,13,34],[47,6,13,34,"StatusBar"],[47,15,13,34],[47,18,13,34,"_interopDefault"],[47,33,13,34],[47,34,13,34,"_reactNativeWebDistExportsStatusBar"],[47,69,13,34],[48,2,13,34],[48,6,13,34,"_reactNativeWebDistExportsI18nManager"],[48,43,13,34],[48,46,13,34,"require"],[48,53,13,34],[48,54,13,34,"_dependencyMap"],[48,68,13,34],[49,2,13,34],[49,6,13,34,"I18nManager"],[49,17,13,34],[49,20,13,34,"_interopDefault"],[49,35,13,34],[49,36,13,34,"_reactNativeWebDistExportsI18nManager"],[49,73,13,34],[50,2,15,0],[50,6,15,0,"_handlersPanGestureHandler"],[50,32,15,0],[50,35,15,0,"require"],[50,42,15,0],[50,43,15,0,"_dependencyMap"],[50,57,15,0],[51,2,16,0],[51,6,16,0,"_handlersTapGestureHandler"],[51,32,16,0],[51,35,16,0,"require"],[51,42,16,0],[51,43,16,0,"_dependencyMap"],[51,57,16,0],[52,2,17,0],[52,6,17,0,"_State"],[52,12,17,0],[52,15,17,0,"require"],[52,22,17,0],[52,23,17,0,"_dependencyMap"],[52,37,17,0],[53,2,18,0],[53,6,18,0,"_reactJsxRuntime"],[53,22,18,0],[53,25,18,0,"require"],[53,32,18,0],[53,33,18,0,"_dependencyMap"],[53,47,18,0],[54,2,19,0],[54,8,19,6,"DRAG_TOSS"],[54,17,19,15],[54,20,19,18],[54,24,19,22],[55,2,20,0],[55,8,20,6,"IDLE"],[55,12,20,10],[55,15,20,13],[55,21,20,19],[56,2,21,0],[56,8,21,6,"DRAGGING"],[56,16,21,14],[56,19,21,17],[56,29,21,27],[57,2,22,0],[57,8,22,6,"SETTLING"],[57,16,22,14],[57,19,22,17],[57,29,22,27],[59,2,24,0],[60,0,25,0],[61,0,26,0],[63,2,28,0],[64,0,29,0],[65,0,30,0],[67,2,32,0],[68,0,33,0],[69,0,34,0],[71,2,36,0],[72,0,37,0],[73,0,38,0],[75,2,40,0],[76,0,41,0],[77,0,42,0],[79,2,44,0],[80,2,45,0],[81,2,46,0],[83,2,48,0],[84,0,49,0],[85,0,50,0],[87,2,52,0],[88,0,53,0],[89,0,54,0],[91,2,56,0],[92,0,57,0],[93,0,58,0],[95,2,60,0],[96,0,61,0],[97,0,62,0],[98,2,63,15],[98,8,63,21,"DrawerLayout"],[98,20,63,33],[98,29,63,42,"Component"],[98,35,63,51],[98,36,63,51,"Component"],[98,45,63,51],[98,46,63,52],[99,4,64,2],[99,11,64,9,"defaultProps"],[99,23,64,21],[99,26,64,24],[100,6,65,4,"drawerWidth"],[100,17,65,15],[100,19,65,17],[100,22,65,20],[101,6,66,4,"drawerPosition"],[101,20,66,18],[101,22,66,20],[101,28,66,26],[102,6,67,4,"useNativeAnimations"],[102,25,67,23],[102,27,67,25],[102,31,67,29],[103,6,68,4,"drawerType"],[103,16,68,14],[103,18,68,16],[103,25,68,23],[104,6,69,4,"edgeWidth"],[104,15,69,13],[104,17,69,15],[104,19,69,17],[105,6,70,4,"minSwipeDistance"],[105,22,70,20],[105,24,70,22],[105,25,70,23],[106,6,71,4,"overlayColor"],[106,18,71,16],[106,20,71,18],[106,40,71,38],[107,6,72,4,"drawerLockMode"],[107,20,72,18],[107,22,72,20],[107,32,72,30],[108,6,73,4,"enableTrackpadTwoFingerGesture"],[108,36,73,34],[108,38,73,36],[109,4,74,2],[109,5,74,3],[110,4,75,2,"constructor"],[110,15,75,13,"constructor"],[110,16,75,14,"props"],[110,21,75,19],[110,23,75,21],[111,6,76,4],[111,11,76,9],[111,12,76,10,"props"],[111,17,76,15],[111,18,76,16],[112,6,77,4],[112,12,77,10,"dragX"],[112,17,77,15],[112,20,77,18],[112,24,77,22,"Animated"],[112,32,77,30],[112,33,77,30,"default"],[112,40,77,30],[112,41,77,31,"Value"],[112,46,77,36],[112,47,77,37],[112,48,77,38],[112,49,77,39],[113,6,78,4],[113,12,78,10,"touchX"],[113,18,78,16],[113,21,78,19],[113,25,78,23,"Animated"],[113,33,78,31],[113,34,78,31,"default"],[113,41,78,31],[113,42,78,32,"Value"],[113,47,78,37],[113,48,78,38],[113,49,78,39],[113,50,78,40],[114,6,79,4],[114,12,79,10,"drawerTranslation"],[114,29,79,27],[114,32,79,30],[114,36,79,34,"Animated"],[114,44,79,42],[114,45,79,42,"default"],[114,52,79,42],[114,53,79,43,"Value"],[114,58,79,48],[114,59,79,49],[114,60,79,50],[114,61,79,51],[115,6,80,4],[115,10,80,8],[115,11,80,9,"state"],[115,16,80,14],[115,19,80,17],[116,8,81,6,"dragX"],[116,13,81,11],[117,8,82,6,"touchX"],[117,14,82,12],[118,8,83,6,"drawerTranslation"],[118,25,83,23],[119,8,84,6,"containerWidth"],[119,22,84,20],[119,24,84,22],[119,25,84,23],[120,8,85,6,"drawerState"],[120,19,85,17],[120,21,85,19,"IDLE"],[120,25,85,23],[121,8,86,6,"drawerOpened"],[121,20,86,18],[121,22,86,20],[122,6,87,4],[122,7,87,5],[123,6,88,4],[123,10,88,8],[123,11,88,9,"updateAnimatedEvent"],[123,30,88,28],[123,31,88,29,"props"],[123,36,88,34],[123,38,88,36],[123,42,88,40],[123,43,88,41,"state"],[123,48,88,46],[123,49,88,47],[124,4,89,2],[125,4,90,2,"shouldComponentUpdate"],[125,25,90,23,"shouldComponentUpdate"],[125,26,90,24,"props"],[125,31,90,29],[125,33,90,31,"state"],[125,38,90,36],[125,40,90,38],[126,6,91,4],[126,10,91,8],[126,14,91,12],[126,15,91,13,"props"],[126,20,91,18],[126,21,91,19,"drawerPosition"],[126,35,91,33],[126,40,91,38,"props"],[126,45,91,43],[126,46,91,44,"drawerPosition"],[126,60,91,58],[126,64,91,62],[126,68,91,66],[126,69,91,67,"props"],[126,74,91,72],[126,75,91,73,"drawerWidth"],[126,86,91,84],[126,91,91,89,"props"],[126,96,91,94],[126,97,91,95,"drawerWidth"],[126,108,91,106],[126,112,91,110],[126,116,91,114],[126,117,91,115,"props"],[126,122,91,120],[126,123,91,121,"drawerType"],[126,133,91,131],[126,138,91,136,"props"],[126,143,91,141],[126,144,91,142,"drawerType"],[126,154,91,152],[126,158,91,156],[126,162,91,160],[126,163,91,161,"state"],[126,168,91,166],[126,169,91,167,"containerWidth"],[126,183,91,181],[126,188,91,186,"state"],[126,193,91,191],[126,194,91,192,"containerWidth"],[126,208,91,206],[126,210,91,208],[127,8,92,6],[127,12,92,10],[127,13,92,11,"updateAnimatedEvent"],[127,32,92,30],[127,33,92,31,"props"],[127,38,92,36],[127,40,92,38,"state"],[127,45,92,43],[127,46,92,44],[128,6,93,4],[129,6,94,4],[129,13,94,11],[129,17,94,15],[130,4,95,2],[131,4,96,2,"accessibilityIsModalView"],[131,28,96,26],[131,31,96,29],[131,44,96,42,"React"],[131,49,96,47],[131,50,96,48,"createRef"],[131,59,96,57],[131,60,96,58],[131,61,96,59],[132,4,97,2,"pointerEventsView"],[132,21,97,19],[132,24,97,22],[132,37,97,35,"React"],[132,42,97,40],[132,43,97,41,"createRef"],[132,52,97,50],[132,53,97,51],[132,54,97,52],[133,4,98,2,"panGestureHandler"],[133,21,98,19],[133,24,98,22],[133,37,98,35,"React"],[133,42,98,40],[133,43,98,41,"createRef"],[133,52,98,50],[133,53,98,51],[133,54,98,52],[134,4,99,2,"drawerShown"],[134,15,99,13],[134,18,99,16],[134,23,99,21],[135,4,100,2],[135,11,100,9,"positions"],[135,20,100,18],[135,23,100,21],[136,6,101,4,"Left"],[136,10,101,8],[136,12,101,10],[136,18,101,16],[137,6,102,4,"Right"],[137,11,102,9],[137,13,102,11],[138,4,103,2],[138,5,103,3],[139,4,104,2,"updateAnimatedEvent"],[139,23,104,21],[139,26,104,24,"updateAnimatedEvent"],[139,27,104,25,"props"],[139,32,104,30],[139,34,104,32,"state"],[139,39,104,37],[139,44,104,42],[140,6,105,4],[141,6,106,4],[141,12,106,10],[142,8,107,6,"drawerPosition"],[142,22,107,20],[143,8,108,6,"drawerWidth"],[143,19,108,17],[144,8,109,6,"drawerType"],[145,6,110,4],[145,7,110,5],[145,10,110,8,"props"],[145,15,110,13],[146,6,111,4],[146,12,111,10],[147,8,112,6,"dragX"],[147,13,112,11],[147,15,112,13,"dragXValue"],[147,25,112,23],[148,8,113,6,"touchX"],[148,14,113,12],[148,16,113,14,"touchXValue"],[148,27,113,25],[149,8,114,6,"drawerTranslation"],[149,25,114,23],[150,8,115,6,"containerWidth"],[151,6,116,4],[151,7,116,5],[151,10,116,8,"state"],[151,15,116,13],[152,6,117,4],[152,10,117,8,"dragX"],[152,15,117,13],[152,18,117,16,"dragXValue"],[152,28,117,26],[153,6,118,4],[153,10,118,8,"touchX"],[153,16,118,14],[153,19,118,17,"touchXValue"],[153,30,118,28],[154,6,119,4],[154,10,119,8,"drawerPosition"],[154,24,119,22],[154,29,119,27],[154,35,119,33],[154,37,119,35],[155,8,120,6],[156,8,121,6],[157,8,122,6],[158,8,123,6],[159,8,124,6],[160,8,125,6],[161,8,126,6,"dragX"],[161,13,126,11],[161,16,126,14,"Animated"],[161,24,126,22],[161,25,126,22,"default"],[161,32,126,22],[161,33,126,23,"multiply"],[161,41,126,31],[161,42,126,32],[161,46,126,36,"Animated"],[161,54,126,44],[161,55,126,44,"default"],[161,62,126,44],[161,63,126,45,"Value"],[161,68,126,50],[161,69,126,51],[161,70,126,52],[161,71,126,53],[161,72,126,54],[161,74,126,56,"dragXValue"],[161,84,126,66],[161,85,126,67],[161,86,126,68],[161,87,126,69],[162,8,127,6,"touchX"],[162,14,127,12],[162,17,127,15,"Animated"],[162,25,127,23],[162,26,127,23,"default"],[162,33,127,23],[162,34,127,24,"add"],[162,37,127,27],[162,38,127,28],[162,42,127,32,"Animated"],[162,50,127,40],[162,51,127,40,"default"],[162,58,127,40],[162,59,127,41,"Value"],[162,64,127,46],[162,65,127,47,"containerWidth"],[162,79,127,61],[162,80,127,62],[162,82,127,64,"Animated"],[162,90,127,72],[162,91,127,72,"default"],[162,98,127,72],[162,99,127,73,"multiply"],[162,107,127,81],[162,108,127,82],[162,112,127,86,"Animated"],[162,120,127,94],[162,121,127,94,"default"],[162,128,127,94],[162,129,127,95,"Value"],[162,134,127,100],[162,135,127,101],[162,136,127,102],[162,137,127,103],[162,138,127,104],[162,140,127,106,"touchXValue"],[162,151,127,117],[162,152,127,118],[162,153,127,119],[162,154,127,120],[162,155,127,121],[163,8,128,6,"touchXValue"],[163,19,128,17],[163,20,128,18,"setValue"],[163,28,128,26],[163,29,128,27,"containerWidth"],[163,43,128,41],[163,44,128,42],[164,6,129,4],[164,7,129,5],[164,13,129,11],[165,8,130,6,"touchXValue"],[165,19,130,17],[165,20,130,18,"setValue"],[165,28,130,26],[165,29,130,27],[165,30,130,28],[165,31,130,29],[166,6,131,4],[168,6,133,4],[169,6,134,4],[170,6,135,4],[171,6,136,4],[172,6,137,4],[173,6,138,4],[174,6,139,4],[175,6,140,4],[176,6,141,4],[177,6,142,4],[178,6,143,4],[179,6,144,4],[180,6,145,4],[181,6,146,4],[182,6,147,4],[183,6,148,4],[184,6,149,4],[185,6,150,4],[186,6,151,4],[187,6,152,4],[188,6,153,4],[189,6,154,4],[190,6,155,4],[191,6,156,4],[192,6,157,4],[193,6,158,4],[193,10,158,8,"translationX"],[193,22,158,20],[193,25,158,23,"dragX"],[193,30,158,28],[194,6,159,4],[194,10,159,8,"drawerType"],[194,20,159,18],[194,25,159,23],[194,32,159,30],[194,34,159,32],[195,8,160,6],[195,14,160,12,"startPositionX"],[195,28,160,26],[195,31,160,29,"Animated"],[195,39,160,37],[195,40,160,37,"default"],[195,47,160,37],[195,48,160,38,"add"],[195,51,160,41],[195,52,160,42,"touchX"],[195,58,160,48],[195,60,160,50,"Animated"],[195,68,160,58],[195,69,160,58,"default"],[195,76,160,58],[195,77,160,59,"multiply"],[195,85,160,67],[195,86,160,68],[195,90,160,72,"Animated"],[195,98,160,80],[195,99,160,80,"default"],[195,106,160,80],[195,107,160,81,"Value"],[195,112,160,86],[195,113,160,87],[195,114,160,88],[195,115,160,89],[195,116,160,90],[195,118,160,92,"dragX"],[195,123,160,97],[195,124,160,98],[195,125,160,99],[196,8,161,6],[196,14,161,12,"dragOffsetFromOnStartPosition"],[196,43,161,41],[196,46,161,44,"startPositionX"],[196,60,161,58],[196,61,161,59,"interpolate"],[196,72,161,70],[196,73,161,71],[197,10,162,8,"inputRange"],[197,20,162,18],[197,22,162,20],[197,23,162,21,"drawerWidth"],[197,34,162,32],[197,37,162,35],[197,38,162,36],[197,40,162,38,"drawerWidth"],[197,51,162,49],[197,53,162,51,"drawerWidth"],[197,64,162,62],[197,67,162,65],[197,68,162,66],[197,69,162,67],[198,10,163,8,"outputRange"],[198,21,163,19],[198,23,163,21],[198,24,163,22],[198,25,163,23],[198,27,163,25],[198,28,163,26],[198,30,163,28],[198,31,163,29],[199,8,164,6],[199,9,164,7],[199,10,164,8],[200,8,165,6,"translationX"],[200,20,165,18],[200,23,165,21,"Animated"],[200,31,165,29],[200,32,165,29,"default"],[200,39,165,29],[200,40,165,30,"add"],[200,43,165,33],[200,44,165,34,"dragX"],[200,49,165,39],[200,51,165,41,"dragOffsetFromOnStartPosition"],[200,80,165,70],[200,81,165,71],[200,82,165,72],[200,83,165,73],[201,6,166,4],[202,6,167,4],[202,10,167,8],[202,11,167,9,"openValue"],[202,20,167,18],[202,23,167,21,"Animated"],[202,31,167,29],[202,32,167,29,"default"],[202,39,167,29],[202,40,167,30,"add"],[202,43,167,33],[202,44,167,34,"translationX"],[202,56,167,46],[202,58,167,48,"drawerTranslation"],[202,75,167,65],[202,76,167,66],[202,77,167,67,"interpolate"],[202,88,167,78],[202,89,167,79],[203,8,168,6,"inputRange"],[203,18,168,16],[203,20,168,18],[203,21,168,19],[203,22,168,20],[203,24,168,22,"drawerWidth"],[203,35,168,33],[203,36,168,34],[204,8,169,6,"outputRange"],[204,19,169,17],[204,21,169,19],[204,22,169,20],[204,23,169,21],[204,25,169,23],[204,26,169,24],[204,27,169,25],[205,8,170,6,"extrapolate"],[205,19,170,17],[205,21,170,19],[206,6,171,4],[206,7,171,5],[206,8,171,6],[207,6,172,4],[207,12,172,10,"gestureOptions"],[207,26,172,24],[207,29,172,27],[208,8,173,6,"useNativeDriver"],[208,23,173,21],[208,25,173,23,"props"],[208,30,173,28],[208,31,173,29,"useNativeAnimations"],[209,6,174,4],[209,7,174,5],[210,6,175,4],[210,10,175,8],[210,14,175,12],[210,15,175,13,"props"],[210,20,175,18],[210,21,175,19,"onDrawerSlide"],[210,34,175,32],[210,36,175,34],[211,8,176,6,"gestureOptions"],[211,22,176,20],[211,23,176,21,"listener"],[211,31,176,29],[211,34,176,32,"ev"],[211,36,176,34],[211,40,176,38],[212,10,177,8],[212,16,177,14,"translationX"],[212,28,177,26],[212,31,177,29,"Math"],[212,35,177,33],[212,36,177,34,"floor"],[212,41,177,39],[212,42,177,40,"Math"],[212,46,177,44],[212,47,177,45,"abs"],[212,50,177,48],[212,51,177,49,"ev"],[212,53,177,51],[212,54,177,52,"nativeEvent"],[212,65,177,63],[212,66,177,64,"translationX"],[212,78,177,76],[212,79,177,77],[212,80,177,78],[213,10,178,8],[213,16,178,14,"position"],[213,24,178,22],[213,27,178,25,"translationX"],[213,39,178,37],[213,42,178,40],[213,46,178,44],[213,47,178,45,"state"],[213,52,178,50],[213,53,178,51,"containerWidth"],[213,67,178,65],[214,10,179,8],[214,14,179,12],[214,15,179,13,"props"],[214,20,179,18],[214,21,179,19,"onDrawerSlide"],[214,34,179,32],[214,37,179,35,"position"],[214,45,179,43],[214,46,179,44],[215,8,180,6],[215,9,180,7],[216,6,181,4],[217,6,182,4],[217,10,182,8],[217,11,182,9,"onGestureEvent"],[217,25,182,23],[217,28,182,26,"Animated"],[217,36,182,34],[217,37,182,34,"default"],[217,44,182,34],[217,45,182,35,"event"],[217,50,182,40],[217,51,182,41],[217,52,182,42],[218,8,183,6,"nativeEvent"],[218,19,183,17],[218,21,183,19],[219,10,184,8,"translationX"],[219,22,184,20],[219,24,184,22,"dragXValue"],[219,34,184,32],[220,10,185,8,"x"],[220,11,185,9],[220,13,185,11,"touchXValue"],[221,8,186,6],[222,6,187,4],[222,7,187,5],[222,8,187,6],[222,10,187,8,"gestureOptions"],[222,24,187,22],[222,25,187,23],[223,4,188,2],[223,5,188,3],[224,4,189,2,"handleContainerLayout"],[224,25,189,23],[224,28,189,26,"handleContainerLayout"],[224,29,189,27],[225,6,190,4,"nativeEvent"],[226,4,191,2],[226,5,191,3],[226,10,191,8],[227,6,192,4],[227,10,192,8],[227,11,192,9,"setState"],[227,19,192,17],[227,20,192,18],[228,8,193,6,"containerWidth"],[228,22,193,20],[228,24,193,22,"nativeEvent"],[228,35,193,33],[228,36,193,34,"layout"],[228,42,193,40],[228,43,193,41,"width"],[229,6,194,4],[229,7,194,5],[229,8,194,6],[230,4,195,2],[230,5,195,3],[231,4,196,2,"emitStateChanged"],[231,20,196,18],[231,23,196,21,"emitStateChanged"],[231,24,196,22,"newState"],[231,32,196,30],[231,34,196,32,"drawerWillShow"],[231,48,196,46],[231,53,196,51],[232,6,197,4],[232,10,197,8],[232,11,197,9,"props"],[232,16,197,14],[232,17,197,15,"onDrawerStateChanged"],[232,37,197,35],[232,40,197,38,"newState"],[232,48,197,46],[232,50,197,48,"drawerWillShow"],[232,64,197,62],[232,65,197,63],[233,4,198,2],[233,5,198,3],[234,4,199,2,"openingHandlerStateChange"],[234,29,199,27],[234,32,199,30,"openingHandlerStateChange"],[234,33,199,31],[235,6,200,4,"nativeEvent"],[236,4,201,2],[236,5,201,3],[236,10,201,8],[237,6,202,4],[237,10,202,8,"nativeEvent"],[237,21,202,19],[237,22,202,20,"oldState"],[237,30,202,28],[237,35,202,33,"State"],[237,41,202,38],[237,42,202,38,"State"],[237,47,202,38],[237,48,202,39,"ACTIVE"],[237,54,202,45],[237,56,202,47],[238,8,203,6],[238,12,203,10],[238,13,203,11,"handleRelease"],[238,26,203,24],[238,27,203,25],[239,10,204,8,"nativeEvent"],[240,8,205,6],[240,9,205,7],[240,10,205,8],[241,6,206,4],[241,7,206,5],[241,13,206,11],[241,17,206,15,"nativeEvent"],[241,28,206,26],[241,29,206,27,"state"],[241,34,206,32],[241,39,206,37,"State"],[241,45,206,42],[241,46,206,42,"State"],[241,51,206,42],[241,52,206,43,"ACTIVE"],[241,58,206,49],[241,60,206,51],[242,8,207,6],[242,12,207,10],[242,13,207,11,"emitStateChanged"],[242,29,207,27],[242,30,207,28,"DRAGGING"],[242,38,207,36],[242,40,207,38],[242,45,207,43],[242,46,207,44],[243,8,208,6],[243,12,208,10],[243,13,208,11,"setState"],[243,21,208,19],[243,22,208,20],[244,10,209,8,"drawerState"],[244,21,209,19],[244,23,209,21,"DRAGGING"],[245,8,210,6],[245,9,210,7],[245,10,210,8],[246,8,211,6],[246,12,211,10],[246,16,211,14],[246,17,211,15,"props"],[246,22,211,20],[246,23,211,21,"keyboardDismissMode"],[246,42,211,40],[246,47,211,45],[246,56,211,54],[246,58,211,56],[247,10,212,8,"Keyboard"],[247,18,212,16],[247,19,212,16,"default"],[247,26,212,16],[247,27,212,17,"dismiss"],[247,34,212,24],[247,35,212,25],[247,36,212,26],[248,8,213,6],[249,8,214,6],[249,12,214,10],[249,16,214,14],[249,17,214,15,"props"],[249,22,214,20],[249,23,214,21,"hideStatusBar"],[249,36,214,34],[249,38,214,36],[250,10,215,8,"StatusBar"],[250,19,215,17],[250,20,215,17,"default"],[250,27,215,17],[250,28,215,18,"setHidden"],[250,37,215,27],[250,38,215,28],[250,42,215,32],[250,44,215,34],[250,48,215,38],[250,49,215,39,"props"],[250,54,215,44],[250,55,215,45,"statusBarAnimation"],[250,73,215,63],[250,77,215,67],[250,84,215,74],[250,85,215,75],[251,8,216,6],[252,6,217,4],[253,4,218,2],[253,5,218,3],[254,4,219,2,"onTapHandlerStateChange"],[254,27,219,25],[254,30,219,28,"onTapHandlerStateChange"],[254,31,219,29],[255,6,220,4,"nativeEvent"],[256,4,221,2],[256,5,221,3],[256,10,221,8],[257,6,222,4],[257,10,222,8],[257,14,222,12],[257,15,222,13,"drawerShown"],[257,26,222,24],[257,30,222,28,"nativeEvent"],[257,41,222,39],[257,42,222,40,"oldState"],[257,50,222,48],[257,55,222,53,"State"],[257,61,222,58],[257,62,222,58,"State"],[257,67,222,58],[257,68,222,59,"ACTIVE"],[257,74,222,65],[257,78,222,69],[257,82,222,73],[257,83,222,74,"props"],[257,88,222,79],[257,89,222,80,"drawerLockMode"],[257,103,222,94],[257,108,222,99],[257,121,222,112],[257,123,222,114],[258,8,223,6],[258,12,223,10],[258,13,223,11,"closeDrawer"],[258,24,223,22],[258,25,223,23],[258,26,223,24],[259,6,224,4],[260,4,225,2],[260,5,225,3],[261,4,226,2,"handleRelease"],[261,17,226,15],[261,20,226,18,"handleRelease"],[261,21,226,19],[262,6,227,4,"nativeEvent"],[263,4,228,2],[263,5,228,3],[263,10,228,8],[264,6,229,4],[264,12,229,10],[265,8,230,6,"drawerWidth"],[265,19,230,17],[266,8,231,6,"drawerPosition"],[266,22,231,20],[267,8,232,6,"drawerType"],[268,6,233,4],[268,7,233,5],[268,10,233,8],[268,14,233,12],[268,15,233,13,"props"],[268,20,233,18],[269,6,234,4],[269,12,234,10],[270,8,235,6,"containerWidth"],[271,6,236,4],[271,7,236,5],[271,10,236,8],[271,14,236,12],[271,15,236,13,"state"],[271,20,236,18],[272,6,237,4],[272,10,237,8],[273,8,238,6,"translationX"],[273,20,238,18],[273,22,238,20,"dragX"],[273,27,238,25],[274,8,239,6,"velocityX"],[274,17,239,15],[275,8,240,6,"x"],[275,9,240,7],[275,11,240,9,"touchX"],[276,6,241,4],[276,7,241,5],[276,10,241,8,"nativeEvent"],[276,21,241,19],[277,6,242,4],[277,10,242,8,"drawerPosition"],[277,24,242,22],[277,29,242,27],[277,35,242,33],[277,37,242,35],[278,8,243,6],[279,8,244,6],[280,8,245,6,"dragX"],[280,13,245,11],[280,16,245,14],[280,17,245,15,"dragX"],[280,22,245,20],[281,8,246,6,"touchX"],[281,14,246,12],[281,17,246,15,"containerWidth"],[281,31,246,29],[281,34,246,32,"touchX"],[281,40,246,38],[282,8,247,6,"velocityX"],[282,17,247,15],[282,20,247,18],[282,21,247,19,"velocityX"],[282,30,247,28],[283,6,248,4],[284,6,249,4],[284,12,249,10,"gestureStartX"],[284,25,249,23],[284,28,249,26,"touchX"],[284,34,249,32],[284,37,249,35,"dragX"],[284,42,249,40],[285,6,250,4],[285,10,250,8,"dragOffsetBasedOnStart"],[285,32,250,30],[285,35,250,33],[285,36,250,34],[286,6,251,4],[286,10,251,8,"drawerType"],[286,20,251,18],[286,25,251,23],[286,32,251,30],[286,34,251,32],[287,8,252,6,"dragOffsetBasedOnStart"],[287,30,252,28],[287,33,252,31,"gestureStartX"],[287,46,252,44],[287,49,252,47,"drawerWidth"],[287,60,252,58],[287,63,252,61,"gestureStartX"],[287,76,252,74],[287,79,252,77,"drawerWidth"],[287,90,252,88],[287,93,252,91],[287,94,252,92],[288,6,253,4],[289,6,254,4],[289,12,254,10,"startOffsetX"],[289,24,254,22],[289,27,254,25,"dragX"],[289,32,254,30],[289,35,254,33,"dragOffsetBasedOnStart"],[289,57,254,55],[289,61,254,59],[289,65,254,63],[289,66,254,64,"drawerShown"],[289,77,254,75],[289,80,254,78,"drawerWidth"],[289,91,254,89],[289,94,254,92],[289,95,254,93],[289,96,254,94],[290,6,255,4],[290,12,255,10,"projOffsetX"],[290,23,255,21],[290,26,255,24,"startOffsetX"],[290,38,255,36],[290,41,255,39,"DRAG_TOSS"],[290,50,255,48],[290,53,255,51,"velocityX"],[290,62,255,60],[291,6,256,4],[291,12,256,10,"shouldOpen"],[291,22,256,20],[291,25,256,23,"projOffsetX"],[291,36,256,34],[291,39,256,37,"drawerWidth"],[291,50,256,48],[291,53,256,51],[291,54,256,52],[292,6,257,4],[292,10,257,8,"shouldOpen"],[292,20,257,18],[292,22,257,20],[293,8,258,6],[293,12,258,10],[293,13,258,11,"animateDrawer"],[293,26,258,24],[293,27,258,25,"startOffsetX"],[293,39,258,37],[293,41,258,39,"drawerWidth"],[293,52,258,50],[293,54,258,52,"velocityX"],[293,63,258,61],[293,64,258,62],[294,6,259,4],[294,7,259,5],[294,13,259,11],[295,8,260,6],[295,12,260,10],[295,13,260,11,"animateDrawer"],[295,26,260,24],[295,27,260,25,"startOffsetX"],[295,39,260,37],[295,41,260,39],[295,42,260,40],[295,44,260,42,"velocityX"],[295,53,260,51],[295,54,260,52],[296,6,261,4],[297,4,262,2],[297,5,262,3],[298,4,263,2,"updateShowing"],[298,17,263,15],[298,20,263,18,"showing"],[298,27,263,25],[298,31,263,29],[299,6,264,4],[299,10,264,8],[299,11,264,9,"drawerShown"],[299,22,264,20],[299,25,264,23,"showing"],[299,32,264,30],[300,6,265,4],[300,10,265,8],[300,11,265,9,"accessibilityIsModalView"],[300,35,265,33],[300,36,265,34,"current"],[300,43,265,41],[300,45,265,43,"setNativeProps"],[300,59,265,57],[300,60,265,58],[301,8,266,6,"accessibilityViewIsModal"],[301,32,266,30],[301,34,266,32,"showing"],[302,6,267,4],[302,7,267,5],[302,8,267,6],[303,6,268,4],[303,10,268,8],[303,11,268,9,"pointerEventsView"],[303,28,268,26],[303,29,268,27,"current"],[303,36,268,34],[303,38,268,36,"setNativeProps"],[303,52,268,50],[303,53,268,51],[304,8,269,6,"pointerEvents"],[304,21,269,19],[304,23,269,21,"showing"],[304,30,269,28],[304,33,269,31],[304,39,269,37],[304,42,269,40],[305,6,270,4],[305,7,270,5],[305,8,270,6],[306,6,271,4],[306,12,271,10],[307,8,272,6,"drawerPosition"],[307,22,272,20],[308,8,273,6,"minSwipeDistance"],[308,24,273,22],[309,8,274,6,"edgeWidth"],[310,6,275,4],[310,7,275,5],[310,10,275,8],[310,14,275,12],[310,15,275,13,"props"],[310,20,275,18],[311,6,276,4],[311,12,276,10,"fromLeft"],[311,20,276,18],[311,23,276,21,"drawerPosition"],[311,37,276,35],[311,42,276,40],[311,48,276,46],[312,6,277,4],[313,6,278,4],[314,6,279,4],[315,6,280,4],[315,12,280,10,"gestureOrientation"],[315,30,280,28],[315,33,280,31],[315,34,280,32,"fromLeft"],[315,42,280,40],[315,45,280,43],[315,46,280,44],[315,49,280,47],[315,50,280,48],[315,51,280,49],[315,56,280,54],[315,60,280,58],[315,61,280,59,"drawerShown"],[315,72,280,70],[315,75,280,73],[315,76,280,74],[315,77,280,75],[315,80,280,78],[315,81,280,79],[315,82,280,80],[316,6,281,4],[317,6,282,4],[318,6,283,4],[319,6,284,4],[319,12,284,10,"hitSlop"],[319,19,284,17],[319,22,284,20,"fromLeft"],[319,30,284,28],[319,33,284,31],[320,8,285,6,"left"],[320,12,285,10],[320,14,285,12],[320,15,285,13],[321,8,286,6,"width"],[321,13,286,11],[321,15,286,13,"showing"],[321,22,286,20],[321,25,286,23,"undefined"],[321,34,286,32],[321,37,286,35,"edgeWidth"],[322,6,287,4],[322,7,287,5],[322,10,287,8],[323,8,288,6,"right"],[323,13,288,11],[323,15,288,13],[323,16,288,14],[324,8,289,6,"width"],[324,13,289,11],[324,15,289,13,"showing"],[324,22,289,20],[324,25,289,23,"undefined"],[324,34,289,32],[324,37,289,35,"edgeWidth"],[325,6,290,4],[325,7,290,5],[326,6,291,4],[327,6,292,4],[327,10,292,8],[327,11,292,9,"panGestureHandler"],[327,28,292,26],[327,29,292,27,"current"],[327,36,292,34],[327,38,292,36,"setNativeProps"],[327,52,292,50],[327,53,292,51],[328,8,293,6,"hitSlop"],[328,15,293,13],[329,8,294,6,"activeOffsetX"],[329,21,294,19],[329,23,294,21,"gestureOrientation"],[329,41,294,39],[329,44,294,42,"minSwipeDistance"],[330,6,295,4],[330,7,295,5],[330,8,295,6],[331,4,296,2],[331,5,296,3],[332,4,297,2,"animateDrawer"],[332,17,297,15],[332,20,297,18,"animateDrawer"],[332,21,297,19,"fromValue"],[332,30,297,28],[332,32,297,30,"toValue"],[332,39,297,37],[332,41,297,39,"velocity"],[332,49,297,47],[332,51,297,49,"speed"],[332,56,297,54],[332,61,297,59],[333,6,298,4],[333,10,298,8],[333,11,298,9,"state"],[333,16,298,14],[333,17,298,15,"dragX"],[333,22,298,20],[333,23,298,21,"setValue"],[333,31,298,29],[333,32,298,30],[333,33,298,31],[333,34,298,32],[334,6,299,4],[334,10,299,8],[334,11,299,9,"state"],[334,16,299,14],[334,17,299,15,"touchX"],[334,23,299,21],[334,24,299,22,"setValue"],[334,32,299,30],[334,33,299,31],[334,37,299,35],[334,38,299,36,"props"],[334,43,299,41],[334,44,299,42,"drawerPosition"],[334,58,299,56],[334,63,299,61],[334,69,299,67],[334,72,299,70],[334,73,299,71],[334,76,299,74],[334,80,299,78],[334,81,299,79,"state"],[334,86,299,84],[334,87,299,85,"containerWidth"],[334,101,299,99],[334,102,299,100],[335,6,300,4],[335,10,300,8,"fromValue"],[335,19,300,17],[335,23,300,21],[335,27,300,25],[335,29,300,27],[336,8,301,6],[336,12,301,10,"nextFramePosition"],[336,29,301,27],[336,32,301,30,"fromValue"],[336,41,301,39],[337,8,302,6],[337,12,302,10],[337,16,302,14],[337,17,302,15,"props"],[337,22,302,20],[337,23,302,21,"useNativeAnimations"],[337,42,302,40],[337,44,302,42],[338,10,303,8],[339,10,304,8],[340,10,305,8],[341,10,306,8],[342,10,307,8],[342,14,307,12,"fromValue"],[342,23,307,21],[342,26,307,24,"toValue"],[342,33,307,31],[342,37,307,35,"velocity"],[342,45,307,43],[342,48,307,46],[342,49,307,47],[342,51,307,49],[343,12,308,10,"nextFramePosition"],[343,29,308,27],[343,32,308,30,"Math"],[343,36,308,34],[343,37,308,35,"min"],[343,40,308,38],[343,41,308,39,"fromValue"],[343,50,308,48],[343,53,308,51,"velocity"],[343,61,308,59],[343,64,308,62],[343,68,308,66],[343,70,308,68,"toValue"],[343,77,308,75],[343,78,308,76],[344,10,309,8],[344,11,309,9],[344,17,309,15],[344,21,309,19,"fromValue"],[344,30,309,28],[344,33,309,31,"toValue"],[344,40,309,38],[344,44,309,42,"velocity"],[344,52,309,50],[344,55,309,53],[344,56,309,54],[344,58,309,56],[345,12,310,10,"nextFramePosition"],[345,29,310,27],[345,32,310,30,"Math"],[345,36,310,34],[345,37,310,35,"max"],[345,40,310,38],[345,41,310,39,"fromValue"],[345,50,310,48],[345,53,310,51,"velocity"],[345,61,310,59],[345,64,310,62],[345,68,310,66],[345,70,310,68,"toValue"],[345,77,310,75],[345,78,310,76],[346,10,311,8],[347,8,312,6],[348,8,313,6],[348,12,313,10],[348,13,313,11,"state"],[348,18,313,16],[348,19,313,17,"drawerTranslation"],[348,36,313,34],[348,37,313,35,"setValue"],[348,45,313,43],[348,46,313,44,"nextFramePosition"],[348,63,313,61],[348,64,313,62],[349,6,314,4],[350,6,315,4],[350,12,315,10,"willShow"],[350,20,315,18],[350,23,315,21,"toValue"],[350,30,315,28],[350,35,315,33],[350,36,315,34],[351,6,316,4],[351,10,316,8],[351,11,316,9,"updateShowing"],[351,24,316,22],[351,25,316,23,"willShow"],[351,33,316,31],[351,34,316,32],[352,6,317,4],[352,10,317,8],[352,11,317,9,"emitStateChanged"],[352,27,317,25],[352,28,317,26,"SETTLING"],[352,36,317,34],[352,38,317,36,"willShow"],[352,46,317,44],[352,47,317,45],[353,6,318,4],[353,10,318,8],[353,11,318,9,"setState"],[353,19,318,17],[353,20,318,18],[354,8,319,6,"drawerState"],[354,19,319,17],[354,21,319,19,"SETTLING"],[355,6,320,4],[355,7,320,5],[355,8,320,6],[356,6,321,4],[356,10,321,8],[356,14,321,12],[356,15,321,13,"props"],[356,20,321,18],[356,21,321,19,"hideStatusBar"],[356,34,321,32],[356,36,321,34],[357,8,322,6,"StatusBar"],[357,17,322,15],[357,18,322,15,"default"],[357,25,322,15],[357,26,322,16,"setHidden"],[357,35,322,25],[357,36,322,26,"willShow"],[357,44,322,34],[357,46,322,36],[357,50,322,40],[357,51,322,41,"props"],[357,56,322,46],[357,57,322,47,"statusBarAnimation"],[357,75,322,65],[357,79,322,69],[357,86,322,76],[357,87,322,77],[358,6,323,4],[359,6,324,4,"Animated"],[359,14,324,12],[359,15,324,12,"default"],[359,22,324,12],[359,23,324,13,"spring"],[359,29,324,19],[359,30,324,20],[359,34,324,24],[359,35,324,25,"state"],[359,40,324,30],[359,41,324,31,"drawerTranslation"],[359,58,324,48],[359,60,324,50],[360,8,325,6,"velocity"],[360,16,325,14],[361,8,326,6,"bounciness"],[361,18,326,16],[361,20,326,18],[361,21,326,19],[362,8,327,6,"toValue"],[362,15,327,13],[363,8,328,6,"useNativeDriver"],[363,23,328,21],[363,25,328,23],[363,29,328,27],[363,30,328,28,"props"],[363,35,328,33],[363,36,328,34,"useNativeAnimations"],[363,55,328,53],[364,8,329,6,"speed"],[364,13,329,11],[364,15,329,13,"speed"],[364,20,329,18],[364,24,329,22,"undefined"],[365,6,330,4],[365,7,330,5],[365,8,330,6],[365,9,330,7,"start"],[365,14,330,12],[365,15,330,13],[365,16,330,14],[366,8,331,6,"finished"],[367,6,332,4],[367,7,332,5],[367,12,332,10],[368,8,333,6],[368,12,333,10,"finished"],[368,20,333,18],[368,22,333,20],[369,10,334,8],[369,14,334,12],[369,15,334,13,"emitStateChanged"],[369,31,334,29],[369,32,334,30,"IDLE"],[369,36,334,34],[369,38,334,36,"willShow"],[369,46,334,44],[369,47,334,45],[370,10,335,8],[370,14,335,12],[370,15,335,13,"setState"],[370,23,335,21],[370,24,335,22],[371,12,336,10,"drawerOpened"],[371,24,336,22],[371,26,336,24,"willShow"],[372,10,337,8],[372,11,337,9],[372,12,337,10],[373,10,338,8],[373,14,338,12],[373,18,338,16],[373,19,338,17,"state"],[373,24,338,22],[373,25,338,23,"drawerState"],[373,36,338,34],[373,41,338,39,"DRAGGING"],[373,49,338,47],[373,51,338,49],[374,12,339,10],[375,12,340,10],[376,12,341,10],[376,16,341,14],[376,17,341,15,"setState"],[376,25,341,23],[376,26,341,24],[377,14,342,12,"drawerState"],[377,25,342,23],[377,27,342,25,"IDLE"],[378,12,343,10],[378,13,343,11],[378,14,343,12],[379,10,344,8],[380,10,345,8],[380,14,345,12,"willShow"],[380,22,345,20],[380,24,345,22],[381,12,346,10],[381,16,346,14],[381,17,346,15,"props"],[381,22,346,20],[381,23,346,21,"onDrawerOpen"],[381,35,346,33],[381,38,346,36],[381,39,346,37],[382,10,347,8],[382,11,347,9],[382,17,347,15],[383,12,348,10],[383,16,348,14],[383,17,348,15,"props"],[383,22,348,20],[383,23,348,21,"onDrawerClose"],[383,36,348,34],[383,39,348,37],[383,40,348,38],[384,10,349,8],[385,8,350,6],[386,6,351,4],[386,7,351,5],[386,8,351,6],[387,4,352,2],[387,5,352,3],[389,4,354,2],[390,4,355,2,"openDrawer"],[390,14,355,12],[390,17,355,15,"openDrawer"],[390,18,355,16,"options"],[390,25,355,23],[390,28,355,26],[390,29,355,27],[390,30,355,28],[390,35,355,33],[391,6,356,4],[391,10,356,8],[391,11,356,9,"animateDrawer"],[391,24,356,22],[392,6,357,4],[393,6,358,4,"undefined"],[393,15,358,13],[393,17,358,15],[393,21,358,19],[393,22,358,20,"props"],[393,27,358,25],[393,28,358,26,"drawerWidth"],[393,39,358,37],[393,41,358,39,"options"],[393,48,358,46],[393,49,358,47,"velocity"],[393,57,358,55],[393,60,358,58,"options"],[393,67,358,65],[393,68,358,66,"velocity"],[393,76,358,74],[393,79,358,77],[393,80,358,78],[393,82,358,80,"options"],[393,89,358,87],[393,90,358,88,"speed"],[393,95,358,93],[393,96,358,94],[395,6,360,4],[396,6,361,4],[397,6,362,4],[397,10,362,8],[397,11,362,9,"forceUpdate"],[397,22,362,20],[397,23,362,21],[397,24,362,22],[398,4,363,2],[398,5,363,3],[399,4,364,2,"closeDrawer"],[399,15,364,13],[399,18,364,16,"closeDrawer"],[399,19,364,17,"options"],[399,26,364,24],[399,29,364,27],[399,30,364,28],[399,31,364,29],[399,36,364,34],[400,6,365,4],[401,6,366,4],[401,10,366,8],[401,11,366,9,"animateDrawer"],[401,24,366,22],[401,25,366,23,"undefined"],[401,34,366,32],[401,36,366,34],[401,37,366,35],[401,39,366,37,"options"],[401,46,366,44],[401,47,366,45,"velocity"],[401,55,366,53],[401,58,366,56,"options"],[401,65,366,63],[401,66,366,64,"velocity"],[401,74,366,72],[401,77,366,75],[401,78,366,76],[401,80,366,78,"options"],[401,87,366,85],[401,88,366,86,"speed"],[401,93,366,91],[401,94,366,92],[403,6,368,4],[404,6,369,4],[405,6,370,4],[405,10,370,8],[405,11,370,9,"forceUpdate"],[405,22,370,20],[405,23,370,21],[405,24,370,22],[406,4,371,2],[406,5,371,3],[407,4,372,2,"renderOverlay"],[407,17,372,15],[407,20,372,18,"renderOverlay"],[407,21,372,18],[407,26,372,24],[408,6,373,4],[409,6,374,4],[409,10,374,4,"invariant"],[409,19,374,13],[409,20,374,13,"default"],[409,27,374,13],[409,29,374,14],[409,33,374,18],[409,34,374,19,"openValue"],[409,43,374,28],[409,45,374,30],[409,60,374,45],[409,61,374,46],[410,6,375,4],[410,10,375,8,"overlayOpacity"],[410,24,375,22],[411,6,376,4],[411,10,376,8],[411,14,376,12],[411,15,376,13,"state"],[411,20,376,18],[411,21,376,19,"drawerState"],[411,32,376,30],[411,37,376,35,"IDLE"],[411,41,376,39],[411,43,376,41],[412,8,377,6,"overlayOpacity"],[412,22,377,20],[412,25,377,23],[412,29,377,27],[412,30,377,28,"openValue"],[412,39,377,37],[413,6,378,4],[413,7,378,5],[413,13,378,11],[414,8,379,6,"overlayOpacity"],[414,22,379,20],[414,25,379,23],[414,29,379,27],[414,30,379,28,"state"],[414,35,379,33],[414,36,379,34,"drawerOpened"],[414,48,379,46],[414,51,379,49],[414,52,379,50],[414,55,379,53],[414,56,379,54],[415,6,380,4],[416,6,381,4],[416,12,381,10,"dynamicOverlayStyles"],[416,32,381,30],[416,35,381,33],[417,8,382,6,"opacity"],[417,15,382,13],[417,17,382,15,"overlayOpacity"],[417,31,382,29],[418,8,383,6,"backgroundColor"],[418,23,383,21],[418,25,383,23],[418,29,383,27],[418,30,383,28,"props"],[418,35,383,33],[418,36,383,34,"overlayColor"],[419,6,384,4],[419,7,384,5],[420,6,385,4],[420,13,385,11],[420,26,385,24],[420,30,385,24,"_jsx"],[420,46,385,28],[420,47,385,28,"jsx"],[420,50,385,28],[420,52,385,29,"TapGestureHandler"],[420,78,385,46],[420,79,385,46,"TapGestureHandler"],[420,96,385,46],[420,98,385,48],[421,8,386,6,"onHandlerStateChange"],[421,28,386,26],[421,30,386,28],[421,34,386,32],[421,35,386,33,"onTapHandlerStateChange"],[421,58,386,56],[422,8,387,6,"children"],[422,16,387,14],[422,18,387,16],[422,31,387,29],[422,35,387,29,"_jsx"],[422,51,387,33],[422,52,387,33,"jsx"],[422,55,387,33],[422,57,387,34,"Animated"],[422,65,387,42],[422,66,387,42,"default"],[422,73,387,42],[422,74,387,43,"View"],[422,78,387,47],[422,80,387,49],[423,10,388,8,"pointerEvents"],[423,23,388,21],[423,25,388,23],[423,29,388,27],[423,30,388,28,"drawerShown"],[423,41,388,39],[423,44,388,42],[423,50,388,48],[423,53,388,51],[423,59,388,57],[424,10,389,8,"ref"],[424,13,389,11],[424,15,389,13],[424,19,389,17],[424,20,389,18,"pointerEventsView"],[424,37,389,35],[425,10,390,8,"style"],[425,15,390,13],[425,17,390,15],[425,18,390,16,"styles"],[425,24,390,22],[425,25,390,23,"overlay"],[425,32,390,30],[425,34,390,32,"dynamicOverlayStyles"],[425,54,390,52],[426,8,391,6],[426,9,391,7],[427,6,392,4],[427,7,392,5],[427,8,392,6],[428,4,393,2],[428,5,393,3],[429,4,394,2,"renderDrawer"],[429,16,394,14],[429,19,394,17,"renderDrawer"],[429,20,394,17],[429,25,394,23],[430,6,395,4],[430,12,395,10],[431,8,396,6,"drawerBackgroundColor"],[431,29,396,27],[432,8,397,6,"drawerWidth"],[432,19,397,17],[433,8,398,6,"drawerPosition"],[433,22,398,20],[434,8,399,6,"drawerType"],[434,18,399,16],[435,8,400,6,"drawerContainerStyle"],[435,28,400,26],[436,8,401,6,"contentContainerStyle"],[437,6,402,4],[437,7,402,5],[437,10,402,8],[437,14,402,12],[437,15,402,13,"props"],[437,20,402,18],[438,6,403,4],[438,12,403,10,"fromLeft"],[438,20,403,18],[438,23,403,21,"drawerPosition"],[438,37,403,35],[438,42,403,40],[438,48,403,46],[439,6,404,4],[439,12,404,10,"drawerSlide"],[439,23,404,21],[439,26,404,24,"drawerType"],[439,36,404,34],[439,41,404,39],[439,47,404,45],[440,6,405,4],[440,12,405,10,"containerSlide"],[440,26,405,24],[440,29,405,27,"drawerType"],[440,39,405,37],[440,44,405,42],[440,51,405,49],[442,6,407,4],[443,6,408,4],[444,6,409,4],[445,6,410,4],[446,6,411,4],[446,12,411,10,"reverseContentDirection"],[446,35,411,33],[446,38,411,36,"I18nManager"],[446,49,411,47],[446,50,411,47,"default"],[446,57,411,47],[446,58,411,48,"isRTL"],[446,63,411,53],[446,66,411,56,"fromLeft"],[446,74,411,64],[446,77,411,67],[446,78,411,68,"fromLeft"],[446,86,411,76],[447,6,412,4],[447,12,412,10,"dynamicDrawerStyles"],[447,31,412,29],[447,34,412,32],[448,8,413,6,"backgroundColor"],[448,23,413,21],[448,25,413,23,"drawerBackgroundColor"],[448,46,413,44],[449,8,414,6,"width"],[449,13,414,11],[449,15,414,13,"drawerWidth"],[450,6,415,4],[450,7,415,5],[451,6,416,4],[451,12,416,10,"openValue"],[451,21,416,19],[451,24,416,22],[451,28,416,26],[451,29,416,27,"openValue"],[451,38,416,36],[452,6,417,4],[452,10,417,4,"invariant"],[452,19,417,13],[452,20,417,13,"default"],[452,27,417,13],[452,29,417,14,"openValue"],[452,38,417,23],[452,40,417,25],[452,55,417,40],[452,56,417,41],[453,6,418,4],[453,10,418,8,"containerStyles"],[453,25,418,23],[454,6,419,4],[454,10,419,8,"containerSlide"],[454,24,419,22],[454,26,419,24],[455,8,420,6],[455,14,420,12,"containerTranslateX"],[455,33,420,31],[455,36,420,34,"openValue"],[455,45,420,43],[455,46,420,44,"interpolate"],[455,57,420,55],[455,58,420,56],[456,10,421,8,"inputRange"],[456,20,421,18],[456,22,421,20],[456,23,421,21],[456,24,421,22],[456,26,421,24],[456,27,421,25],[456,28,421,26],[457,10,422,8,"outputRange"],[457,21,422,19],[457,23,422,21,"fromLeft"],[457,31,422,29],[457,34,422,32],[457,35,422,33],[457,36,422,34],[457,38,422,36,"drawerWidth"],[457,49,422,47],[457,50,422,48],[457,53,422,51],[457,54,422,52],[457,55,422,53],[457,57,422,55],[457,58,422,56,"drawerWidth"],[457,69,422,67],[457,70,422,68],[458,10,423,8,"extrapolate"],[458,21,423,19],[458,23,423,21],[459,8,424,6],[459,9,424,7],[459,10,424,8],[460,8,425,6,"containerStyles"],[460,23,425,21],[460,26,425,24],[461,10,426,8,"transform"],[461,19,426,17],[461,21,426,19],[461,22,426,20],[462,12,427,10,"translateX"],[462,22,427,20],[462,24,427,22,"containerTranslateX"],[463,10,428,8],[463,11,428,9],[464,8,429,6],[464,9,429,7],[465,6,430,4],[466,6,431,4],[466,10,431,8,"drawerTranslateX"],[466,26,431,24],[466,29,431,27],[466,30,431,28],[467,6,432,4],[467,10,432,8,"drawerSlide"],[467,21,432,19],[467,23,432,21],[468,8,433,6],[468,14,433,12,"closedDrawerOffset"],[468,32,433,30],[468,35,433,33,"fromLeft"],[468,43,433,41],[468,46,433,44],[468,47,433,45,"drawerWidth"],[468,58,433,56],[468,61,433,59,"drawerWidth"],[468,72,433,70],[469,8,434,6],[469,12,434,10],[469,16,434,14],[469,17,434,15,"state"],[469,22,434,20],[469,23,434,21,"drawerState"],[469,34,434,32],[469,39,434,37,"IDLE"],[469,43,434,41],[469,45,434,43],[470,10,435,8,"drawerTranslateX"],[470,26,435,24],[470,29,435,27,"openValue"],[470,38,435,36],[470,39,435,37,"interpolate"],[470,50,435,48],[470,51,435,49],[471,12,436,10,"inputRange"],[471,22,436,20],[471,24,436,22],[471,25,436,23],[471,26,436,24],[471,28,436,26],[471,29,436,27],[471,30,436,28],[472,12,437,10,"outputRange"],[472,23,437,21],[472,25,437,23],[472,26,437,24,"closedDrawerOffset"],[472,44,437,42],[472,46,437,44],[472,47,437,45],[472,48,437,46],[473,12,438,10,"extrapolate"],[473,23,438,21],[473,25,438,23],[474,10,439,8],[474,11,439,9],[474,12,439,10],[475,8,440,6],[475,9,440,7],[475,15,440,13],[476,10,441,8,"drawerTranslateX"],[476,26,441,24],[476,29,441,27],[476,33,441,31],[476,34,441,32,"state"],[476,39,441,37],[476,40,441,38,"drawerOpened"],[476,52,441,50],[476,55,441,53],[476,56,441,54],[476,59,441,57,"closedDrawerOffset"],[476,77,441,75],[477,8,442,6],[478,6,443,4],[479,6,444,4],[479,12,444,10,"drawerStyles"],[479,24,444,22],[479,27,444,25],[480,8,445,6,"transform"],[480,17,445,15],[480,19,445,17],[480,20,445,18],[481,10,446,8,"translateX"],[481,20,446,18],[481,22,446,20,"drawerTranslateX"],[482,8,447,6],[482,9,447,7],[482,10,447,8],[483,8,448,6,"flexDirection"],[483,21,448,19],[483,23,448,21,"reverseContentDirection"],[483,46,448,44],[483,49,448,47],[483,62,448,60],[483,65,448,63],[484,6,449,4],[484,7,449,5],[485,6,450,4],[485,13,450,11],[485,26,450,24],[485,30,450,24,"_jsxs"],[485,46,450,29],[485,47,450,29,"jsxs"],[485,51,450,29],[485,53,450,30,"Animated"],[485,61,450,38],[485,62,450,38,"default"],[485,69,450,38],[485,70,450,39,"View"],[485,74,450,43],[485,76,450,45],[486,8,451,6,"style"],[486,13,451,11],[486,15,451,13,"styles"],[486,21,451,19],[486,22,451,20,"main"],[486,26,451,24],[487,8,452,6,"onLayout"],[487,16,452,14],[487,18,452,16],[487,22,452,20],[487,23,452,21,"handleContainerLayout"],[487,44,452,42],[488,8,453,6,"children"],[488,16,453,14],[488,18,453,16],[488,19,453,17],[488,32,453,30],[488,36,453,30,"_jsxs"],[488,52,453,35],[488,53,453,35,"jsxs"],[488,57,453,35],[488,59,453,36,"Animated"],[488,67,453,44],[488,68,453,44,"default"],[488,75,453,44],[488,76,453,45,"View"],[488,80,453,49],[488,82,453,51],[489,10,454,8,"style"],[489,15,454,13],[489,17,454,15],[489,18,454,16,"drawerType"],[489,28,454,26],[489,33,454,31],[489,40,454,38],[489,43,454,41,"styles"],[489,49,454,47],[489,50,454,48,"containerOnBack"],[489,65,454,63],[489,68,454,66,"styles"],[489,74,454,72],[489,75,454,73,"containerInFront"],[489,91,454,89],[489,93,454,91,"containerStyles"],[489,108,454,106],[489,110,454,108,"contentContainerStyle"],[489,131,454,129],[489,132,454,130],[490,10,455,8,"importantForAccessibility"],[490,35,455,33],[490,37,455,35],[490,41,455,39],[490,42,455,40,"drawerShown"],[490,53,455,51],[490,56,455,54],[490,77,455,75],[490,80,455,78],[490,85,455,83],[491,10,456,8,"children"],[491,18,456,16],[491,20,456,18],[491,21,456,19],[491,28,456,26],[491,32,456,30],[491,33,456,31,"props"],[491,38,456,36],[491,39,456,37,"children"],[491,47,456,45],[491,52,456,50],[491,62,456,60],[491,65,456,63],[491,69,456,67],[491,70,456,68,"props"],[491,75,456,73],[491,76,456,74,"children"],[491,84,456,82],[491,85,456,83],[491,89,456,87],[491,90,456,88,"openValue"],[491,99,456,97],[491,100,456,98],[491,103,456,101],[491,107,456,105],[491,108,456,106,"props"],[491,113,456,111],[491,114,456,112,"children"],[491,122,456,120],[491,124,456,122],[491,128,456,126],[491,129,456,127,"renderOverlay"],[491,142,456,140],[491,143,456,141],[491,144,456,142],[492,8,457,6],[492,9,457,7],[492,10,457,8],[492,12,457,10],[492,25,457,23],[492,29,457,23,"_jsx"],[492,45,457,27],[492,46,457,27,"jsx"],[492,49,457,27],[492,51,457,28,"Animated"],[492,59,457,36],[492,60,457,36,"default"],[492,67,457,36],[492,68,457,37,"View"],[492,72,457,41],[492,74,457,43],[493,10,458,8,"pointerEvents"],[493,23,458,21],[493,25,458,23],[493,35,458,33],[494,10,459,8,"ref"],[494,13,459,11],[494,15,459,13],[494,19,459,17],[494,20,459,18,"accessibilityIsModalView"],[494,44,459,42],[495,10,460,8,"accessibilityViewIsModal"],[495,34,460,32],[495,36,460,34],[495,40,460,38],[495,41,460,39,"drawerShown"],[495,52,460,50],[496,10,461,8,"style"],[496,15,461,13],[496,17,461,15],[496,18,461,16,"styles"],[496,24,461,22],[496,25,461,23,"drawerContainer"],[496,40,461,38],[496,42,461,40,"drawerStyles"],[496,54,461,52],[496,56,461,54,"drawerContainerStyle"],[496,76,461,74],[496,77,461,75],[497,10,462,8,"children"],[497,18,462,16],[497,20,462,18],[497,33,462,31],[497,37,462,31,"_jsx"],[497,53,462,35],[497,54,462,35,"jsx"],[497,57,462,35],[497,59,462,36,"View"],[497,63,462,40],[497,64,462,40,"default"],[497,71,462,40],[497,73,462,42],[498,12,463,10,"style"],[498,17,463,15],[498,19,463,17,"dynamicDrawerStyles"],[498,38,463,36],[499,12,464,10,"children"],[499,20,464,18],[499,22,464,20],[499,26,464,24],[499,27,464,25,"props"],[499,32,464,30],[499,33,464,31,"renderNavigationView"],[499,53,464,51],[499,54,464,52],[499,58,464,56],[499,59,464,57,"openValue"],[499,68,464,66],[500,10,465,8],[500,11,465,9],[501,8,466,6],[501,9,466,7],[501,10,466,8],[502,6,467,4],[502,7,467,5],[502,8,467,6],[503,4,468,2],[503,5,468,3],[504,4,469,2,"setPanGestureRef"],[504,20,469,18],[504,23,469,21,"ref"],[504,26,469,24],[504,30,469,28],[505,6,470,4],[506,6,471,4],[507,6,472,4],[507,10,472,8],[507,11,472,9,"panGestureHandler"],[507,28,472,26],[507,29,472,27,"current"],[507,36,472,34],[507,39,472,37,"ref"],[507,42,472,40],[508,6,473,4],[508,10,473,8],[508,11,473,9,"props"],[508,16,473,14],[508,17,473,15,"onGestureRef"],[508,29,473,27],[508,32,473,30,"ref"],[508,35,473,33],[508,36,473,34],[509,4,474,2],[509,5,474,3],[510,4,475,2,"render"],[510,10,475,8,"render"],[510,11,475,8],[510,13,475,11],[511,6,476,4],[511,12,476,10],[512,8,477,6,"drawerPosition"],[512,22,477,20],[513,8,478,6,"drawerLockMode"],[513,22,478,20],[514,8,479,6,"edgeWidth"],[514,17,479,15],[515,8,480,6,"minSwipeDistance"],[516,6,481,4],[516,7,481,5],[516,10,481,8],[516,14,481,12],[516,15,481,13,"props"],[516,20,481,18],[517,6,482,4],[517,12,482,10,"fromLeft"],[517,20,482,18],[517,23,482,21,"drawerPosition"],[517,37,482,35],[517,42,482,40],[517,48,482,46],[519,6,484,4],[520,6,485,4],[521,6,486,4],[522,6,487,4],[522,12,487,10,"gestureOrientation"],[522,30,487,28],[522,33,487,31],[522,34,487,32,"fromLeft"],[522,42,487,40],[522,45,487,43],[522,46,487,44],[522,49,487,47],[522,50,487,48],[522,51,487,49],[522,56,487,54],[522,60,487,58],[522,61,487,59,"drawerShown"],[522,72,487,70],[522,75,487,73],[522,76,487,74],[522,77,487,75],[522,80,487,78],[522,81,487,79],[522,82,487,80],[524,6,489,4],[525,6,490,4],[526,6,491,4],[527,6,492,4],[527,12,492,10,"hitSlop"],[527,19,492,17],[527,22,492,20,"fromLeft"],[527,30,492,28],[527,33,492,31],[528,8,493,6,"left"],[528,12,493,10],[528,14,493,12],[528,15,493,13],[529,8,494,6,"width"],[529,13,494,11],[529,15,494,13],[529,19,494,17],[529,20,494,18,"drawerShown"],[529,31,494,29],[529,34,494,32,"undefined"],[529,43,494,41],[529,46,494,44,"edgeWidth"],[530,6,495,4],[530,7,495,5],[530,10,495,8],[531,8,496,6,"right"],[531,13,496,11],[531,15,496,13],[531,16,496,14],[532,8,497,6,"width"],[532,13,497,11],[532,15,497,13],[532,19,497,17],[532,20,497,18,"drawerShown"],[532,31,497,29],[532,34,497,32,"undefined"],[532,43,497,41],[532,46,497,44,"edgeWidth"],[533,6,498,4],[533,7,498,5],[534,6,499,4],[534,13,499,11],[534,26,499,24],[534,30,499,24,"_jsx"],[534,46,499,28],[534,47,499,28,"jsx"],[534,50,499,28],[534,52,499,29,"PanGestureHandler"],[534,78,499,46],[534,79,499,46,"PanGestureHandler"],[534,96,499,46],[534,97,500,4],[535,6,500,4],[535,8,501,6],[536,8,502,6,"userSelect"],[536,18,502,16],[536,20,502,18],[536,24,502,22],[536,25,502,23,"props"],[536,30,502,28],[536,31,502,29,"userSelect"],[536,41,502,39],[537,8,503,6,"activeCursor"],[537,20,503,18],[537,22,503,20],[537,26,503,24],[537,27,503,25,"props"],[537,32,503,30],[537,33,503,31,"activeCursor"],[537,45,503,43],[538,8,504,6,"mouseButton"],[538,19,504,17],[538,21,504,19],[538,25,504,23],[538,26,504,24,"props"],[538,31,504,29],[538,32,504,30,"mouseButton"],[538,43,504,41],[539,8,505,6,"enableContextMenu"],[539,25,505,23],[539,27,505,25],[539,31,505,29],[539,32,505,30,"props"],[539,37,505,35],[539,38,505,36,"enableContextMenu"],[539,55,505,53],[540,8,506,6,"ref"],[540,11,506,9],[540,13,506,11],[540,17,506,15],[540,18,506,16,"setPanGestureRef"],[540,34,506,32],[541,8,507,6,"hitSlop"],[541,15,507,13],[541,17,507,15,"hitSlop"],[541,24,507,22],[542,8,508,6,"activeOffsetX"],[542,21,508,19],[542,23,508,21,"gestureOrientation"],[542,41,508,39],[542,44,508,42,"minSwipeDistance"],[542,60,508,58],[543,8,509,6,"failOffsetY"],[543,19,509,17],[543,21,509,19],[543,22,509,20],[543,23,509,21],[543,25,509,23],[543,27,509,25],[543,29,509,27],[543,30,509,28],[544,8,510,6,"onGestureEvent"],[544,22,510,20],[544,24,510,22],[544,28,510,26],[544,29,510,27,"onGestureEvent"],[544,43,510,41],[545,8,511,6,"onHandlerStateChange"],[545,28,511,26],[545,30,511,28],[545,34,511,32],[545,35,511,33,"openingHandlerStateChange"],[545,60,511,58],[546,8,512,6,"enableTrackpadTwoFingerGesture"],[546,38,512,36],[546,40,512,38],[546,44,512,42],[546,45,512,43,"props"],[546,50,512,48],[546,51,512,49,"enableTrackpadTwoFingerGesture"],[546,81,512,79],[547,8,513,6,"enabled"],[547,15,513,13],[547,17,513,15,"drawerLockMode"],[547,31,513,29],[547,36,513,34],[547,51,513,49],[547,55,513,53,"drawerLockMode"],[547,69,513,67],[547,74,513,72],[547,87,513,85],[548,8,514,6,"children"],[548,16,514,14],[548,18,514,16],[548,22,514,20],[548,23,514,21,"renderDrawer"],[548,35,514,33],[548,36,514,34],[549,6,515,4],[549,7,515,5],[549,8,515,6],[550,4,516,2],[551,2,517,0],[552,2,518,0],[552,8,518,6,"styles"],[552,14,518,12],[552,17,518,15,"StyleSheet"],[552,27,518,25],[552,28,518,25,"default"],[552,35,518,25],[552,36,518,26,"create"],[552,42,518,32],[552,43,518,33],[553,4,519,2,"drawerContainer"],[553,19,519,17],[553,21,519,19],[554,6,520,4],[554,9,520,7,"StyleSheet"],[554,19,520,17],[554,20,520,17,"default"],[554,27,520,17],[554,28,520,18,"absoluteFillObject"],[554,46,520,36],[555,6,521,4,"zIndex"],[555,12,521,10],[555,14,521,12],[555,18,521,16],[556,6,522,4,"flexDirection"],[556,19,522,17],[556,21,522,19],[557,4,523,2],[557,5,523,3],[558,4,524,2,"containerInFront"],[558,20,524,18],[558,22,524,20],[559,6,525,4],[559,9,525,7,"StyleSheet"],[559,19,525,17],[559,20,525,17,"default"],[559,27,525,17],[559,28,525,18,"absoluteFillObject"],[559,46,525,36],[560,6,526,4,"zIndex"],[560,12,526,10],[560,14,526,12],[561,4,527,2],[561,5,527,3],[562,4,528,2,"containerOnBack"],[562,19,528,17],[562,21,528,19],[563,6,529,4],[563,9,529,7,"StyleSheet"],[563,19,529,17],[563,20,529,17,"default"],[563,27,529,17],[563,28,529,18,"absoluteFillObject"],[564,4,530,2],[564,5,530,3],[565,4,531,2,"main"],[565,8,531,6],[565,10,531,8],[566,6,532,4,"flex"],[566,10,532,8],[566,12,532,10],[566,13,532,11],[567,6,533,4,"zIndex"],[567,12,533,10],[567,14,533,12],[567,15,533,13],[568,6,534,4,"overflow"],[568,14,534,12],[568,16,534,14],[569,4,535,2],[569,5,535,3],[570,4,536,2,"overlay"],[570,11,536,9],[570,13,536,11],[571,6,537,4],[571,9,537,7,"StyleSheet"],[571,19,537,17],[571,20,537,17,"default"],[571,27,537,17],[571,28,537,18,"absoluteFillObject"],[571,46,537,36],[572,6,538,4,"zIndex"],[572,12,538,10],[572,14,538,12],[573,4,539,2],[574,2,540,0],[574,3,540,1],[574,4,540,2],[575,0,540,3],[575,3]],"functionMap":{"names":["<global>","DrawerLayout","constructor","shouldComponentUpdate","updateAnimatedEvent","gestureOptions.listener","handleContainerLayout","emitStateChanged","openingHandlerStateChange","onTapHandlerStateChange","handleRelease","updateShowing","animateDrawer","Animated.spring.start$argument_0","openDrawer","closeDrawer","renderOverlay","renderDrawer","setPanGestureRef","render"],"mappings":"AAA;eC8D;ECY;GDc;EEC;GFK;wBGS;gCCwE;ODI;GHQ;0BKC;GLM;qBMC;GNE;8BOC;GPmB;4BQC;GRM;kBSC;GToC;kBUC;GViC;kBWC;aCiC;KDqB;GXC;eaG;GbQ;gBcC;GdO;kBeC;GfqB;iBgBC;GhB0E;qBiBC;GjBK;EkBC;GlByC;CDC"},"hasCjsExports":false},"type":"js/module"}]}